{
  "openapi": "3.0.0",
  "info": {
    "title": "Dina api",
    "contact": {
      "email": "oberg.anton@gmail.com"
    },
    "license": {
      "name": "GNU Affero General Public License",
      "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"
    },
    "version": "0.1.0",
    "description": "This is a first draft of dina api documentation.\nDescriptions like below can be written in markdown:\n\n* [Dina web](https://alpha-cm.dina-web.net/login)\n* [Dina web with mocks](https://alpha-cm-mock.dina-web.net/login)\n* [Dina style guilde](https://alpha-style.dina-web.net)\n",
    "x-versionInfo": "# This is some version specific information\n"
  },
  "servers": [
    {
      "description": "Alpha api server",
      "url": "https://alpha-api.dina-web.net"
    },
    {
      "description": "Auth server",
      "url": "https://alpha-keycloak.dina-web.net"
    },
    {
      "description": "Local api server",
      "url": "http://127.0.0.1:4444"
    },
    {
      "description": "Slim taxonomy",
      "url": "https://alpha-slimtaxonomy.dina-web.net"
    }
  ],
  "tags": [
    {
      "description": "## Service managing agents.\n",
      "name": "agentService"
    },
    {
      "description": "Auth api\n",
      "name": "authService"
    },
    {
      "description": "Api managing curated lists.\n",
      "name": "curatedListService"
    },
    {
      "description": "Locality Service\n",
      "name": "placeService"
    },
    {
      "description": "search",
      "name": "searchService"
    },
    {
      "description": "Specimens api\n",
      "name": "specimenService"
    },
    {
      "name": "statusService"
    },
    {
      "description": "Service managing storage\n",
      "name": "storageService"
    },
    {
      "description": "Mock taxon api\n",
      "name": "taxonomyService"
    }
  ],
  "paths": {
    "/api/agent/v01/agents": {
      "post": {
        "operationId": "agentCreate",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/agentCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentCreateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create agent",
        "tags": [
          "agentService"
        ]
      },
      "get": {
        "operationId": "agentGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "user"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "user"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentGetManyResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find agents",
        "tags": [
          "agentService"
        ]
      }
    },
    "/api/agent/v01/agents/{id}": {
      "get": {
        "operationId": "agentGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "agent id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "user"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "user"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentGetOneResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find agent by id",
        "tags": [
          "agentService"
        ]
      },
      "patch": {
        "operationId": "agentUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "agent id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/agentUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentUpdateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates agent",
        "tags": [
          "agentService"
        ]
      },
      "delete": {
        "operationId": "agentDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "agent id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentDelResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/agentDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes agent",
        "tags": [
          "agentService"
        ]
      }
    },
    "/auth/realms/dina/protocol/openid-connect/token": {
      "post": {
        "operationId": "loginUser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/loginUserRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/loginUserResponse"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "summary": "Gets user token",
        "tags": [
          "authService"
        ]
      }
    },
    "/api/auth/v01/users/{id}": {
      "get": {
        "operationId": "userGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "user id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/userGetOneResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/userGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/userGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/userGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find user by id",
        "tags": [
          "authService"
        ]
      }
    },
    "/api/auth/v01/users": {
      "get": {
        "operationId": "userGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/userGetManyResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/userGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/userGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find users",
        "tags": [
          "authService"
        ]
      }
    },
    "/auth/realms/dina/protocol/openid-connect/userInfo": {
      "get": {
        "operationId": "userInfoGetOne",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/userInfoGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Gets userInfo object",
        "tags": [
          "authService"
        ]
      }
    },
    "/api/curatedList/v01/causeOfDeathTypes": {
      "post": {
        "operationId": "causeOfDeathTypeCreate",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/causeOfDeathTypeCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeCreateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create causeOfDeathType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "causeOfDeathTypeGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeGetManyResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find causeOfDeathTypes",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/causeOfDeathTypes/{id}": {
      "get": {
        "operationId": "causeOfDeathTypeGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "causeOfDeathType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeGetOneResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find causeOfDeathType by id",
        "tags": [
          "curatedListService"
        ]
      },
      "patch": {
        "operationId": "causeOfDeathTypeUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "causeOfDeathType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/causeOfDeathTypeUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeUpdateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates causeOfDeathType",
        "tags": [
          "curatedListService"
        ]
      },
      "delete": {
        "operationId": "causeOfDeathTypeDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "causeOfDeathType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeDelResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes causeOfDeathType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/establishmentMeansTypes": {
      "post": {
        "operationId": "establishmentMeansTypeCreate",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/establishmentMeansTypeCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeCreateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create establishmentMeansType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "establishmentMeansTypeGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeGetManyResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find establishmentMeansTypes",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/establishmentMeansTypes/{id}": {
      "get": {
        "operationId": "establishmentMeansTypeGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "establishmentMeansType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeGetOneResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find establishmentMeansType by id",
        "tags": [
          "curatedListService"
        ]
      },
      "patch": {
        "operationId": "establishmentMeansTypeUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "establishmentMeansType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/establishmentMeansTypeUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeUpdateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates establishmentMeansType",
        "tags": [
          "curatedListService"
        ]
      },
      "delete": {
        "operationId": "establishmentMeansTypeDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "establishmentMeansType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeDelResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes establishmentMeansType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/featureTypes": {
      "post": {
        "operationId": "featureTypeCreate",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/featureTypeCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeCreateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create featureType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "featureTypeGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeGetManyResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find featureTypes",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/featureTypes/{id}": {
      "get": {
        "operationId": "featureTypeGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "featureType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeGetOneResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find featureType by id",
        "tags": [
          "curatedListService"
        ]
      },
      "patch": {
        "operationId": "featureTypeUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "featureType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/featureTypeUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeUpdateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates featureType",
        "tags": [
          "curatedListService"
        ]
      },
      "delete": {
        "operationId": "featureTypeDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "featureType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeDelResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes featureType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/identifierTypes": {
      "post": {
        "operationId": "identifierTypeCreate",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/identifierTypeCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeCreateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create identifierType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "identifierTypeGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeGetManyResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find identifierTypes",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/identifierTypes/{id}": {
      "get": {
        "operationId": "identifierTypeGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "identifierType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeGetOneResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find identifierType by id",
        "tags": [
          "curatedListService"
        ]
      },
      "patch": {
        "operationId": "identifierTypeUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "identifierType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/identifierTypeUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeUpdateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates identifierType",
        "tags": [
          "curatedListService"
        ]
      },
      "delete": {
        "operationId": "identifierTypeDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "identifierType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeDelResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes identifierType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/preparationTypes": {
      "post": {
        "operationId": "preparationTypeCreate",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/preparationTypeCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeCreateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create preparationType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "preparationTypeGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeGetManyResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find preparationTypes",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/preparationTypes/{id}": {
      "get": {
        "operationId": "preparationTypeGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "preparationType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeGetOneResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find preparationType by id",
        "tags": [
          "curatedListService"
        ]
      },
      "patch": {
        "operationId": "preparationTypeUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "preparationType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/preparationTypeUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeUpdateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates preparationType",
        "tags": [
          "curatedListService"
        ]
      },
      "delete": {
        "operationId": "preparationTypeDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "preparationType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeDelResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes preparationType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/typeSpecimenTypes": {
      "post": {
        "operationId": "typeSpecimenTypeCreate",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/typeSpecimenTypeCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeCreateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create typeSpecimenType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "typeSpecimenTypeGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeGetManyResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find typeSpecimenTypes",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/typeSpecimenTypes/{id}": {
      "get": {
        "operationId": "typeSpecimenTypeGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "typeSpecimenType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeGetOneResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find typeSpecimenType by id",
        "tags": [
          "curatedListService"
        ]
      },
      "patch": {
        "operationId": "typeSpecimenTypeUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "typeSpecimenType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/typeSpecimenTypeUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeUpdateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates typeSpecimenType",
        "tags": [
          "curatedListService"
        ]
      },
      "delete": {
        "operationId": "typeSpecimenTypeDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "typeSpecimenType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeDelResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes typeSpecimenType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/locality/v01/places": {
      "post": {
        "operationId": "placeCreate",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/placeCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeCreateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create place",
        "tags": [
          "placeService"
        ]
      },
      "get": {
        "operationId": "placeGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "filter[group]",
            "description": "Filter by group, example: country",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[parentId]",
            "description": "Filter by parentId, example 123",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[search]",
            "description": "Filter by string search, example swe",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "parent",
              "children"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "parent",
                  "children"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetManyResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find places",
        "tags": [
          "placeService"
        ]
      }
    },
    "/api/locality/v01/places/{id}": {
      "get": {
        "operationId": "placeGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "place id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[descendantLevels]",
            "description": "NOT IMPLEMENTED - Levels of descendants to include. Only relevant if relationships descendants provided. example: [country, city]",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includes",
            "description": "NOT IMPLEMENTED - Add includes. example [descendants, children]",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "descendants",
                  "children"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "parent",
              "children"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "parent",
                  "children"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetOneResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find place by id",
        "tags": [
          "placeService"
        ]
      },
      "patch": {
        "operationId": "placeUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "place id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/placeUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates place",
        "tags": [
          "placeService"
        ]
      },
      "delete": {
        "operationId": "placeDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "place id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeDelResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes place",
        "tags": [
          "placeService"
        ]
      }
    },
    "/api/locality/v01/places/{id}/relationships/parent": {
      "patch": {
        "operationId": "placeUpdateRelationHasOneParent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "place id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/placeUpdateRelationHasOneParentRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateRelationHasOneParentResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateRelationHasOneParent-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateRelationHasOneParent-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateRelationHasOneParent-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update place -> parent",
        "tags": [
          "placeService"
        ]
      }
    },
    "/api/specimen/v01/searchSpecimens/{id}": {
      "get": {
        "operationId": "searchSpecimenGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "searchSpecimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenGetOneResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find searchSpecimen by id",
        "tags": [
          "searchService"
        ]
      }
    },
    "/api/specimen/v01/searchSpecimens": {
      "get": {
        "operationId": "searchSpecimenGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenGetManyResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find searchSpecimens",
        "tags": [
          "searchService"
        ]
      }
    },
    "/api/specimen/v01/specimens": {
      "post": {
        "operationId": "specimenCreate",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenCreateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create specimen",
        "tags": [
          "specimenService"
        ]
      },
      "get": {
        "operationId": "specimenGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "filter[catalogNumber]",
            "description": "catalog number used to filter specimens",
            "example": "123456",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "agents",
              "featureTypes",
              "physicalObjects",
              "places",
              "taxonNames"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "agents",
                  "featureTypes",
                  "physicalObjects",
                  "places",
                  "taxonNames"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetManyResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimens",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}": {
      "get": {
        "operationId": "specimenGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "agents",
              "featureTypes",
              "physicalObjects",
              "places",
              "taxonNames"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "agents",
                  "featureTypes",
                  "physicalObjects",
                  "places",
                  "taxonNames"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetOneResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen by id",
        "tags": [
          "specimenService"
        ]
      },
      "patch": {
        "operationId": "specimenUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates specimen",
        "tags": [
          "specimenService"
        ]
      },
      "delete": {
        "operationId": "specimenDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenDelResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes specimen",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/physicalObjects": {
      "patch": {
        "operationId": "specimenUpdateRelationHasManyPhysicalObjects",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenUpdateRelationHasManyPhysicalObjectsRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationHasManyPhysicalObjectsResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationHasManyPhysicalObjects-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationHasManyPhysicalObjects-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationHasManyPhysicalObjects-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> physicalObjects",
        "tags": [
          "specimenService"
        ]
      },
      "get": {
        "operationId": "specimenGetRelationHasManyPhysicalObjects",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationHasManyPhysicalObjectsResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationHasManyPhysicalObjects-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationHasManyPhysicalObjects-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationHasManyPhysicalObjects-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> physicalObjects",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/featureTypes": {
      "patch": {
        "operationId": "specimenUpdateRelationHasManyFeatureTypes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenUpdateRelationHasManyFeatureTypesRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationHasManyFeatureTypesResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationHasManyFeatureTypes-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationHasManyFeatureTypes-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationHasManyFeatureTypes-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> featureTypes",
        "tags": [
          "specimenService"
        ]
      },
      "get": {
        "operationId": "specimenGetRelationHasManyFeatureTypes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationHasManyFeatureTypesResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationHasManyFeatureTypes-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationHasManyFeatureTypes-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationHasManyFeatureTypes-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> featureTypes",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/places": {
      "patch": {
        "operationId": "specimenUpdateRelationHasManyPlaces",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenUpdateRelationHasManyPlacesRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationHasManyPlacesResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationHasManyPlaces-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationHasManyPlaces-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationHasManyPlaces-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> places",
        "tags": [
          "specimenService"
        ]
      },
      "get": {
        "operationId": "specimenGetRelationHasManyPlaces",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationHasManyPlacesResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationHasManyPlaces-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationHasManyPlaces-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationHasManyPlaces-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> places",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/taxonNames": {
      "get": {
        "operationId": "specimenGetRelationHasManyTaxonNames",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationHasManyTaxonNamesResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationHasManyTaxonNames-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationHasManyTaxonNames-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationHasManyTaxonNames-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> taxonNames",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/status": {
      "get": {
        "operationId": "getStatus",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStatusResponse"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "statusService"
        ]
      }
    },
    "/api/storage/v01/physicalObjects": {
      "post": {
        "operationId": "physicalObjectCreate",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/physicalObjectCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectCreateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create physicalObject",
        "tags": [
          "storageService"
        ]
      },
      "get": {
        "operationId": "physicalObjectGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "storageLocation",
              "specimens"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "storageLocation",
                  "specimens"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetManyResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalObjects",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/physicalObjects/{id}": {
      "get": {
        "operationId": "physicalObjectGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "storageLocation",
              "specimens"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "storageLocation",
                  "specimens"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetOneResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalObject by id",
        "tags": [
          "storageService"
        ]
      },
      "patch": {
        "operationId": "physicalObjectUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/physicalObjectUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates physicalObject",
        "tags": [
          "storageService"
        ]
      },
      "delete": {
        "operationId": "physicalObjectDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectDelResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes physicalObject",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/physicalObjects/{id}/relationships/specimens": {
      "get": {
        "description": "NOTE: Use endpoint with operationId \"specimenGetRelationBelongsToOnePhysicalObject\" instead. This endpoint is not active.",
        "operationId": "physicalObjectGetRelationHasManySpecimens",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetRelationHasManySpecimensResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetRelationHasManySpecimens-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetRelationHasManySpecimens-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetRelationHasManySpecimens-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalObject -> specimens",
        "tags": [
          "storageService"
        ],
        "x-inverseOperationId": "specimenGetRelationBelongsToOnePhysicalObject"
      },
      "patch": {
        "description": "NOTE: Use endpoint with operationId \"specimenUpdateRelationBelongsToOnePhysicalObject\" instead. This endpoint is not active.",
        "operationId": "physicalObjectUpdateRelationHasManySpecimens",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/physicalObjectUpdateRelationHasManySpecimensRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdateRelationHasManySpecimensResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdateRelationHasManySpecimens-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdateRelationHasManySpecimens-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdateRelationHasManySpecimens-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update physicalObject -> specimens",
        "tags": [
          "storageService"
        ],
        "x-inverseOperationId": "specimenUpdateRelationBelongsToOnePhysicalObject"
      }
    },
    "/api/storage/v01/physicalObjects/{id}/relationships/storageLocation": {
      "patch": {
        "operationId": "physicalObjectUpdateRelationBelongsToOneStorageLocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/physicalObjectUpdateRelationBelongsToOneStorageLocationRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdateRelationBelongsToOneStorageLocationResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdateRelationBelongsToOneStorageLocation-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdateRelationBelongsToOneStorageLocation-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdateRelationBelongsToOneStorageLocation-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update physicalObject -> storageLocation",
        "tags": [
          "storageService"
        ]
      },
      "get": {
        "operationId": "physicalObjectGetRelationBelongsToOneStorageLocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetRelationBelongsToOneStorageLocationResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetRelationBelongsToOneStorageLocation-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetRelationBelongsToOneStorageLocation-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetRelationBelongsToOneStorageLocation-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalObject -> storageLocation",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/storageLocations": {
      "post": {
        "operationId": "storageLocationCreate",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/storageLocationCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationCreateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create storageLocation",
        "tags": [
          "storageService"
        ]
      },
      "get": {
        "operationId": "storageLocationGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "filter[group]",
            "description": "Filter by group, example: country",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[parentId]",
            "description": "Filter by parentId, example 123",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[search]",
            "description": "Filter by string search, example bone room",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "physicalObjects",
              "parent",
              "children",
              "acceptedTaxonNames",
              "preparationTypes"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "physicalObjects",
                  "parent",
                  "children",
                  "acceptedTaxonNames",
                  "preparationTypes"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetManyResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find storageLocations",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/storageLocations/{id}": {
      "get": {
        "operationId": "storageLocationGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[descendantLevels]",
            "description": "NOT IMPLEMENTED - Levels of descendants to include. Only relevant if relationships descendants provided. example: [level 3, level 4]",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includes",
            "description": "NOT IMPLEMENTED - Add includes. example [descendants, children]",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "descendants",
                  "children"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "physicalObjects",
              "parent",
              "children",
              "acceptedTaxonNames",
              "preparationTypes"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "physicalObjects",
                  "parent",
                  "children",
                  "acceptedTaxonNames",
                  "preparationTypes"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetOneResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find storageLocation by id",
        "tags": [
          "storageService"
        ]
      },
      "patch": {
        "operationId": "storageLocationUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/storageLocationUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates storageLocation",
        "tags": [
          "storageService"
        ]
      },
      "delete": {
        "operationId": "storageLocationDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationDelResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes storageLocation",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/storageLocations/{id}/relationships/parent": {
      "patch": {
        "operationId": "storageLocationUpdateRelationHasOneParent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/storageLocationUpdateRelationHasOneParentRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationHasOneParentResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationHasOneParent-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationHasOneParent-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationHasOneParent-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update storageLocation -> parent",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/storageLocations/{id}/relationships/physicalObjects": {
      "get": {
        "operationId": "storageLocationGetRelationHasManyPhysicalObjects",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationHasManyPhysicalObjectsResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationHasManyPhysicalObjects-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationHasManyPhysicalObjects-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationHasManyPhysicalObjects-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find storageLocation -> physicalObjects",
        "tags": [
          "storageService"
        ]
      },
      "patch": {
        "description": "NOTE: Use endpoint with operationId \"physicalObjectUpdateRelationBelongsToOneStorageLocation\" instead. This endpoint is not active.",
        "operationId": "storageLocationUpdateRelationHasManyPhysicalObjects",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/storageLocationUpdateRelationHasManyPhysicalObjectsRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationHasManyPhysicalObjectsResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationHasManyPhysicalObjects-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationHasManyPhysicalObjects-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationHasManyPhysicalObjects-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update storageLocation -> physicalObjects",
        "tags": [
          "storageService"
        ],
        "x-inverseOperationId": "physicalObjectUpdateRelationBelongsToOneStorageLocation"
      }
    },
    "/api/taxonomy/v01/taxa": {
      "post": {
        "operationId": "taxonCreate",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonCreateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create taxon",
        "tags": [
          "taxonomyService"
        ]
      },
      "get": {
        "operationId": "taxonGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "acceptedTaxonName",
              "synonyms",
              "vernacularNames",
              "parent",
              "children"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "acceptedTaxonName",
                  "synonyms",
                  "vernacularNames",
                  "parent",
                  "children"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetManyResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxa",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxa/{id}": {
      "get": {
        "operationId": "taxonGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "acceptedTaxonName",
              "synonyms",
              "vernacularNames",
              "parent",
              "children"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "acceptedTaxonName",
                  "synonyms",
                  "vernacularNames",
                  "parent",
                  "children"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetOneResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxon by id",
        "tags": [
          "taxonomyService"
        ]
      },
      "patch": {
        "operationId": "taxonUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates taxon",
        "tags": [
          "taxonomyService"
        ]
      },
      "delete": {
        "operationId": "taxonDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonDelResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes taxon",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxa/{id}/relationships/parent": {
      "patch": {
        "operationId": "taxonUpdateRelationHasOneParent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonUpdateRelationHasOneParentRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationHasOneParentResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationHasOneParent-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationHasOneParent-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationHasOneParent-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update taxon -> parent",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxa/{id}/relationships/acceptedTaxonName": {
      "patch": {
        "description": "NOTE: Use endpoint with operationId \"taxonNameUpdateRelationBelongsToOneAcceptedToTaxon\" instead. This endpoint is not active.",
        "operationId": "taxonUpdateRelationHasOneAcceptedTaxonName",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonUpdateRelationHasOneAcceptedTaxonNameRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationHasOneAcceptedTaxonNameResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationHasOneAcceptedTaxonName-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationHasOneAcceptedTaxonName-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationHasOneAcceptedTaxonName-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update taxon -> acceptedTaxonName",
        "tags": [
          "taxonomyService"
        ],
        "x-inverseOperationId": "taxonNameUpdateRelationBelongsToOneAcceptedToTaxon"
      }
    },
    "/api/taxonomy/v01/taxa/{id}/relationships/synonyms": {
      "patch": {
        "description": "NOTE: Use endpoint with operationId \"taxonNameUpdateRelationBelongsToOneSynonymToTaxon\" instead. This endpoint is not active.",
        "operationId": "taxonUpdateRelationHasManySynonyms",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonUpdateRelationHasManySynonymsRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationHasManySynonymsResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationHasManySynonyms-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationHasManySynonyms-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationHasManySynonyms-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update taxon -> synonyms",
        "tags": [
          "taxonomyService"
        ],
        "x-inverseOperationId": "taxonNameUpdateRelationBelongsToOneSynonymToTaxon"
      },
      "get": {
        "operationId": "taxonGetRelationHasManySynonyms",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationHasManySynonymsResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationHasManySynonyms-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationHasManySynonyms-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationHasManySynonyms-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxon -> synonyms",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxa/{id}/relationships/vernacularNames": {
      "patch": {
        "description": "NOTE: Use endpoint with operationId \"taxonNameUpdateRelationBelongsToOneVernacularToTaxon\" instead. This endpoint is not active.",
        "operationId": "taxonUpdateRelationHasManyVernacularNames",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonUpdateRelationHasManyVernacularNamesRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationHasManyVernacularNamesResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationHasManyVernacularNames-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationHasManyVernacularNames-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationHasManyVernacularNames-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update taxon -> vernacularNames",
        "tags": [
          "taxonomyService"
        ],
        "x-inverseOperationId": "taxonNameUpdateRelationBelongsToOneVernacularToTaxon"
      },
      "get": {
        "operationId": "taxonGetRelationHasManyVernacularNames",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationHasManyVernacularNamesResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationHasManyVernacularNames-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationHasManyVernacularNames-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationHasManyVernacularNames-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxon -> vernacularNames",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxonNames": {
      "post": {
        "operationId": "taxonNameCreate",
        "parameters": [
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonNameCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameCreateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create taxonName",
        "tags": [
          "taxonomyService"
        ]
      },
      "get": {
        "operationId": "taxonNameGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "filter[name]",
            "description": "Taxon name - accepted scientific, synonym or vernacular name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "acceptedToTaxon",
              "synonymToTaxon",
              "vernacularToTaxon"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "acceptedToTaxon",
                  "synonymToTaxon",
                  "vernacularToTaxon"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetManyResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxonNames",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxonNames/{id}": {
      "get": {
        "operationId": "taxonNameGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxonName id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "example": [
              "acceptedToTaxon",
              "synonymToTaxon",
              "vernacularToTaxon"
            ],
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "acceptedToTaxon",
                  "synonymToTaxon",
                  "vernacularToTaxon"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetOneResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxonName by id",
        "tags": [
          "taxonomyService"
        ]
      },
      "patch": {
        "operationId": "taxonNameUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxonName id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonNameUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates taxonName",
        "tags": [
          "taxonomyService"
        ]
      },
      "delete": {
        "operationId": "taxonNameDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxonName id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameDelResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes taxonName",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxonNames/{id}/relationships/acceptedToTaxon": {
      "patch": {
        "operationId": "taxonNameUpdateRelationBelongsToOneAcceptedToTaxon",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxonName id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonNameUpdateRelationBelongsToOneAcceptedToTaxonRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationBelongsToOneAcceptedToTaxonResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationBelongsToOneAcceptedToTaxon-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationBelongsToOneAcceptedToTaxon-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationBelongsToOneAcceptedToTaxon-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update taxonName -> acceptedToTaxon",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxonNames/{id}/relationships/synonymToTaxon": {
      "patch": {
        "operationId": "taxonNameUpdateRelationBelongsToOneSynonymToTaxon",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxonName id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonNameUpdateRelationBelongsToOneSynonymToTaxonRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationBelongsToOneSynonymToTaxonResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationBelongsToOneSynonymToTaxon-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationBelongsToOneSynonymToTaxon-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationBelongsToOneSynonymToTaxon-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update taxonName -> synonymToTaxon",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxonNames/{id}/relationships/vernacularToTaxon": {
      "patch": {
        "operationId": "taxonNameUpdateRelationBelongsToOneVernacularToTaxon",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxonName id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "example": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonNameUpdateRelationBelongsToOneVernacularToTaxonRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationBelongsToOneVernacularToTaxonResponse"
                }
              }
            },
            "description": "this is a desc"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationBelongsToOneVernacularToTaxon-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationBelongsToOneVernacularToTaxon-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationBelongsToOneVernacularToTaxon-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update taxonName -> vernacularToTaxon",
        "tags": [
          "taxonomyService"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "400": {
        "description": "Bad Request",
        "example": "400",
        "title": "400",
        "type": "integer"
      },
      "403": {
        "description": "Forbidden",
        "example": "403",
        "title": "403",
        "type": "integer"
      },
      "404": {
        "description": "Not Found",
        "example": "404",
        "title": "404",
        "type": "integer"
      },
      "500": {
        "description": "Internal Server Error",
        "example": "500",
        "title": "500",
        "type": "integer"
      },
      "affiliation": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "x-summary": ""
          }
        },
        "x-category": "agentService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "agent": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "x-summary": ""
          },
          "givenName": {
            "type": "string",
            "x-summary": ""
          },
          "familyName": {
            "type": "string",
            "x-summary": ""
          },
          "fullName": {
            "type": "string",
            "x-summary": ""
          },
          "additionalName": {
            "type": "string",
            "x-summary": ""
          },
          "abbreviation": {
            "type": "string",
            "x-summary": ""
          },
          "alsoKnownAs": {
            "type": "string",
            "x-summary": ""
          },
          "disambiguatingDescription": {
            "type": "string",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "x-summary": ""
          },
          "postalAddress": {
            "type": "string",
            "x-summary": ""
          },
          "telephone": {
            "type": "string",
            "x-summary": ""
          },
          "email": {
            "type": "string",
            "x-summary": ""
          },
          "agentType": {
            "type": "string",
            "enum": [
              "person",
              "organization"
            ],
            "x-summary": ""
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/role"
            },
            "x-summary": ""
          },
          "readOnly": {
            "$ref": "#/components/schemas/readOnly",
            "x-summary": ""
          },
          "user": {
            "type": "object",
            "$ref": "#/components/schemas/user",
            "x-summary": ""
          }
        },
        "x-category": "agentService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "role": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "x-summary": ""
          },
          "dateRange": {
            "$ref": "#/components/schemas/dateRange",
            "x-summary": ""
          },
          "affiliation": {
            "$ref": "#/components/schemas/affiliation",
            "x-summary": ""
          }
        },
        "x-category": "agentService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "user": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "x-summary": ""
          },
          "email": {
            "type": "string",
            "x-summary": ""
          },
          "username": {
            "type": "string",
            "x-summary": ""
          }
        },
        "x-category": "authService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "dateRange": {
        "additionalProperties": false,
        "description": "A date range",
        "properties": {
          "dateText": {
            "type": "string",
            "example": "Before 1800",
            "x-summary": ""
          },
          "startDate": {
            "$ref": "#/components/schemas/singleDate",
            "x-summary": ""
          },
          "endDate": {
            "$ref": "#/components/schemas/singleDate",
            "x-summary": ""
          }
        },
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "externalModelReference": {
        "additionalProperties": false,
        "description": "A reference to a model owned by another service",
        "properties": {
          "id": {
            "type": "string",
            "x-summary": ""
          },
          "lid": {
            "type": "string",
            "x-summary": ""
          },
          "type": {
            "type": "string",
            "x-summary": ""
          }
        },
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "id": {
        "additionalProperties": false,
        "description": "A identifier id",
        "type": "string",
        "properties": {},
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "lid": {
        "additionalProperties": false,
        "description": "A local identifier lid (local id). Should be a uuid",
        "type": "string",
        "properties": {},
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "notDefinedModel": {
        "additionalProperties": true,
        "description": "A model to be used until proper concept is defined",
        "properties": {},
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "polygon": {
        "additionalProperties": false,
        "description": "### Definition\n\nTBA\n\n### Example(s)\n\nTBA\n\n\n\n",
        "properties": {
          "vertices": {
            "type": "array",
            "description": "Corners of the polygon in sane format",
            "x-summary": ""
          }
        },
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "position": {
        "additionalProperties": false,
        "description": "### Definition\n\nTBA\n\n### Example(s)\n\nTBA\n\n\n\n",
        "properties": {
          "latitude": {
            "type": "string",
            "description": "Latitude or northing. Use negative number or letter S for coordinates on southern hemisphere.",
            "x-summary": ""
          },
          "longitude": {
            "type": "string",
            "description": "Latitude or easting. Use negative number or letter W for coordinates on western hemisphere.",
            "x-summary": ""
          },
          "geodeticDatum": {
            "type": "string",
            "description": "Geodetic datum wip",
            "x-summary": ""
          },
          "uncertaintyInMeters": {
            "type": "integer",
            "description": "Coordinate uncertainty in meters",
            "x-summary": ""
          },
          "referenceSystem": {
            "type": "string",
            "description": "TBA",
            "x-summary": ""
          }
        },
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "readOnly": {
        "additionalProperties": true,
        "properties": {},
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "singleDate": {
        "additionalProperties": false,
        "description": "A single date",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "A date in standard format. TBA",
            "x-summary": ""
          },
          "interpretedTimestamp": {
            "type": "string",
            "description": "A date in standard format. TBA",
            "x-summary": ""
          },
          "dateText": {
            "type": "string",
            "example": "Before 1800",
            "x-summary": ""
          },
          "day": {
            "type": "integer",
            "x-summary": ""
          },
          "month": {
            "type": "integer",
            "x-summary": ""
          },
          "year": {
            "type": "integer",
            "x-summary": ""
          }
        },
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "translatedString": {
        "additionalProperties": false,
        "properties": {
          "en": {
            "type": "string",
            "x-summary": ""
          },
          "sv": {
            "type": "string",
            "x-summary": ""
          }
        },
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "type": {
        "additionalProperties": false,
        "description": "Resource type",
        "type": "string",
        "properties": {},
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "verticalPosition": {
        "additionalProperties": false,
        "description": "### Definition\n\nTBA\n\n### Example(s)\n\nTBA\n\n\n\n",
        "properties": {
          "maximumDepthInMeters": {
            "type": "integer",
            "description": "Max depth (m)",
            "x-summary": ""
          },
          "maximumElevationInMeters": {
            "type": "integer",
            "description": "Max elevation (m)",
            "x-summary": ""
          },
          "minimumDepthInMeters": {
            "type": "integer",
            "description": "Min depth (m)",
            "x-summary": ""
          },
          "minimumElevationInMeters": {
            "type": "integer",
            "description": "Min elevation (m)",
            "x-summary": ""
          }
        },
        "x-required": [
          "name",
          "id",
          "description",
          "type"
        ],
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "causeOfDeathType": {
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "$ref": "#/components/schemas/translatedString",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "establishmentMeansType": {
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "$ref": "#/components/schemas/translatedString",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "featureType": {
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "$ref": "#/components/schemas/translatedString",
            "x-summary": ""
          },
          "group": {
            "type": "string",
            "x-summary": ""
          },
          "selectableValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/selectableValue"
            },
            "x-summary": ""
          },
          "selectableUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/selectableUnit"
            },
            "x-summary": ""
          },
          "selectableMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/selectableMethod"
            },
            "x-summary": ""
          },
          "description": {
            "type": "string",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "description": "### Definition\n\nThe type of FeatureObservation. Will likely be a currated list\n\n### Example(s)\n\nSex\n",
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": ""
      },
      "identifierType": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "x-summary": ""
          },
          "key": {
            "type": "string",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "description": "# identifierType\n\nThe kind of [identifier](/docs/0.1.0/models/identifier/), for example \"catalog number\".\n\n\n### Definition\n\nThe kind of identifier.\n\n\n### Examples\n\n* \"catalog number\"\n* \"old skeleton number\"\n\n\n### Notes\n\nSome kinds of identifiers, like \"catalog number\", are predefined for the whole system whereas other are custom types defined for the collection (e.g. \"old skeleton number\").\n\n\n### See also\n\n[identifier](/docs/0.1.0/models/identifier/)",
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": "The kind of identifier."
      },
      "preparationType": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          },
          "category": {
            "type": "string",
            "example": "skin",
            "x-summary": ""
          },
          "name": {
            "type": "string",
            "example": "hair, scales",
            "x-summary": ""
          }
        },
        "description": "# preparationType\n\nThe kind of [physicalObject](/docs/0.1.0/models/physicalObject/) or [collectionItem](/docs/0.1.0/models/collectionItem/), for example \"study skin\", \"dried plant\", or \"microscope slide\".\n\n\n### Definition\n\nThe kind of [physicalObject](/docs/0.1.0/models/physicalObject/) or [collectionItem](/docs/0.1.0/models/collectionItem/).\n\n\n### Examples\n\n* Herbarium sheet (for a [physicalObject](/docs/0.1.0/models/physicalObject/))\n* A herbarium sheet with two [collectionItems](/docs/0.1.0/models/collectionItem/), a plant and an microscope slide attached to the sheet: preparationTypes are \"microscope slide\" and \"dried plant\"\n\n\n### Notes\n\nThe preparationType is defined within the context of the collection. In future we may want to tag preparation types with different properties, so that they can be understood outside the collection.",
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": "The kind of physicalUnit or collectionItem."
      },
      "selectableMethod": {
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "$ref": "#/components/schemas/translatedString",
            "x-summary": ""
          },
          "description": {
            "type": "string",
            "x-summary": ""
          },
          "methodType": {
            "type": "string",
            "x-summary": ""
          }
        },
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "selectableUnit": {
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "$ref": "#/components/schemas/translatedString",
            "x-summary": ""
          },
          "description": {
            "type": "string",
            "x-summary": ""
          },
          "unitType": {
            "type": "string",
            "x-summary": ""
          }
        },
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "selectableValue": {
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "$ref": "#/components/schemas/translatedString",
            "x-summary": ""
          },
          "description": {
            "type": "string",
            "x-summary": ""
          },
          "valueType": {
            "type": "string",
            "x-summary": ""
          }
        },
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "typeSpecimenType": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "place": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the locality",
            "x-summary": ""
          },
          "versionId": {
            "type": "string",
            "description": "Id of the specific version",
            "x-summary": ""
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp corresponding to when created",
            "x-summary": ""
          },
          "createdBy": {
            "type": "string",
            "description": "Some kind of reference to the individual that created the locality",
            "x-summary": ""
          },
          "updatedBy": {
            "type": "string",
            "description": "Some kind of reference to the individual that updated/created the specific version",
            "x-summary": ""
          },
          "updatedAt": {
            "type": "string",
            "description": "Timestamp corresponding to when updated. Could be called versionCreatedAt",
            "x-summary": ""
          },
          "description": {
            "type": "string",
            "description": "Description of the locality",
            "x-summary": ""
          },
          "group": {
            "type": "string",
            "description": "Group of locality",
            "enum": [
              "continent",
              "country",
              "district",
              "geodeticDatum",
              "locality",
              "province",
              "root",
              "rubin"
            ],
            "x-summary": ""
          },
          "centralPosition": {
            "type": "object",
            "description": "A position describing the center",
            "$ref": "#/components/schemas/position",
            "x-summary": ""
          },
          "parent": {
            "type": "object",
            "description": "Parent place",
            "$ref": "#/components/schemas/place",
            "x-summary": ""
          },
          "children": {
            "type": "object",
            "description": "Parent place",
            "$ref": "#/components/schemas/place",
            "x-summary": ""
          },
          "polygon": {
            "type": "object",
            "description": "A polygon describing the edges",
            "$ref": "#/components/schemas/polygon",
            "x-summary": ""
          },
          "verticalPosition": {
            "description": "A vertical position",
            "type": "object",
            "$ref": "#/components/schemas/verticalPosition",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "description": "# place\n\nA defined place that has a name and is reusable, for example a country or a lake.\n\n\n### Definition\n\nA defined location with known, fixed extension in space.\n\n\n### Examples\n\n* A named location for a Malaise trap within an insect inventory project.\n\n\n### Notes\n\nPlaces can have relations to other places.\n\nNew name suggestion: \"location\" (motivation: \"place\" is usually understood as something less defined, or perhaps more informal).\n\n\n### See also\n\n[locationInformation](/docs/0.1.0/models/locationInformation/)",
        "x-category": "placeService",
        "x-modelType": "model",
        "x-summary": "A defined location with known, fixed extension in space."
      },
      "searchSpecimen": {
        "additionalProperties": true,
        "properties": {},
        "x-category": "searchService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "stageSpecimen": {
        "additionalProperties": true,
        "properties": {},
        "x-category": "searchService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "acquisition": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "handedInByAgent": {
            "$ref": "#/components/schemas/agent",
            "x-summary": ""
          },
          "handedInByAgentText": {
            "type": "string",
            "x-summary": ""
          },
          "acquisitionTypeText": {
            "type": "string",
            "x-summary": ""
          },
          "date": {
            "$ref": "#/components/schemas/singleDate",
            "x-summary": ""
          }
        },
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "collectingInformation": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "establishmentMeansType": {
            "$ref": "#/components/schemas/establishmentMeansType",
            "x-summary": ""
          },
          "establishmentMeansN": {
            "type": "string",
            "x-summary": ""
          },
          "collectorsText": {
            "type": "string",
            "example": "Bergström, U",
            "description": "Name of the collector",
            "x-summary": ""
          },
          "collectedByAgent": {
            "$ref": "#/components/schemas/agent",
            "x-summary": ""
          },
          "isDeathDate": {
            "type": "boolean",
            "description": "This is a temporary parameter",
            "x-summary": ""
          },
          "event": {
            "$ref": "#/components/schemas/event",
            "x-summary": ""
          }
        },
        "description": "# collectingInformation\n\nInformation about the collecting activity, like for example the name of a collector or the collecting method.\n\n\n### Definition\n\nInformation pertaining to the activity of collecting of some material.\n\n\n### Examples\n\nThe collecting method (e.g., the kind of trap) used for collecting some material.\n\n\n### Notes\n\nThe purpose of this term is to keep information that is specific for the collecting activity, for example collectors, collecting method, field number etc. The general description of the death event, like its time and location, should be recorded under [event](/docs/0.1.0/models/event/).\n\n\n### See also\n\n[event](/docs/0.1.0/models/event/)",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "Information about a collecting activity."
      },
      "collectionItem": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "alternateIdentifiersText": {
            "type": "string",
            "example": "Skin complete, prepared",
            "x-summary": ""
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identifier"
            },
            "x-summary": ""
          },
          "collectingInformation": {
            "$ref": "#/components/schemas/collectingInformation",
            "x-summary": ""
          },
          "curatorialAssessments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/curatorialAssessment"
            },
            "x-summary": ""
          },
          "description": {
            "type": "string",
            "x-summary": ""
          },
          "preparationType": {
            "$ref": "#/components/schemas/preparationType",
            "x-summary": ""
          },
          "physicalObjectText": {
            "type": "string",
            "example": "Skin complete, prepared",
            "x-summary": ""
          },
          "physicalObject": {
            "$ref": "#/components/schemas/physicalObject",
            "x-summary": ""
          }
        },
        "description": "# collectionItem\n\nThe smallest recognized \"thing\" in the collection. This is usually a physical object but could also be a part of a physical object. For example, a moss and a lichen growing on the same piece of bark may be considered as two collection items.\n\n\n### Definition\n\nThe smallest recognized \"thing\" in the collection. This may be a physical object or part of a physical object.\n\n\n### Examples\n\n* A skin prepared from a squirrel.\n* One fish in a jar with five fishes.\n* All fishes in a jar with five fishes.\n* A moss and a lichen attached to the same piece of bark recognized as two collection items.\n\n\n### Notes\n\nThis term represents a fundamental unit in the management of the collection. The term is permissive on what to include in a collection item, just to make the model able to fit different use cases.\n\n\n### See also\n\n[physicalObject](/docs/0.1.0/models/physicalObject/)",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "The smallest recognized \"thing\" in the collection."
      },
      "curatorialAssessment": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "agent": {
            "$ref": "#/components/schemas/agent",
            "x-summary": ""
          },
          "agentText": {
            "type": "string",
            "x-summary": ""
          },
          "date": {
            "$ref": "#/components/schemas/singleDate",
            "x-summary": ""
          },
          "condition": {
            "type": "string",
            "example": "Good",
            "x-summary": ""
          },
          "conditionRemarks": {
            "type": "string",
            "example": "Small damage on left hind leg",
            "x-summary": ""
          },
          "inventoryStatusRemarks": {
            "type": "string",
            "example": "On loan",
            "x-summary": ""
          },
          "isInStorage": {
            "type": "boolean",
            "x-summary": ""
          }
        },
        "description": "### Definition\n\nAssessment whether specimen is in storage or not found.\n\n### Example(s)\n\n* 2017-01-02 Jane Doe. Not found. On loan\n* 2016-10-11 John Doe. In storage. Good condition.\n",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": ""
      },
      "deathInformation": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "causeOfDeathType": {
            "$ref": "#/components/schemas/causeOfDeathType",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "x-summary": ""
          },
          "event": {
            "$ref": "#/components/schemas/event",
            "x-summary": ""
          }
        },
        "description": "# deathInformation\n\nInformation about the death of an [individual](/docs/0.1.0/models/individual/). Typical information involves the cause of death.\n\n\n### Definition\nInformation pertaining to the death circumstances of an [individual](/docs/0.1.0/models/individual/).\n\n\n### Notes\n\nThe purpose of this term is to keep information that has to do with the death of one or more individuals, for example a cause of the death. The general description of the death event, like its time and location, should be recorded under [event](/docs/0.1.0/models/event/).\n\n\n### See also\n\n[event](/docs/0.1.0/models/event/)",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "Information about the death of an individual."
      },
      "determination": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "example": "Some remarks",
            "x-summary": ""
          },
          "determinationText": {
            "type": "string",
            "example": "Sorex minutus, by Doe, J. on 1982-01-01",
            "x-summary": ""
          },
          "determinationVerbatim": {
            "type": "string",
            "description": "In exactly the same words as were used originally",
            "x-summary": ""
          },
          "determinedByAgent": {
            "$ref": "#/components/schemas/agent",
            "x-summary": ""
          },
          "determinedByAgentText": {
            "type": "string",
            "example": "Doe, J.",
            "x-summary": ""
          },
          "date": {
            "$ref": "#/components/schemas/singleDate",
            "x-summary": ""
          },
          "taxonName": {
            "$ref": "#/components/schemas/taxonName",
            "x-summary": ""
          }
        },
        "description": "# determination\n\nA determination is a statement about an [individual's](/docs/0.1.0/models/individual/) taxon and/or type status, made by a person at a certain date. The outcome of a determination is usually a taxon name.\n\n\n### Definition\n\nThe act of making a statement about an [individual's](/docs/0.1.0/models/individual/) taxon and/or type status, which is not itself a type status designation.\n\n\n### Examples\n\n\"Phoca hispida, det. by NN, 1957\"\n\n\n### Notes\n\nA *type status designation* is understood here as an explicit or implicit designation of a new type status for a specimen with respect to a taxon name. A type status designation is a nomenclatural act made through a publication and strictly regulated by a nomenclatural code. The type status designation is the primary source of a specimen's type status and should not be recorded as a determination. This is sometimes called \"verified type status\".\n\nA *type status identification* on the other hand is a secondary source for the type status, and is typically written on a label that is attached to a specimen. For a type status identification (as opposed to type status designation) it is fine to record any type status, even ones that are not sanctioned by the nomenclatural codes (e.g. \"topotype\" or \"allotype\"). Because of the similarities between type status identifications and taxonomic identifications, both are here been treated as determinations. In fact, if a taxon name is included in the type status identification, it may also be considered as an implicit taxonomic identification.\n\nThe outcome of the determination is in most cases a *taxon name* (that may be either scientific or vernacular). What *taxon* (i.e. taxon concept) the person intended with the determination is often difficult or even impossible to know, and has little relevance for collection management. It is usually sufficient to match the taxon name from the latest determination to the taxon concepts in the local classification currently used for the collection.\n\n\n### See also\n\n[taxonInformation](/docs/0.1.0/models/taxonInformation/), [individual.typeStatus](/docs/0.1.0/models/individual/typeStatus)",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "A statement about an individual's taxon and/or type status."
      },
      "event": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "dateRange": {
            "$ref": "#/components/schemas/dateRange",
            "x-summary": ""
          },
          "expeditionText": {
            "type": "string",
            "example": "Vega Expedition",
            "x-summary": ""
          },
          "locationInformation": {
            "$ref": "#/components/schemas/locationInformation",
            "x-summary": ""
          }
        },
        "description": "# Event\n\nAn activity or occurrence at a time and location, for example the collecting of some material.\n\n\n### Definition\n\nAn activity or occurrence at a particular time and location.\n\n\n### Examples\n\nAn event involving the collecting of some material.\n\n\n### Notes\n\nIf it is uncertain whether two specimens were collected at the same event (e.g., if there are different information sources), the information should be recorded as two separate events.\n\nAn event may have both collecting- and death information.\n\n\n### See also\n\n[collectingInformation](/docs/0.1.0/models/collectingInformation/), [deathInformation](/docs/0.1.0/models/deathInformation/), [originInformation](/docs/0.1.0/models/originInformation/)",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "An activity or occurrence at a time and location."
      },
      "featureObservation": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "featureObservationAgentText": {
            "type": "string",
            "example": "Doe, J.",
            "x-summary": ""
          },
          "featureObservationAgent": {
            "$ref": "#/components/schemas/agent",
            "x-summary": ""
          },
          "date": {
            "$ref": "#/components/schemas/singleDate",
            "x-summary": ""
          },
          "featureObservationText": {
            "type": "string",
            "example": "10 years",
            "x-summary": ""
          },
          "featureObservationUnit": {
            "type": "string",
            "example": "kg",
            "x-summary": ""
          },
          "featureType": {
            "$ref": "#/components/schemas/featureType",
            "x-summary": ""
          },
          "methodText": {
            "type": "string",
            "example": "Known age",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "example": "According to catalog card",
            "x-summary": ""
          }
        },
        "description": "# featureObservation\n\nAn observation of some property, for example a measurement by a person or a machine at a particular time.\n\n\n### Definition\n\nThe data measured, collected, perceived or noticed for some property by an agent (e.g. a person or a machine).\n\n\n### Examples\n\n* When a curator measures the wingspan and the weight of a bird, this counts as two separate observations.\n* A curator observes the color of a specimen.\n\n\n### Notes\n\nThis term is currently used for features for an [individual](/docs/0.1.0/models/individual/) other than [taxonomical determinations](/docs/0.1.0/models/determination/) and is not used for [curatorialAssessments](/docs/0.1.0/models/curatorialAssessment/) that apply to [collectionItems](/docs/0.1.0/models/collectionItem/).\n\n\n### See also\n\n[featureType](/docs/0.1.0/models/featureType/), [curatorialAssessment](/docs/0.1.0/models/curatorialAssessment/), [determination](/docs/0.1.0/models/determination/)\n\n\n### Relation to other standards\n\n* DarwinCore: not assessed\n* ABCD:  not assessed",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "The data measured or noticed for some property by an agent."
      },
      "identifier": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "example": "Some remarks",
            "x-summary": ""
          },
          "identifierType": {
            "$ref": "#/components/schemas/identifierType",
            "x-summary": ""
          },
          "value": {
            "type": "string",
            "example": "584028",
            "x-summary": ""
          },
          "nameSpace": {
            "type": "string",
            "example": "mammal",
            "x-summary": ""
          },
          "validation": {
            "type": "string",
            "example": "^$|^[0-9]{6}$|^[0-9]{8}$",
            "x-summary": ""
          }
        },
        "description": "# identifier\n\nA string or number that identifies something, for example a [physicaObject](/docs/0.1.0/models/physicalObject/), an [individual](/docs/0.1.0/models/individual/) or an [event](/docs/0.1.0/models/event/). The catalog number is an example of an identifier for a specimen.\n\n\n### Definition\n\nA name that identifies (that is, labels the identity of) something.\n\n\n### Examples\n\n* The catalog number \"12345\"\n* Taxon name id \"9488-1\" (http://www.ipni.org/ipni/idPlantNameSearch.do?id=9488-1)\n* Part of a [physicaObject](/docs/0.1.0/models/physicalObject/) (i.e. a [collectionItem](/docs/0.1.0/models/collectionItem/)) labeled \"a\"\n\n\n### Notes\n\nIdentifiers are used for different purposes, for example for connecting information with an [individual](/docs/0.1.0/models/individual/) or for identifying a specimen. This term is used both for keeping record of official identifiers (like catalog numbers) and unofficial ones (like those for example found on handwritten labels attached to a specimen, or sometimes even written directly on the object).\n\n\n### See also\n\n[identifierType](/docs/0.1.0/models/identifierType/)",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "A string or number that identifies something."
      },
      "individual": {
        "additionalProperties": false,
        "description": "# individual\n\nOne or more specimens sharing a common history and individual characteristics, for example an organism, a group of organisms or a piece of mineral.\n\n\n## Definition\n\nOne or more individuals with a single set of individual characteristics.\n\n\n### Examples\n\n* A specific squirrel represented by both a skin and a tissue sample in a collection.\n* Three fishes in a jar of alcohol, coming from the same collecting event and representing the same taxon. The group of fishes may be treated as the individual.\n* A cluster of ammonite fossils in the same piece of rock.\n* A piece of mineral.\n\n\n### Notes\n\nIndividual is understood in a broad sense and should be applied within its context. Thus, it should be possible to talk about individuals in for example a mineralogical collection.\n\nThis term has two purposes:\n\n1. To keep information about the coherent unit that has a life history (or similar depending on the context) even when the unit is separated into smaller parts (as in the case where one preparation is stored separately from another).\n2. To allow individual traits (color, taxon, age, sex, etc.) to be applied to a group of specimens that are treated as one unit.\n\nYou should create new individuals when you need to capture differences. A mix of females and males can be treated as a single individual as long as you don't need to distinguish the two sexes. When you need to distinguish the sexes, you should create two individuals, one for each sex. If you need to describe additional differences (e.g. color, size etc.), you should probably create more individuals.\n\n\n### Relation to other standards\n\n* DarwinCore: [Organism](http://rs.tdwg.org/dwc/terms/Organism)\n* ABCD: not assessed\n",
        "properties": {
          "collectionItemText": {
            "type": "string",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "x-summary": ""
          },
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "acquisition": {
            "$ref": "#/components/schemas/acquisition",
            "x-summary": ""
          },
          "determinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/determination"
            },
            "x-summary": ""
          },
          "taxonInformation": {
            "$ref": "#/components/schemas/taxonInformation",
            "x-summary": ""
          },
          "deathInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/deathInformation"
            },
            "x-summary": ""
          },
          "originInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/originInformation"
            },
            "x-summary": ""
          },
          "collectingInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/collectingInformation"
            },
            "x-summary": ""
          },
          "featureObservations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureObservation"
            },
            "x-summary": ""
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identifier"
            },
            "x-summary": ""
          },
          "collectionItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/collectionItem"
            },
            "x-summary": ""
          },
          "recordHistoryEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/recordHistoryEvent"
            },
            "x-summary": ""
          },
          "readOnly": {
            "$ref": "#/components/schemas/readOnly",
            "x-summary": ""
          },
          "typeStatus": {
            "$ref": "#/components/schemas/typeSpecimenType",
            "x-summary": ""
          },
          "version": {
            "type": "integer",
            "x-summary": ""
          }
        },
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": ""
      },
      "locationInformation": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "places": {
            "description": "An array with curated localities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/place"
            },
            "x-summary": ""
          },
          "position": {
            "type": "object",
            "$ref": "#/components/schemas/position",
            "x-summary": ""
          },
          "polygon": {
            "type": "object",
            "$ref": "#/components/schemas/polygon",
            "x-summary": ""
          },
          "verticalPosition": {
            "type": "object",
            "$ref": "#/components/schemas/verticalPosition",
            "x-summary": ""
          },
          "coordinatesVerbatim": {
            "type": "string",
            "description": "Verbatim coordinates (or corresponding information, e.g. map number) from the original source",
            "x-summary": ""
          },
          "georeferenceSourcesText": {
            "type": "string",
            "description": "Describe how you got the georeferenced coordinates (data source(s), tools, maps ...)",
            "x-summary": ""
          },
          "localityN": {
            "type": "string",
            "description": "TBA",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "description": "Notes on the locality",
            "x-summary": ""
          },
          "localityT": {
            "type": "string",
            "description": "Verbatim locality names and description, as in the original source, typos and all.",
            "x-summary": ""
          },
          "readOnly": {
            "$ref": "#/components/schemas/readOnly",
            "x-summary": ""
          }
        },
        "description": "# locationInformation\n\nInformation about the place of an event.\n\n\n### Definition\n\nInformation pertaining to a specific location.\n\n\n### Examples\n\nInformation about the collecting locality for a specimen, for example a transcribed text like \"Frescati, Stockholm, Uppland, Sweden\".\n\n\n### Notes\n\nThis term is for keeping general information about a location, for example geographic coordinates or verbatim information about the location.\n\nMore specifically, the purpose of the term is:\n\n1. to keep information about a location that is specific for an event (e.g., transcribed information about the location),\n2. to keep information regarding the uncertainty about a location,\n3. to describe how a location relates to some other place (\"3 km NW of\"), and\n4. to document the source for some information (so that interpretations can be traced).",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "Information about the place of an event."
      },
      "originInformation": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "originLocality": {
            "type": "string",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "x-summary": ""
          },
          "isAffectedByManagement": {
            "type": "boolean",
            "x-summary": ""
          },
          "isResultOfSelectiveBreeding": {
            "type": "boolean",
            "x-summary": ""
          },
          "event": {
            "$ref": "#/components/schemas/event",
            "x-summary": ""
          }
        },
        "description": "# originInformation\n\nInformation about the physical or genetic origin of an [individual](/docs/0.1.0/models/individual/). This could for example be information on where an individual previously lived. The information may be associated with an [event](/docs/0.1.0/models/event/).\n\n\n### Defintion\nInformation pertaining to the origin of an [individual](/docs/0.1.0/models/individual/).\n\n\n### Example\n\nAn [individual](/docs/0.1.0/models/individual/) may have more than one [event](/docs/0.1.0/models/event/) connected with origin information. For example: a lion first lived in Africa (origin event 1), then was placed in a Zoo in Europe (origin event 2), and finally escaped into the wild (origin event 3) where it was later killed and collected (death and collecting event).\n\n\n### Notes\n\nThe purpose of this term is to keep information that has to do with the origin of [individuals](/docs/0.1.0/models/individual/). This could involve both the genetic and the physical origin. This term concerns the origin of individuals, not the provenance of specimens. The general description of the death event, like its time and location, should be recorded under [event](/docs/0.1.0/models/event/).\n\n\n### See also\n\n[event](/docs/0.1.0/models/event/)",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "Information about the origin of an individual."
      },
      "recordHistoryEvent": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "agent": {
            "$ref": "#/components/schemas/agent",
            "x-summary": ""
          },
          "agentText": {
            "type": "string",
            "x-summary": ""
          },
          "date": {
            "$ref": "#/components/schemas/singleDate",
            "x-summary": ""
          },
          "description": {
            "type": "string",
            "x-summary": ""
          },
          "system": {
            "type": "string",
            "x-summary": ""
          }
        },
        "description": "### Definition\n\nInformation about the history of the record.\n\n### Note(s)\n\nThis can for example involve creation of a catalog card, creation of a record in MAM2006 or edit of the record.\n",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": ""
      },
      "specimen": {
        "additionalProperties": false,
        "description": "This is a description",
        "x-format": true,
        "x-normalize": true,
        "properties": {
          "individual": {
            "$ref": "#/components/schemas/individual",
            "x-summary": ""
          },
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "normalized": {
            "type": "object",
            "properties": {
              "individuals": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/individual"
                },
                "x-column": "individuals"
              },
              "collectionItems": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/collectionItem"
                },
                "x-column": "collectionItems"
              },
              "id": {
                "type": "string"
              },
              "deathInformation": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/deathInformation"
                },
                "x-column": "deathInformation"
              },
              "collectingInformation": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/collectingInformation"
                },
                "x-column": "collectingInformation"
              },
              "determinations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/determination"
                },
                "x-column": "determinations"
              },
              "identifiers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/identifier"
                },
                "x-column": "identifiers"
              },
              "taxonInformation": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/taxonInformation"
                },
                "x-column": "taxonInformation"
              },
              "featureObservations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/featureObservation"
                },
                "x-column": "featureObservations"
              },
              "originInformation": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/originInformation"
                },
                "x-column": "originInformation"
              },
              "events": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/event"
                },
                "x-column": "events"
              },
              "recordHistoryEvents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/recordHistoryEvent"
                },
                "x-column": "recordHistoryEvents"
              }
            },
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          },
          "publishRecord": {
            "type": "boolean",
            "x-summary": ""
          },
          "version": {
            "type": "integer",
            "x-summary": ""
          },
          "readOnly": {
            "$ref": "#/components/schemas/readOnly",
            "x-summary": ""
          }
        },
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": ""
      },
      "taxonInformation": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "curatorialTaxonNameText": {
            "type": "string",
            "x-summary": ""
          },
          "curatorialTaxonName": {
            "$ref": "#/components/schemas/taxonName",
            "x-summary": ""
          },
          "taxonRemarks": {
            "type": "string",
            "x-summary": ""
          },
          "readOnly": {
            "$ref": "#/components/schemas/readOnly",
            "x-summary": ""
          }
        },
        "description": "# taxonInformation\n\nInformation about an [individual's](/docs/0.1.0/models/individual/) taxon, for example its accepted name according to the local classification. This term can also hold other taxon names which are not part of a [determination](/docs/0.1.0/models/determination/).\n\n\n### Definition\n\nInformation about the taxon to which an [individual](/docs/0.1.0/models/individual/) is currently assigned according to the local classification, or other names that has been associated with the individual that do not qualify as [determinations](/docs/0.1.0/models/determination/).\n\n\n### Examples\n\n\"Pusa hispida\" is the accepted name for a taxon in the local classification, and “Phoca hispida” one of its synonyms. Consequently, \"Pusa hispida\" should be the locally accepted name (curatorial name) for a specimen that has been determined as \"Phoca hispida\".\n\n\n### Notes\n\nThe purpose of this concept is:\n\n1. to keep information of the currently accepted name for an individual, and\n2. to accommodate taxon-related legacy data that do not fit into taxon in the taxonomy API or into determination.\n\nThe data model is flexible, and it is possible to treat a locally accepted name for a specimen as a determination. One might then ask if there are cases when this should not be done? In principle, you should not use determination *if you cannot assume that the taxon name properly represents an original determination, and if it is impossible to assess whether that is the case*.\n\nImagine for example that the text on a determination label reads \"not taxon x\", while the name \"taxon x\" has been recorded as the name for the specimen in the database (this could happen with legacy data for collections where taxonomy is tightly connected to storage and it is important to just record some name). Without other information, it would be impossible to know that \"taxon x\" was derived from the text \"not taxon x\". Since you cannot be sure of where the information comes from, there would be no way to correct the erroneous determination record.\n\nAnother case is when a name at a different rank, let say a family, has been recorded from a determination to a subfamily written on the label, without saying anything about how the transformation was done. There can also be undocumented taxonomic interpretations at the same level, like when an original determination to \"Phoca hispida\" is recorded as just \"Pusa hispida\".\n\n\n### See also\n\n[determination](/docs/0.1.0/models/determination/), [taxon](/docs/0.1.0/models/taxon/)",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "Information about the taxon to which an individual is assigned."
      },
      "physicalObject": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "type": "string",
            "x-summary": ""
          },
          "collectionItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/collectionItem"
            },
            "x-summary": ""
          },
          "storageLocation": {
            "$ref": "#/components/schemas/storageLocation",
            "x-summary": ""
          },
          "storageLocationText": {
            "type": "string",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "description": "# physicalObject\n\nThe smallest recognized physical \"thing\" in the collection. Typical examples are a skin preparation and a herbarium sheet. A physical object represents one or more [collectionItems](/docs/0.1.0/models/collectionItem/).\n\n\n### Definition\n\nThe smallest recognized physical \"thing\" in the collection.\n\n\n### Examples\n\n* A herbarium sheet with three plants mounted on it (possibly three collection items)\n* A mounted skin of a squirrel (one [collectionItem](/docs/0.1.0/models/collectionItem/))\n* A jar with two fishes (possibly two [collectionItems](/docs/0.1.0/models/collectionItem/))\n* A tree branch with two birds mounted on it (possibly two [collectionItems](/docs/0.1.0/models/collectionItem/))\n\n\n### Notes\n\nThe physical object is the physical thing that you do something with when you manage your collection. This could for example be the thing stored on the shelf, sent on loan or received from a donator. Physical objects change over time. Imagine for example a jar of 5 fishes first treated as one physical object \"A\". In response to a loan request, a new physical object \"B\" is created with one of the fishes and sent to the borrower. When the loan is returned, the fish is put back into the original container (\"A\"), thereby ending the existence of object \"B\".\n\n\n### See also\n\n[collectionItem](/docs/0.1.0/models/collectionItem/)",
        "x-category": "storageService",
        "x-modelType": "model",
        "x-summary": "The smallest recognized physical \"thing\" in the collection."
      },
      "storageLocation": {
        "additionalProperties": false,
        "properties": {
          "acceptedTaxonNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/taxonName"
            },
            "x-summary": ""
          },
          "preparationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/preparationType"
            },
            "x-summary": ""
          },
          "versionId": {
            "type": "string",
            "x-summary": ""
          },
          "group": {
            "type": "string",
            "x-summary": ""
          },
          "description": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "type": "string",
            "x-summary": ""
          },
          "parentId": {
            "type": "string",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "description": "# storageLocation\n\nA space for storing [physicalObjects](/docs/0.1.0/models/physicalObject/) in a collection.\n\n\n### Definition\n\nA dedicated space, at any level in a hierarchy, for storing one or more [physicalObjects](/docs/0.1.0/models/physicalObject/) in a collection.\n\n\n### Examples\n\n* \"room 123\"\n* \"Swedish Coleoptera\"\n* \"the bone room\"\n\n\n### Notes\n\nA storage location is usually a fixed space (like a room, shelf or cabinet) but could also be a \"floating location\". This latter kind is especially common when objects are sorted by taxonomy. Instead of having a fixed physical position are floating storage locations placed in relation to other storage locations nearby. For example, the objects representing the genus *Phoca* may be placed after those of *Pagophilus*, but before those of *Pusa*. Storage locations may be arranged in a hierarchy, irrespective of whether they have fixed positions or not.\n\n\n### See also\n\n[physicalObject](/docs/0.1.0/models/physicalObject/)",
        "x-category": "storageService",
        "x-modelType": "model",
        "x-summary": "A dedicated space for storing physical objects."
      },
      "taxon": {
        "additionalProperties": false,
        "properties": {
          "acceptedTaxonName": {
            "type": "object",
            "$ref": "#/components/schemas/taxonName",
            "x-summary": ""
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/taxon"
            },
            "x-summary": ""
          },
          "parent": {
            "type": "object",
            "$ref": "#/components/schemas/taxon",
            "x-summary": ""
          },
          "synonyms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/taxonName"
            },
            "x-summary": ""
          },
          "vernacularNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/taxonName"
            },
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "description": "# taxon\n\nA taxonomic group of any rank, such as a species or family, or class used to keep information about a locally used taxon concept.\n\n\n### Definition\n\nA taxonomic group of any rank, such as a species, family, or class.\n\n\n### Examples\n\nThe species that includes the type specimen for the name \"Pusa hispida\", which may also be referred to by the synonym \"Phoca hispida\".\n\n\n### Notes\n\nThe purpose of this term is to keep information about locally used taxon concepts. These concepts do not have to be used elsewhere. The local classification is the combination of all the names and their relations. In the local classification, each taxon has an accepted taxon name at same rank as the taxon (more precisely, the taxon gets its rank from the accepted name). The accepted name may have synonyms at any rank.\n\n\n### See also\n\n[determination](/docs/0.1.0/models/determination/), [taxonInformation](/docs/0.1.0/models/taxonInformation/)",
        "x-category": "taxonomyService",
        "x-modelType": "model",
        "x-summary": "A taxonomic group of any rank, such as a species or family."
      },
      "taxonName": {
        "additionalProperties": false,
        "properties": {
          "versionId": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "type": "string",
            "x-summary": ""
          },
          "taxonNameType": {
            "type": "string",
            "enum": [
              "scientific",
              "vernacular"
            ],
            "x-summary": ""
          },
          "rank": {
            "type": "string",
            "description": "Taxon rank",
            "x-summary": ""
          },
          "rubinNumber": {
            "type": "string",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "x-category": "taxonomyService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "BaseError": {
        "properties": {
          "description": {
            "description": "Description of the returned code",
            "type": "string"
          },
          "detail": {
            "description": "A human-readable explanation specific to this occurrence of the problem.",
            "type": "string"
          },
          "id": {
            "description": "A unique identifier for this particular occurrence of the problem.",
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "parameterErrors": {
            "type": "string"
          },
          "title": {
            "description": "A short, human-readable summary of the problem. Associated with the code",
            "type": "string"
          }
        },
        "required": [
          "status",
          "code"
        ],
        "title": "Base error",
        "type": "object"
      },
      "REQUEST_BODY_VALIDATION_ERROR": {
        "description": "Input body does not pass validations",
        "example": "REQUEST_BODY_VALIDATION_ERROR",
        "title": "REQUEST_BODY_VALIDATION_ERROR",
        "type": "string"
      },
      "REQUEST_ERROR": {
        "description": "Something is wrong with the request. See details",
        "example": "REQUEST_ERROR",
        "title": "REQUEST_ERROR",
        "type": "string"
      },
      "agentCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "RESPONSE_VALIDATION_ERROR": {
        "description": "Output does not pass validations",
        "example": "RESPONSE_VALIDATION_ERROR",
        "title": "RESPONSE_VALIDATION_ERROR",
        "type": "string"
      },
      "INTERNAL_SERVER_ERROR": {
        "description": "Error occurred on server",
        "example": "INTERNAL_SERVER_ERROR",
        "title": "INTERNAL_SERVER_ERROR",
        "type": "string"
      },
      "agentCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "agentGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "RESOURCE_NOT_FOUND_ERROR": {
        "description": "Requested resource not found. See details",
        "example": "RESOURCE_NOT_FOUND_ERROR",
        "title": "RESOURCE_NOT_FOUND_ERROR",
        "type": "string"
      },
      "agentGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "agentGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "agentGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "agentGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "agentUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "agentUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "agentUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "agentDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "FORBIDDEN_ERROR": {
        "description": "See details",
        "example": "FORBIDDEN_ERROR",
        "title": "FORBIDDEN_ERROR",
        "type": "string"
      },
      "agentDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "agentDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "agentDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "userGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "userGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "userGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "userGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "userGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "causeOfDeathTypeCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "causeOfDeathTypeCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "causeOfDeathTypeGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "causeOfDeathTypeGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "causeOfDeathTypeGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "causeOfDeathTypeGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "causeOfDeathTypeGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "causeOfDeathTypeUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "causeOfDeathTypeUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "causeOfDeathTypeUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "causeOfDeathTypeDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "causeOfDeathTypeDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "causeOfDeathTypeDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "causeOfDeathTypeDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "establishmentMeansTypeCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "establishmentMeansTypeCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "establishmentMeansTypeGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "establishmentMeansTypeGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "establishmentMeansTypeGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "establishmentMeansTypeGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "establishmentMeansTypeGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "establishmentMeansTypeUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "establishmentMeansTypeUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "establishmentMeansTypeUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "establishmentMeansTypeDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "establishmentMeansTypeDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "establishmentMeansTypeDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "establishmentMeansTypeDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "featureTypeCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "featureTypeCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "featureTypeGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "featureTypeGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "featureTypeGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "featureTypeGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "featureTypeGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "featureTypeUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "featureTypeUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "featureTypeUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "featureTypeDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "featureTypeDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "featureTypeDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "featureTypeDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "identifierTypeCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "identifierTypeCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "identifierTypeGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "identifierTypeGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "identifierTypeGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "identifierTypeGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "identifierTypeGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "identifierTypeUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "identifierTypeUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "identifierTypeUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "identifierTypeDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "identifierTypeDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "identifierTypeDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "identifierTypeDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "preparationTypeCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "preparationTypeCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "preparationTypeGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "preparationTypeGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "preparationTypeGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "preparationTypeGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "preparationTypeGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "preparationTypeUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "preparationTypeUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "preparationTypeUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "preparationTypeDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "preparationTypeDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "preparationTypeDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "preparationTypeDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "typeSpecimenTypeCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "typeSpecimenTypeCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "typeSpecimenTypeGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "typeSpecimenTypeGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "typeSpecimenTypeGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "typeSpecimenTypeGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "typeSpecimenTypeGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "typeSpecimenTypeUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "typeSpecimenTypeUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "typeSpecimenTypeUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "typeSpecimenTypeDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "typeSpecimenTypeDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "typeSpecimenTypeDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "typeSpecimenTypeDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "placeGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "placeUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "placeDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "placeDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeUpdateRelationHasOneParent-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeUpdateRelationHasOneParent-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "placeUpdateRelationHasOneParent-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "searchSpecimenGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "searchSpecimenGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "searchSpecimenGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "searchSpecimenGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "searchSpecimenGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "specimenDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenUpdateRelationHasManyPhysicalObjects-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenUpdateRelationHasManyPhysicalObjects-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenUpdateRelationHasManyPhysicalObjects-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetRelationHasManyPhysicalObjects-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetRelationHasManyPhysicalObjects-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenGetRelationHasManyPhysicalObjects-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenUpdateRelationHasManyFeatureTypes-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenUpdateRelationHasManyFeatureTypes-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenUpdateRelationHasManyFeatureTypes-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetRelationHasManyFeatureTypes-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetRelationHasManyFeatureTypes-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenGetRelationHasManyFeatureTypes-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenUpdateRelationHasManyPlaces-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenUpdateRelationHasManyPlaces-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenUpdateRelationHasManyPlaces-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetRelationHasManyPlaces-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetRelationHasManyPlaces-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenGetRelationHasManyPlaces-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetRelationHasManyTaxonNames-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetRelationHasManyTaxonNames-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenGetRelationHasManyTaxonNames-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "physicalObjectCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "physicalObjectCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "physicalObjectGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "physicalObjectGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "physicalObjectGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "physicalObjectGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "physicalObjectGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "physicalObjectUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "physicalObjectUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "physicalObjectUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "physicalObjectDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "physicalObjectDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "physicalObjectDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "physicalObjectDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "physicalObjectGetRelationHasManySpecimens-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "physicalObjectGetRelationHasManySpecimens-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "physicalObjectGetRelationHasManySpecimens-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "physicalObjectUpdateRelationHasManySpecimens-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "physicalObjectUpdateRelationHasManySpecimens-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "physicalObjectUpdateRelationHasManySpecimens-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "physicalObjectUpdateRelationBelongsToOneStorageLocation-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "physicalObjectUpdateRelationBelongsToOneStorageLocation-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "physicalObjectUpdateRelationBelongsToOneStorageLocation-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "physicalObjectGetRelationBelongsToOneStorageLocation-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "physicalObjectGetRelationBelongsToOneStorageLocation-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "physicalObjectGetRelationBelongsToOneStorageLocation-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "storageLocationGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "storageLocationUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "storageLocationDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "storageLocationDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationUpdateRelationHasOneParent-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationUpdateRelationHasOneParent-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "storageLocationUpdateRelationHasOneParent-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationGetRelationHasManyPhysicalObjects-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationGetRelationHasManyPhysicalObjects-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "storageLocationGetRelationHasManyPhysicalObjects-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationUpdateRelationHasManyPhysicalObjects-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationUpdateRelationHasManyPhysicalObjects-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "storageLocationUpdateRelationHasManyPhysicalObjects-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "taxonDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonUpdateRelationHasOneParent-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonUpdateRelationHasOneParent-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonUpdateRelationHasOneParent-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonUpdateRelationHasOneAcceptedTaxonName-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonUpdateRelationHasOneAcceptedTaxonName-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonUpdateRelationHasOneAcceptedTaxonName-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonUpdateRelationHasManySynonyms-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonUpdateRelationHasManySynonyms-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonUpdateRelationHasManySynonyms-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonGetRelationHasManySynonyms-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonGetRelationHasManySynonyms-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonGetRelationHasManySynonyms-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonUpdateRelationHasManyVernacularNames-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonUpdateRelationHasManyVernacularNames-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonUpdateRelationHasManyVernacularNames-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonGetRelationHasManyVernacularNames-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonGetRelationHasManyVernacularNames-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonGetRelationHasManyVernacularNames-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonNameGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonNameUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "taxonNameDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonNameDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameUpdateRelationBelongsToOneAcceptedToTaxon-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameUpdateRelationBelongsToOneAcceptedToTaxon-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonNameUpdateRelationBelongsToOneAcceptedToTaxon-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameUpdateRelationBelongsToOneSynonymToTaxon-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameUpdateRelationBelongsToOneSynonymToTaxon-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonNameUpdateRelationBelongsToOneSynonymToTaxon-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameUpdateRelationBelongsToOneVernacularToTaxon-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameUpdateRelationBelongsToOneVernacularToTaxon-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonNameUpdateRelationBelongsToOneVernacularToTaxon-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "agentCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "agent",
                    "enum": [
                      "agent"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/agent"
                  },
                  "relationships": {
                    "properties": {
                      "user": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "user"
                                    ],
                                    "example": "user",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "agent",
              "attributes": {
                "givenName": "Carl",
                "familyName": "Linnaeus",
                "abbreviation": "CL",
                "email": "carl@linnaeus.com",
                "agentType": "person"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "agent",
            "attributes": {
              "givenName": "Carl",
              "familyName": "Linnaeus",
              "abbreviation": "CL",
              "email": "carl@linnaeus.com",
              "agentType": "person"
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "agentUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "agent",
                    "enum": [
                      "agent"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/agent"
                  },
                  "relationships": {
                    "properties": {
                      "user": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "user"
                                    ],
                                    "example": "user",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "loginUserRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "client_id": {
            "type": "string",
            "example": "dina-reset",
            "x-summary": ""
          },
          "grant_type": {
            "type": "string",
            "example": "password",
            "x-summary": ""
          },
          "password": {
            "type": "string",
            "example": "xxxxx",
            "x-summary": ""
          },
          "username": {
            "type": "string",
            "example": "john doe",
            "x-summary": ""
          }
        },
        "required": [
          "client_id",
          "grant_type",
          "password",
          "username"
        ],
        "x-summary": "",
        "description": ""
      },
      "causeOfDeathTypeCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "causeOfDeathType",
                    "enum": [
                      "causeOfDeathType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/causeOfDeathType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "id": "1234",
              "type": "causeOfDeathType",
              "attributes": {
                "key": "put-to-death",
                "name": {
                  "en": "put to death",
                  "sv": "avlivad"
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "id": "1234",
            "type": "causeOfDeathType",
            "attributes": {
              "key": "put-to-death",
              "name": {
                "en": "put to death",
                "sv": "avlivad"
              }
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "causeOfDeathTypeUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "causeOfDeathType",
                    "enum": [
                      "causeOfDeathType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/causeOfDeathType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "establishmentMeansTypeCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "establishmentMeansType",
                    "enum": [
                      "establishmentMeansType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/establishmentMeansType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "id": "1234",
              "type": "establishmentMeansType",
              "attributes": {
                "key": "spontaneous-native-or-introduced",
                "name": {
                  "en": "spontaneous: native or introduced"
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "id": "1234",
            "type": "establishmentMeansType",
            "attributes": {
              "key": "spontaneous-native-or-introduced",
              "name": {
                "en": "spontaneous: native or introduced"
              }
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "establishmentMeansTypeUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "establishmentMeansType",
                    "enum": [
                      "establishmentMeansType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/establishmentMeansType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "featureTypeCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "featureType",
                    "enum": [
                      "featureType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/featureType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "id": "1234",
              "type": "featureType",
              "attributes": {
                "name": {
                  "en": "bone",
                  "sv": "ben"
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "id": "1234",
            "type": "featureType",
            "attributes": {
              "name": {
                "en": "bone",
                "sv": "ben"
              }
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "featureTypeUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "featureType",
                    "enum": [
                      "featureType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/featureType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "identifierTypeCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "identifierType",
                    "enum": [
                      "identifierType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/identifierType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "identifierType",
              "attributes": {
                "name": "catalogNumber"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "identifierType",
            "attributes": {
              "name": "catalogNumber"
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "identifierTypeUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "identifierType",
                    "enum": [
                      "identifierType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/identifierType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "preparationTypeCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "preparationType",
                    "enum": [
                      "preparationType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/preparationType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "preparationType",
              "attributes": {
                "category": "skin",
                "name": "preparation name"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "preparationType",
            "attributes": {
              "category": "skin",
              "name": "preparation name"
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "preparationTypeUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "preparationType",
                    "enum": [
                      "preparationType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/preparationType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "typeSpecimenTypeCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "typeSpecimenType",
                    "enum": [
                      "typeSpecimenType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/typeSpecimenType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "typeSpecimenType",
              "attributes": {
                "name": "lectotype"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "typeSpecimenType",
            "attributes": {
              "name": "lectotype"
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "typeSpecimenTypeUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "typeSpecimenType",
                    "enum": [
                      "typeSpecimenType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/typeSpecimenType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "placeCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "place",
                    "enum": [
                      "place"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/place"
                  },
                  "relationships": {
                    "properties": {
                      "parent": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "place"
                                    ],
                                    "example": "place",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "place",
              "attributes": {
                "name": "string",
                "id": "string",
                "createdAt": "string",
                "createdBy": "string",
                "updatedBy": "string",
                "updatedAt": "string",
                "description": "string",
                "centralPosition": {
                  "latitude": "string",
                  "longitude": "string",
                  "geodeticDatum": "string",
                  "uncertaintyInMeters": 0
                },
                "verticalPosition": {
                  "maximumDepthInMeters": 0,
                  "maximumElevationInMeters": 0,
                  "minimumDepthInMeters": 0,
                  "minimumElevationInMeters": 0
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "place",
            "attributes": {
              "name": "string",
              "id": "string",
              "createdAt": "string",
              "createdBy": "string",
              "updatedBy": "string",
              "updatedAt": "string",
              "description": "string",
              "centralPosition": {
                "latitude": "string",
                "longitude": "string",
                "geodeticDatum": "string",
                "uncertaintyInMeters": 0
              },
              "verticalPosition": {
                "maximumDepthInMeters": 0,
                "maximumElevationInMeters": 0,
                "minimumDepthInMeters": 0,
                "minimumElevationInMeters": 0
              }
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "placeUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "place",
                    "enum": [
                      "place"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/place"
                  },
                  "relationships": {
                    "properties": {
                      "parent": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "place"
                                    ],
                                    "example": "place",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "placeUpdateRelationHasOneParentRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "place",
                    "enum": [
                      "place"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "specimen",
                    "enum": [
                      "specimen"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/specimen"
                  },
                  "relationships": {
                    "properties": {
                      "agents": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "agent"
                                  ],
                                  "example": "agent",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "featureTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "featureType"
                                  ],
                                  "example": "featureType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "physicalObjects": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "physicalObject"
                                  ],
                                  "example": "physicalObject",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "places": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "taxonNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "specimen",
              "relationships": {
                "places": {
                  "data": [
                    {
                      "id": "1",
                      "type": "place"
                    },
                    {
                      "id": "2",
                      "type": "place"
                    },
                    {
                      "id": "3",
                      "type": "place"
                    },
                    {
                      "id": "4",
                      "type": "place"
                    },
                    {
                      "id": "5",
                      "type": "place"
                    }
                  ]
                },
                "featureTypes": {
                  "data": [
                    {
                      "id": "2",
                      "type": "featureType"
                    }
                  ]
                },
                "physicalObjects": {
                  "data": [
                    {
                      "id": "2234",
                      "type": "physicalObject"
                    }
                  ]
                }
              },
              "attributes": {
                "publishRecord": true,
                "individual": "836625c3-a049-4323-8b52-4bc425f5be04",
                "normalized": {
                  "determinations": [
                    {
                      "determinationVerbatim": "determinationVerbatim",
                      "determinedByAgentText": "determinedByAgentText",
                      "remarks": "remarks",
                      "taxonName": {
                        "id": "2367",
                        "type": "taxonName"
                      },
                      "lid": "a70d054c-ec04-45bc-860b-d522f8f48328"
                    }
                  ],
                  "collectionItems": [
                    {
                      "alternateIdentifiersText": "alternateIdentifiersText",
                      "physicalObject": {
                        "id": "2234",
                        "type": "physicalObject"
                      },
                      "physicalObjectText": "physicalObjectText",
                      "lid": "af80e78b-c61e-485f-80a8-06d237400583"
                    }
                  ],
                  "events": [
                    {
                      "dateRange": {
                        "endDate": {
                          "dateText": "endDate"
                        }
                      },
                      "expeditionText": "expeditionText",
                      "locationInformation": {
                        "coordinatesVerbatim": "coordinatesVerbatim",
                        "places": [
                          {
                            "id": "1",
                            "type": "place"
                          },
                          {
                            "id": "2",
                            "type": "place"
                          },
                          {
                            "id": "3",
                            "type": "place"
                          },
                          {
                            "id": "4",
                            "type": "place"
                          },
                          {
                            "id": "5",
                            "type": "place"
                          }
                        ],
                        "georeferenceSourcesText": "georeferenceSourcesText",
                        "localityT": "localityT",
                        "position": {
                          "geodeticDatum": "geodeticDatum text",
                          "latitude": "latitude-string",
                          "longitude": "longitude-string",
                          "uncertaintyInMeters": 10
                        },
                        "remarks": "remarks",
                        "verticalPosition": {
                          "maximumDepthInMeters": 100,
                          "maximumElevationInMeters": 100,
                          "minimumDepthInMeters": 20,
                          "minimumElevationInMeters": 20
                        }
                      },
                      "lid": "4489ba7a-00aa-4a88-b257-cfadf92e1ac5"
                    }
                  ],
                  "featureObservations": [
                    {
                      "featureObservationAgent": "featureObservationAgent",
                      "featureObservationText": "21",
                      "featureType": {
                        "id": "1",
                        "type": "featureType"
                      },
                      "methodText": "methodText",
                      "lid": "eed22ecc-7927-4b32-ae36-8e4e1dd465a8"
                    }
                  ],
                  "identifiers": [
                    {
                      "identifierType": {
                        "id": "1",
                        "type": "identifierType"
                      },
                      "lid": "9fc8671a-c801-4e62-b0b4-9a946be2ba09",
                      "nameSpace": "",
                      "remarks": "",
                      "value": "123456"
                    }
                  ],
                  "collectingInformation": [
                    {
                      "collectorsText": "collectorsText",
                      "event": "4489ba7a-00aa-4a88-b257-cfadf92e1ac5",
                      "lid": "44ab19bf-4328-42d3-9f8e-c88854847234"
                    }
                  ],
                  "individuals": [
                    {
                      "determinations": [
                        "a70d054c-ec04-45bc-860b-d522f8f48328"
                      ],
                      "taxonInformation": "c54e5ba9-4b51-4601-849d-5f2f05312ba4",
                      "featureObservations": [
                        "eed22ecc-7927-4b32-ae36-8e4e1dd465a8"
                      ],
                      "collectionItems": [
                        "af80e78b-c61e-485f-80a8-06d237400583"
                      ],
                      "identifiers": [
                        "9fc8671a-c801-4e62-b0b4-9a946be2ba09"
                      ],
                      "collectingInformation": [
                        "44ab19bf-4328-42d3-9f8e-c88854847234"
                      ],
                      "recordHistoryEvents": [
                        "c54e5ba9-4b51-4601-8b52-4bc425f5be04"
                      ],
                      "lid": "836625c3-a049-4323-8b52-4bc425f5be04"
                    }
                  ],
                  "recordHistoryEvents": [
                    {
                      "lid": "c54e5ba9-4b51-4601-8b52-4bc425f5be04"
                    }
                  ],
                  "taxonInformation": [
                    {
                      "lid": "c54e5ba9-4b51-4601-849d-5f2f05312ba4"
                    }
                  ]
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "specimen",
            "relationships": {
              "places": {
                "data": [
                  {
                    "id": "1",
                    "type": "place"
                  },
                  {
                    "id": "2",
                    "type": "place"
                  },
                  {
                    "id": "3",
                    "type": "place"
                  },
                  {
                    "id": "4",
                    "type": "place"
                  },
                  {
                    "id": "5",
                    "type": "place"
                  }
                ]
              },
              "featureTypes": {
                "data": [
                  {
                    "id": "2",
                    "type": "featureType"
                  }
                ]
              },
              "physicalObjects": {
                "data": [
                  {
                    "id": "2234",
                    "type": "physicalObject"
                  }
                ]
              }
            },
            "attributes": {
              "publishRecord": true,
              "individual": "836625c3-a049-4323-8b52-4bc425f5be04",
              "normalized": {
                "determinations": [
                  {
                    "determinationVerbatim": "determinationVerbatim",
                    "determinedByAgentText": "determinedByAgentText",
                    "remarks": "remarks",
                    "taxonName": {
                      "id": "2367",
                      "type": "taxonName"
                    },
                    "lid": "a70d054c-ec04-45bc-860b-d522f8f48328"
                  }
                ],
                "collectionItems": [
                  {
                    "alternateIdentifiersText": "alternateIdentifiersText",
                    "physicalObject": {
                      "id": "2234",
                      "type": "physicalObject"
                    },
                    "physicalObjectText": "physicalObjectText",
                    "lid": "af80e78b-c61e-485f-80a8-06d237400583"
                  }
                ],
                "events": [
                  {
                    "dateRange": {
                      "endDate": {
                        "dateText": "endDate"
                      }
                    },
                    "expeditionText": "expeditionText",
                    "locationInformation": {
                      "coordinatesVerbatim": "coordinatesVerbatim",
                      "places": [
                        {
                          "id": "1",
                          "type": "place"
                        },
                        {
                          "id": "2",
                          "type": "place"
                        },
                        {
                          "id": "3",
                          "type": "place"
                        },
                        {
                          "id": "4",
                          "type": "place"
                        },
                        {
                          "id": "5",
                          "type": "place"
                        }
                      ],
                      "georeferenceSourcesText": "georeferenceSourcesText",
                      "localityT": "localityT",
                      "position": {
                        "geodeticDatum": "geodeticDatum text",
                        "latitude": "latitude-string",
                        "longitude": "longitude-string",
                        "uncertaintyInMeters": 10
                      },
                      "remarks": "remarks",
                      "verticalPosition": {
                        "maximumDepthInMeters": 100,
                        "maximumElevationInMeters": 100,
                        "minimumDepthInMeters": 20,
                        "minimumElevationInMeters": 20
                      }
                    },
                    "lid": "4489ba7a-00aa-4a88-b257-cfadf92e1ac5"
                  }
                ],
                "featureObservations": [
                  {
                    "featureObservationAgent": "featureObservationAgent",
                    "featureObservationText": "21",
                    "featureType": {
                      "id": "1",
                      "type": "featureType"
                    },
                    "methodText": "methodText",
                    "lid": "eed22ecc-7927-4b32-ae36-8e4e1dd465a8"
                  }
                ],
                "identifiers": [
                  {
                    "identifierType": {
                      "id": "1",
                      "type": "identifierType"
                    },
                    "lid": "9fc8671a-c801-4e62-b0b4-9a946be2ba09",
                    "nameSpace": "",
                    "remarks": "",
                    "value": "123456"
                  }
                ],
                "collectingInformation": [
                  {
                    "collectorsText": "collectorsText",
                    "event": "4489ba7a-00aa-4a88-b257-cfadf92e1ac5",
                    "lid": "44ab19bf-4328-42d3-9f8e-c88854847234"
                  }
                ],
                "individuals": [
                  {
                    "determinations": [
                      "a70d054c-ec04-45bc-860b-d522f8f48328"
                    ],
                    "taxonInformation": "c54e5ba9-4b51-4601-849d-5f2f05312ba4",
                    "featureObservations": [
                      "eed22ecc-7927-4b32-ae36-8e4e1dd465a8"
                    ],
                    "collectionItems": [
                      "af80e78b-c61e-485f-80a8-06d237400583"
                    ],
                    "identifiers": [
                      "9fc8671a-c801-4e62-b0b4-9a946be2ba09"
                    ],
                    "collectingInformation": [
                      "44ab19bf-4328-42d3-9f8e-c88854847234"
                    ],
                    "recordHistoryEvents": [
                      "c54e5ba9-4b51-4601-8b52-4bc425f5be04"
                    ],
                    "lid": "836625c3-a049-4323-8b52-4bc425f5be04"
                  }
                ],
                "recordHistoryEvents": [
                  {
                    "lid": "c54e5ba9-4b51-4601-8b52-4bc425f5be04"
                  }
                ],
                "taxonInformation": [
                  {
                    "lid": "c54e5ba9-4b51-4601-849d-5f2f05312ba4"
                  }
                ]
              }
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "specimen",
                    "enum": [
                      "specimen"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/specimen"
                  },
                  "relationships": {
                    "properties": {
                      "agents": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "agent"
                                  ],
                                  "example": "agent",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "featureTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "featureType"
                                  ],
                                  "example": "featureType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "physicalObjects": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "physicalObject"
                                  ],
                                  "example": "physicalObject",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "places": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "taxonNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationHasManyPhysicalObjectsRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "physicalObject",
                  "enum": [
                    "physicalObject"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationHasManyFeatureTypesRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "featureType",
                  "enum": [
                    "featureType"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationHasManyPlacesRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "place",
                  "enum": [
                    "place"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "physicalObjectCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "physicalObject",
                    "enum": [
                      "physicalObject"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/physicalObject"
                  },
                  "relationships": {
                    "properties": {
                      "storageLocation": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "physicalObject",
              "attributes": {
                "storageLocationText": "Sorex minutus"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "physicalObject",
            "attributes": {
              "storageLocationText": "Sorex minutus"
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "physicalObjectUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "physicalObject",
                    "enum": [
                      "physicalObject"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/physicalObject"
                  },
                  "relationships": {
                    "properties": {
                      "storageLocation": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "physicalObjectUpdateRelationHasManySpecimensRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "specimen",
                  "enum": [
                    "specimen"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "physicalObjectUpdateRelationBelongsToOneStorageLocationRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "storageLocation",
                    "enum": [
                      "storageLocation"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "storageLocationCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "storageLocation",
                    "enum": [
                      "storageLocation"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/storageLocation"
                  },
                  "relationships": {
                    "properties": {
                      "physicalObjects": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "physicalObject"
                                  ],
                                  "example": "physicalObject",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "parent": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "acceptedTaxonNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "preparationTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "preparationType"
                                  ],
                                  "example": "preparationType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "storageLocation",
              "attributes": {
                "name": "string"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "storageLocation",
            "attributes": {
              "name": "string"
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "storageLocationUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "storageLocation",
                    "enum": [
                      "storageLocation"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/storageLocation"
                  },
                  "relationships": {
                    "properties": {
                      "physicalObjects": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "physicalObject"
                                  ],
                                  "example": "physicalObject",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "parent": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "acceptedTaxonNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "preparationTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "preparationType"
                                  ],
                                  "example": "preparationType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "storageLocationUpdateRelationHasOneParentRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "storageLocation",
                    "enum": [
                      "storageLocation"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "storageLocationUpdateRelationHasManyPhysicalObjectsRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "physicalObject",
                  "enum": [
                    "physicalObject"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxon",
                    "enum": [
                      "taxon"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/taxon"
                  },
                  "relationships": {
                    "properties": {
                      "acceptedTaxonName": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxonName"
                                    ],
                                    "example": "taxonName",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "synonyms": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "vernacularNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "parent": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "attributes": {},
              "type": "taxon"
            }
          }
        },
        "example": {
          "data": {
            "attributes": {},
            "type": "taxon"
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxon",
                    "enum": [
                      "taxon"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/taxon"
                  },
                  "relationships": {
                    "properties": {
                      "acceptedTaxonName": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxonName"
                                    ],
                                    "example": "taxonName",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "synonyms": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "vernacularNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "parent": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationHasOneParentRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxon",
                    "enum": [
                      "taxon"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationHasOneAcceptedTaxonNameRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxonName",
                    "enum": [
                      "taxonName"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationHasManySynonymsRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "taxonName",
                  "enum": [
                    "taxonName"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationHasManyVernacularNamesRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "taxonName",
                  "enum": [
                    "taxonName"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonNameCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxonName",
                    "enum": [
                      "taxonName"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/taxonName"
                  },
                  "relationships": {
                    "properties": {
                      "acceptedToTaxon": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "synonymToTaxon": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "vernacularToTaxon": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "taxonName",
              "attributes": {
                "name": "Addax nasomaculatus",
                "rank": "species",
                "rubinNumber": "7904803",
                "taxonNameType": "scientific"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "taxonName",
            "attributes": {
              "name": "Addax nasomaculatus",
              "rank": "species",
              "rubinNumber": "7904803",
              "taxonNameType": "scientific"
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonNameUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxonName",
                    "enum": [
                      "taxonName"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/taxonName"
                  },
                  "relationships": {
                    "properties": {
                      "acceptedToTaxon": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "synonymToTaxon": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "vernacularToTaxon": {
                        "oneOf": [
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "data": {
                                "type": "null"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonNameUpdateRelationBelongsToOneAcceptedToTaxonRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxon",
                    "enum": [
                      "taxon"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonNameUpdateRelationBelongsToOneSynonymToTaxonRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxon",
                    "enum": [
                      "taxon"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonNameUpdateRelationBelongsToOneVernacularToTaxonRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxon",
                    "enum": [
                      "taxon"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "agentCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/agent"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "user": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "user"
                                ],
                                "example": "user",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "agent",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/agents",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "agentGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/agent"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "user": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "user"
                                ],
                                "example": "user",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "agent",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/agents/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "agentGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/agent"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "user": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "user"
                                  ],
                                  "example": "user",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "null"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "agent",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/agents",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "agentUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/agent"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "user": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "user"
                                ],
                                "example": "user",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "agent",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/agents/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "agentDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/agent"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "user": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "user"
                                ],
                                "example": "user",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "agent",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/agents/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "loginUserResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "access_token": {
            "type": "string",
            "example": "xxxx",
            "x-summary": ""
          },
          "expires_in": {
            "type": "integer",
            "example": 300,
            "x-summary": ""
          },
          "not-before-policy": {
            "type": "integer",
            "example": 0,
            "x-summary": ""
          },
          "refresh_expires_in": {
            "type": "integer",
            "example": 1800,
            "x-summary": ""
          },
          "refresh_token": {
            "type": "string",
            "example": "xxxx",
            "x-summary": ""
          },
          "session_state": {
            "type": "string",
            "example": "bearer",
            "x-summary": ""
          },
          "token_type": {
            "type": "string",
            "example": "xxxx",
            "x-summary": ""
          }
        },
        "required": [
          "access_token"
        ],
        "x-summary": "",
        "description": ""
      },
      "userGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/user"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "user",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/auth/v01/users/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "userGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/user"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "user",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/auth/v01/users",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "userInfoGetOneResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string",
            "example": "john.doe@example.com",
            "x-summary": ""
          },
          "family_name": {
            "type": "string",
            "example": "Doe",
            "x-summary": ""
          },
          "given_name": {
            "type": "string",
            "example": "John",
            "x-summary": ""
          },
          "name": {
            "type": "string",
            "example": "John Doe",
            "x-summary": ""
          },
          "preferred_username": {
            "type": "string",
            "example": "john doe",
            "x-summary": ""
          },
          "sub": {
            "type": "string",
            "example": "xxxx",
            "x-summary": ""
          }
        },
        "required": [
          "email",
          "preferred_username"
        ],
        "x-summary": "",
        "description": ""
      },
      "causeOfDeathTypeCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/causeOfDeathType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "causeOfDeathType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/causeOfDeathTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "causeOfDeathTypeGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/causeOfDeathType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "causeOfDeathType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/causeOfDeathTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "causeOfDeathTypeGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/causeOfDeathType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "causeOfDeathType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/causeOfDeathTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "causeOfDeathTypeUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/causeOfDeathType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "causeOfDeathType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/causeOfDeathTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "causeOfDeathTypeDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/causeOfDeathType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "causeOfDeathType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/causeOfDeathTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "establishmentMeansTypeCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/establishmentMeansType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "establishmentMeansType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/establishmentMeansTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "establishmentMeansTypeGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/establishmentMeansType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "establishmentMeansType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/establishmentMeansTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "establishmentMeansTypeGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/establishmentMeansType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "establishmentMeansType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/establishmentMeansTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "establishmentMeansTypeUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/establishmentMeansType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "establishmentMeansType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/establishmentMeansTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "establishmentMeansTypeDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/establishmentMeansType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "establishmentMeansType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/establishmentMeansTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "featureTypeCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/featureType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "featureType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "featureTypeGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/featureType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "featureType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "featureTypeGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/featureType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "featureType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "featureTypeUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/featureType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "featureType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "featureTypeDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/featureType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "featureType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "identifierTypeCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/identifierType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "identifierType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/identifierTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "identifierTypeGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/identifierType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "identifierType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/identifierTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "identifierTypeGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/identifierType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "identifierType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/identifierTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "identifierTypeUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/identifierType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "identifierType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/identifierTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "identifierTypeDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/identifierType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "identifierType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/identifierTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "preparationTypeCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/preparationType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "preparationType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/preparationTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "preparationTypeGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/preparationType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "preparationType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/preparationTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "preparationTypeGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/preparationType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "preparationType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/preparationTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "preparationTypeUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/preparationType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "preparationType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/preparationTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "preparationTypeDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/preparationType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "preparationType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/preparationTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "typeSpecimenTypeCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/typeSpecimenType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "typeSpecimenType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/typeSpecimenTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "typeSpecimenTypeGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/typeSpecimenType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "typeSpecimenType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/typeSpecimenTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "typeSpecimenTypeGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/typeSpecimenType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "typeSpecimenType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/typeSpecimenTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "typeSpecimenTypeUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/typeSpecimenType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "typeSpecimenType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/typeSpecimenTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "typeSpecimenTypeDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/typeSpecimenType"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "typeSpecimenType",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/typeSpecimenTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/place"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "place",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/place"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "place",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/place"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "parent": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "null"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    },
                    "children": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "place",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/place"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "place",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/place"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "place",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeUpdateRelationHasOneParentResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/place"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "place",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/{id}/relationships/parent",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "searchSpecimenGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/searchSpecimen"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "searchSpecimen",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/searchSpecimens/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "searchSpecimenGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/searchSpecimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "searchSpecimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/searchSpecimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/specimen"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "agents": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "agent"
                              ],
                              "example": "agent",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "featureTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "featureType"
                              ],
                              "example": "featureType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "places": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "taxonNames": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxonName"
                              ],
                              "example": "taxonName",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "specimen",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/specimen"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "agents": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "agent"
                              ],
                              "example": "agent",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "featureTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "featureType"
                              ],
                              "example": "featureType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "places": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "taxonNames": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxonName"
                              ],
                              "example": "taxonName",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "specimen",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "agents": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "agent"
                                ],
                                "example": "agent",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "featureTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "featureType"
                                ],
                                "example": "featureType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "physicalObjects": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "physicalObject"
                                ],
                                "example": "physicalObject",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "places": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "taxonNames": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxonName"
                                ],
                                "example": "taxonName",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/specimen"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "agents": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "agent"
                              ],
                              "example": "agent",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "featureTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "featureType"
                              ],
                              "example": "featureType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "places": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "taxonNames": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxonName"
                              ],
                              "example": "taxonName",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "specimen",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/specimen"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "agents": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "agent"
                              ],
                              "example": "agent",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "featureTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "featureType"
                              ],
                              "example": "featureType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "places": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "place"
                              ],
                              "example": "place",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "taxonNames": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxonName"
                              ],
                              "example": "taxonName",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "specimen",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationHasManyPhysicalObjectsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/physicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetRelationHasManyPhysicalObjectsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/physicalObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "physicalObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/physicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationHasManyFeatureTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/featureTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetRelationHasManyFeatureTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/featureType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "featureType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/featureTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationHasManyPlacesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/places",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetRelationHasManyPlacesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/place"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "place",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/places",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetRelationHasManyTaxonNamesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxonName"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "taxonName",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/taxonNames",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "getStatusResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "up": {
                "type": "boolean"
              }
            },
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "physicalObjectCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/physicalObject"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "storageLocation": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "specimens": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "specimen"
                              ],
                              "example": "specimen",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "physicalObject",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "physicalObjectGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/physicalObject"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "storageLocation": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "specimens": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "specimen"
                              ],
                              "example": "specimen",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "physicalObject",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "physicalObjectGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/physicalObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "storageLocation": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "null"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    },
                    "specimens": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "specimen"
                                ],
                                "example": "specimen",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "physicalObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "physicalObjectUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/physicalObject"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "storageLocation": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "specimens": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "specimen"
                              ],
                              "example": "specimen",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "physicalObject",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "physicalObjectDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/physicalObject"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "storageLocation": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "specimens": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "specimen"
                              ],
                              "example": "specimen",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "physicalObject",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "physicalObjectGetRelationHasManySpecimensResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}/relationships/specimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "physicalObjectUpdateRelationHasManySpecimensResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/physicalObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "physicalObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}/relationships/specimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "physicalObjectUpdateRelationBelongsToOneStorageLocationResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/physicalObject"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "physicalObject",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}/relationships/storageLocation",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "physicalObjectGetRelationBelongsToOneStorageLocationResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "storageLocation",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}/relationships/storageLocation",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "storageLocation"
                              ],
                              "example": "storageLocation",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "acceptedTaxonNames": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxonName"
                              ],
                              "example": "taxonName",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "preparationTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "preparationType"
                              ],
                              "example": "preparationType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "storageLocation",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "storageLocation"
                              ],
                              "example": "storageLocation",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "acceptedTaxonNames": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxonName"
                              ],
                              "example": "taxonName",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "preparationTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "preparationType"
                              ],
                              "example": "preparationType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "storageLocation",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/storageLocation"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "physicalObjects": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "physicalObject"
                                ],
                                "example": "physicalObject",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "parent": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "null"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    },
                    "children": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "acceptedTaxonNames": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxonName"
                                ],
                                "example": "taxonName",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "preparationTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "preparationType"
                                ],
                                "example": "preparationType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "storageLocation",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "storageLocation"
                              ],
                              "example": "storageLocation",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "acceptedTaxonNames": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxonName"
                              ],
                              "example": "taxonName",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "preparationTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "preparationType"
                              ],
                              "example": "preparationType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "storageLocation",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "physicalObjects": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "physicalObject"
                              ],
                              "example": "physicalObject",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "storageLocation"
                              ],
                              "example": "storageLocation",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "acceptedTaxonNames": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxonName"
                              ],
                              "example": "taxonName",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "preparationTypes": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "preparationType"
                              ],
                              "example": "preparationType",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "storageLocation",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationUpdateRelationHasOneParentResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/storageLocation"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "storageLocation",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}/relationships/parent",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationGetRelationHasManyPhysicalObjectsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/physicalObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "physicalObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}/relationships/physicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationUpdateRelationHasManyPhysicalObjectsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/storageLocation"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "storageLocation",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}/relationships/physicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxon"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "acceptedTaxonName": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxonName"
                                ],
                                "example": "taxonName",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "synonyms": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxonName"
                              ],
                              "example": "taxonName",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "vernacularNames": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxonName"
                              ],
                              "example": "taxonName",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxon"
                              ],
                              "example": "taxon",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "taxon",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxon"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "acceptedTaxonName": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxonName"
                                ],
                                "example": "taxonName",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "synonyms": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxonName"
                              ],
                              "example": "taxonName",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "vernacularNames": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxonName"
                              ],
                              "example": "taxonName",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxon"
                              ],
                              "example": "taxon",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "taxon",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxon"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "acceptedTaxonName": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "null"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    },
                    "synonyms": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxonName"
                                ],
                                "example": "taxonName",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "vernacularNames": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxonName"
                                ],
                                "example": "taxonName",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "parent": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "null"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    },
                    "children": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "taxon",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxon"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "acceptedTaxonName": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxonName"
                                ],
                                "example": "taxonName",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "synonyms": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxonName"
                              ],
                              "example": "taxonName",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "vernacularNames": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxonName"
                              ],
                              "example": "taxonName",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxon"
                              ],
                              "example": "taxon",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "taxon",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxon"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "acceptedTaxonName": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxonName"
                                ],
                                "example": "taxonName",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "synonyms": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxonName"
                              ],
                              "example": "taxonName",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "vernacularNames": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxonName"
                              ],
                              "example": "taxonName",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "parent": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "children": {
                    "additionalProperties": false,
                    "properties": {
                      "data": {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "example": "1234",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "taxon"
                              ],
                              "example": "taxon",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "taxon",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationHasOneParentResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxon"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "taxon",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/parent",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationHasOneAcceptedTaxonNameResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxon"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "taxon",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/acceptedTaxonName",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationHasManySynonymsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxon"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "taxon",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/synonyms",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonGetRelationHasManySynonymsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxonName"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "taxonName",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/synonyms",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationHasManyVernacularNamesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxon"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "taxon",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/vernacularNames",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonGetRelationHasManyVernacularNamesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxonName"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "taxonName",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/vernacularNames",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxonName"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "acceptedToTaxon": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "synonymToTaxon": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "vernacularToTaxon": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "taxonName",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxonName"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "acceptedToTaxon": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "synonymToTaxon": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "vernacularToTaxon": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "taxonName",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxonName"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "acceptedToTaxon": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "null"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    },
                    "synonymToTaxon": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "null"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    },
                    "vernacularToTaxon": {
                      "oneOf": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "data": {
                              "type": "null"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "taxonName",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxonName"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "acceptedToTaxon": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "synonymToTaxon": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "vernacularToTaxon": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "taxonName",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxonName"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "relationships": {
                "properties": {
                  "acceptedToTaxon": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "synonymToTaxon": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  },
                  "vernacularToTaxon": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "type": "null"
                          }
                        },
                        "type": "object"
                      }
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": {
                "default": "taxonName",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameUpdateRelationBelongsToOneAcceptedToTaxonResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxonName"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "taxonName",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames/{id}/relationships/acceptedToTaxon",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameUpdateRelationBelongsToOneSynonymToTaxonResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxonName"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "taxonName",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames/{id}/relationships/synonymToTaxon",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameUpdateRelationBelongsToOneVernacularToTaxonResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "properties": {
              "attributes": {
                "$ref": "#/components/schemas/taxonName"
              },
              "id": {
                "example": "1234",
                "type": "string"
              },
              "type": {
                "default": "taxonName",
                "type": "string"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames/{id}/relationships/vernacularToTaxon",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  }
}