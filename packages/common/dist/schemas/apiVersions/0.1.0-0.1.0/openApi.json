{
  "openapi": "3.0.0",
  "info": {
    "title": "Dina api",
    "contact": {
      "email": "oberg.anton@gmail.com"
    },
    "license": {
      "name": "GNU Affero General Public License",
      "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"
    },
    "version": "0.1.0",
    "description": "This is a first draft of dina api documentation.\nDescriptions like below can be written in markdown:\n\n* [Dina web](https://alpha-cm.dina-web.net/login)\n* [Dina web with mocks](https://alpha-cm-mock.dina-web.net/login)\n* [Dina style guilde](https://alpha-style.dina-web.net)\n",
    "x-versionInfo": "# This is some version specific information\n"
  },
  "servers": [
    {
      "description": "Alpha api server",
      "url": "https://alpha-api.dina-web.net"
    },
    {
      "description": "Auth server",
      "url": "https://alpha-keycloak.dina-web.net"
    },
    {
      "description": "Local api server",
      "url": "http://127.0.0.1:4444"
    },
    {
      "description": "Slim taxonomy",
      "url": "https://alpha-slimtaxonomy.dina-web.net"
    }
  ],
  "tags": [
    {
      "description": "## Service managing agents.\n",
      "name": "agentService"
    },
    {
      "description": "Auth api\n",
      "name": "authService"
    },
    {
      "description": "Api managing curated lists.\n",
      "name": "curatedListService"
    },
    {
      "description": "Service managing exports.\n",
      "name": "exportService"
    },
    {
      "description": "Service managing logs.\n",
      "name": "historyService"
    },
    {
      "description": "Identifier Service\n",
      "name": "identifierService"
    },
    {
      "description": "Service managing jobs.\n",
      "name": "jobService"
    },
    {
      "name": "migrationService"
    },
    {
      "description": "Locality Service\n",
      "name": "placeService"
    },
    {
      "description": "search",
      "name": "searchService"
    },
    {
      "description": "Specimens api\n",
      "name": "specimenService"
    },
    {
      "name": "statusService"
    },
    {
      "description": "Service managing storage\n",
      "name": "storageService"
    },
    {
      "description": "Mock taxon api\n",
      "name": "taxonomyService"
    }
  ],
  "paths": {
    "/api/agent/v01/normalizedAgents": {
      "post": {
        "operationId": "normalizedAgentCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/normalizedAgentCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create normalizedAgent",
        "tags": [
          "agentService"
        ]
      },
      "get": {
        "operationId": "normalizedAgentGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "resourceActivities",
                  "specimens",
                  "user"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[id]",
            "description": "Filter by id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[parentId]",
            "description": "Filter by parentId, example 123",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[group]",
            "description": "Filter by group",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[name]",
            "description": "Filter by name match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[fullNameSearch]",
            "description": "Search fullName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[matchAgentType]",
            "description": "Match for agentType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance",
                  "id:asc",
                  "id:desc",
                  "attributes.name:asc",
                  "attributes.name:desc"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find normalizedAgents",
        "tags": [
          "agentService"
        ]
      }
    },
    "/api/agent/v01/normalizedAgents/{id}": {
      "get": {
        "operationId": "normalizedAgentGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "normalizedAgent id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "resourceActivities",
                  "specimens",
                  "user"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find normalizedAgent by id",
        "tags": [
          "agentService"
        ]
      },
      "patch": {
        "operationId": "normalizedAgentUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "normalizedAgent id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/normalizedAgentUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates normalizedAgent",
        "tags": [
          "agentService"
        ]
      },
      "delete": {
        "operationId": "normalizedAgentDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "normalizedAgent id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes normalizedAgent",
        "tags": [
          "agentService"
        ]
      }
    },
    "/api/agent/v01/normalizedAgents/actions/query": {
      "post": {
        "operationId": "normalizedAgentQuery",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/normalizedAgentQueryRequest"
              }
            }
          },
          "description": "\n  \n**Available filter functions:**\n***\n<br/>\n\n ***id*** <br/> Filter by id <br/> <br/>  ***ids*** <br/> Filter by ids <br/> <br/>  ***updatedAfter*** <br/> Filter by updatedAt after specificed timestamp <br/> <br/>  ***parentId*** <br/> Filter by parentId, example 123 <br/> <br/>  ***group*** <br/> Filter by group <br/> <br/>  ***name*** <br/> Filter by name match <br/> <br/>  ***fullNameSearch*** <br/> Search fullName <br/> <br/>  ***matchAgentType*** <br/> Match for agentType <br/>\n\n  \n  <br/>\n\n  "
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentQueryResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentQuery-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentQuery-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Query normalizedAgent",
        "tags": [
          "agentService"
        ]
      }
    },
    "/api/agent/v01/normalizedAgents/actions/importDataFromFile": {
      "post": {
        "operationId": "normalizedAgentImportDataFromFile",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentImportDataFromFileResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentImportDataFromFile-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentImportDataFromFile-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource normalizedAgent",
        "tags": [
          "agentService"
        ]
      }
    },
    "/api/agent/v01/normalizedAgents/{id}/relationships/specimens": {
      "get": {
        "operationId": "normalizedAgentGetRelationshipSpecimens",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "normalizedAgent id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentGetRelationshipSpecimensResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentGetRelationshipSpecimens-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentGetRelationshipSpecimens-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentGetRelationshipSpecimens-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find normalizedAgent -> specimens",
        "tags": [
          "agentService"
        ]
      }
    },
    "/api/agent/v01/normalizedAgents/{id}/relationships/user": {
      "get": {
        "operationId": "normalizedAgentGetRelationshipUser",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "normalizedAgent id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentGetRelationshipUserResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentGetRelationshipUser-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentGetRelationshipUser-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentGetRelationshipUser-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find normalizedAgent -> user",
        "tags": [
          "agentService"
        ]
      },
      "patch": {
        "operationId": "normalizedAgentUpdateRelationshipUser",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "normalizedAgent id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/normalizedAgentUpdateRelationshipUserRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentUpdateRelationshipUserResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentUpdateRelationshipUser-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentUpdateRelationshipUser-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/normalizedAgentUpdateRelationshipUser-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update normalizedAgent -> user",
        "tags": [
          "agentService"
        ]
      }
    },
    "/auth/realms/dina/protocol/openid-connect/token": {
      "post": {
        "operationId": "loginUser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/loginUserRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/loginUserResponse"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "summary": "Gets user token",
        "tags": [
          "authService"
        ]
      }
    },
    "/api/auth/v01/users/{id}": {
      "get": {
        "operationId": "userGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "user id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/userGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/userGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/userGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/userGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find user by id",
        "tags": [
          "authService"
        ]
      }
    },
    "/api/auth/v01/users": {
      "get": {
        "operationId": "userGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/userGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/userGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/userGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find users",
        "tags": [
          "authService"
        ]
      }
    },
    "/auth/realms/dina/protocol/openid-connect/userInfo": {
      "get": {
        "operationId": "userInfoGetOne",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/userInfoGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Gets userInfo object",
        "tags": [
          "authService"
        ]
      }
    },
    "/api/curatedList/v01/causeOfDeathTypes": {
      "post": {
        "operationId": "causeOfDeathTypeCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/causeOfDeathTypeCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create causeOfDeathType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "causeOfDeathTypeGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find causeOfDeathTypes",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/causeOfDeathTypes/{id}": {
      "get": {
        "operationId": "causeOfDeathTypeGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "causeOfDeathType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find causeOfDeathType by id",
        "tags": [
          "curatedListService"
        ]
      },
      "patch": {
        "operationId": "causeOfDeathTypeUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "causeOfDeathType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/causeOfDeathTypeUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates causeOfDeathType",
        "tags": [
          "curatedListService"
        ]
      },
      "delete": {
        "operationId": "causeOfDeathTypeDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "causeOfDeathType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes causeOfDeathType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/causeOfDeathTypes/actions/importDataFromFile": {
      "post": {
        "operationId": "causeOfDeathTypeImportDataFromFile",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeImportDataFromFileResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeImportDataFromFile-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/causeOfDeathTypeImportDataFromFile-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource causeOfDeathType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/customTaxonNameTypes": {
      "post": {
        "operationId": "customTaxonNameTypeCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/customTaxonNameTypeCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create customTaxonNameType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "customTaxonNameTypeGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find customTaxonNameTypes",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/customTaxonNameTypes/{id}": {
      "get": {
        "operationId": "customTaxonNameTypeGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "customTaxonNameType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find customTaxonNameType by id",
        "tags": [
          "curatedListService"
        ]
      },
      "patch": {
        "operationId": "customTaxonNameTypeUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "customTaxonNameType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/customTaxonNameTypeUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates customTaxonNameType",
        "tags": [
          "curatedListService"
        ]
      },
      "delete": {
        "operationId": "customTaxonNameTypeDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "customTaxonNameType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes customTaxonNameType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/customTaxonNameTypes/actions/importDataFromFile": {
      "post": {
        "operationId": "customTaxonNameTypeImportDataFromFile",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeImportDataFromFileResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeImportDataFromFile-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/customTaxonNameTypeImportDataFromFile-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource customTaxonNameType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/establishmentMeansTypes": {
      "post": {
        "operationId": "establishmentMeansTypeCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/establishmentMeansTypeCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create establishmentMeansType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "establishmentMeansTypeGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find establishmentMeansTypes",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/establishmentMeansTypes/{id}": {
      "get": {
        "operationId": "establishmentMeansTypeGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "establishmentMeansType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find establishmentMeansType by id",
        "tags": [
          "curatedListService"
        ]
      },
      "patch": {
        "operationId": "establishmentMeansTypeUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "establishmentMeansType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/establishmentMeansTypeUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates establishmentMeansType",
        "tags": [
          "curatedListService"
        ]
      },
      "delete": {
        "operationId": "establishmentMeansTypeDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "establishmentMeansType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes establishmentMeansType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/establishmentMeansTypes/actions/importDataFromFile": {
      "post": {
        "operationId": "establishmentMeansTypeImportDataFromFile",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeImportDataFromFileResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeImportDataFromFile-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/establishmentMeansTypeImportDataFromFile-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource establishmentMeansType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/featureTypes": {
      "post": {
        "operationId": "featureTypeCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/featureTypeCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create featureType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "featureTypeGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find featureTypes",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/featureTypes/{id}": {
      "get": {
        "operationId": "featureTypeGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "featureType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find featureType by id",
        "tags": [
          "curatedListService"
        ]
      },
      "patch": {
        "operationId": "featureTypeUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "featureType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/featureTypeUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates featureType",
        "tags": [
          "curatedListService"
        ]
      },
      "delete": {
        "operationId": "featureTypeDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "featureType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes featureType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/featureTypes/actions/importDataFromFile": {
      "post": {
        "operationId": "featureTypeImportDataFromFile",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeImportDataFromFileResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeImportDataFromFile-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypeImportDataFromFile-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource featureType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/identifierTypes": {
      "post": {
        "operationId": "identifierTypeCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/identifierTypeCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create identifierType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "identifierTypeGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[id]",
            "description": "Filter by id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[key]",
            "description": "Match for key",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find identifierTypes",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/identifierTypes/{id}": {
      "get": {
        "operationId": "identifierTypeGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "identifierType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find identifierType by id",
        "tags": [
          "curatedListService"
        ]
      },
      "patch": {
        "operationId": "identifierTypeUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "identifierType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/identifierTypeUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates identifierType",
        "tags": [
          "curatedListService"
        ]
      },
      "delete": {
        "operationId": "identifierTypeDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "identifierType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes identifierType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/identifierTypes/actions/importDataFromFile": {
      "post": {
        "operationId": "identifierTypeImportDataFromFile",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeImportDataFromFileResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeImportDataFromFile-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/identifierTypeImportDataFromFile-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource identifierType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/preparationTypes": {
      "post": {
        "operationId": "preparationTypeCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/preparationTypeCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create preparationType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "preparationTypeGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find preparationTypes",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/preparationTypes/{id}": {
      "get": {
        "operationId": "preparationTypeGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "preparationType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find preparationType by id",
        "tags": [
          "curatedListService"
        ]
      },
      "patch": {
        "operationId": "preparationTypeUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "preparationType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/preparationTypeUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates preparationType",
        "tags": [
          "curatedListService"
        ]
      },
      "delete": {
        "operationId": "preparationTypeDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "preparationType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes preparationType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/preparationTypes/actions/importDataFromFile": {
      "post": {
        "operationId": "preparationTypeImportDataFromFile",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeImportDataFromFileResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeImportDataFromFile-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/preparationTypeImportDataFromFile-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource preparationType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/typeSpecimenTypes": {
      "post": {
        "operationId": "typeSpecimenTypeCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/typeSpecimenTypeCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create typeSpecimenType",
        "tags": [
          "curatedListService"
        ]
      },
      "get": {
        "operationId": "typeSpecimenTypeGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find typeSpecimenTypes",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/typeSpecimenTypes/{id}": {
      "get": {
        "operationId": "typeSpecimenTypeGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "typeSpecimenType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find typeSpecimenType by id",
        "tags": [
          "curatedListService"
        ]
      },
      "patch": {
        "operationId": "typeSpecimenTypeUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "typeSpecimenType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/typeSpecimenTypeUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates typeSpecimenType",
        "tags": [
          "curatedListService"
        ]
      },
      "delete": {
        "operationId": "typeSpecimenTypeDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "typeSpecimenType id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes typeSpecimenType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/curatedList/v01/typeSpecimenTypes/actions/importDataFromFile": {
      "post": {
        "operationId": "typeSpecimenTypeImportDataFromFile",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeImportDataFromFileResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeImportDataFromFile-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/typeSpecimenTypeImportDataFromFile-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource typeSpecimenType",
        "tags": [
          "curatedListService"
        ]
      }
    },
    "/api/export/v01/exportJobs/{id}": {
      "get": {
        "operationId": "exportJobGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "exportJob id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "excludeFields",
            "description": "When provided specified fields will be excluded (applied after include)",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes.failedAt",
                  "attributes.filePath",
                  "attributes.succeededAt",
                  "id"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeFields",
            "description": "When provided only specified fields will be returned in response",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes.failedAt",
                  "attributes.filePath",
                  "attributes.succeededAt",
                  "id"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find exportJob by id",
        "tags": [
          "exportService"
        ]
      },
      "delete": {
        "operationId": "exportJobDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "exportJob id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes exportJob",
        "tags": [
          "exportService"
        ]
      }
    },
    "/api/export/v01/exportJobs": {
      "get": {
        "operationId": "exportJobGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[id]",
            "description": "Filter by id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[service]",
            "description": "Filter by service. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[resource]",
            "description": "Filter by resource. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[resourceId]",
            "description": "Filter by resourceId. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[action]",
            "description": "Filter by action. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[userId]",
            "description": "Filter by userId. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[requestId]",
            "description": "Filter by requestId. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[failedAt]",
            "description": "Filter by failedAt. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[startedAt]",
            "description": "Filter by startedAt. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[succeededAt]",
            "description": "Filter by succeededAt. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "excludeFields",
            "description": "When provided specified fields will be excluded (applied after include)",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "id",
                  "attributes.filePath"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeFields",
            "description": "When provided only specified fields will be returned in response",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "id",
                  "attributes.filePath"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find exportJobs",
        "tags": [
          "exportService"
        ]
      },
      "post": {
        "operationId": "exportJobCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/exportJobCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create exportJob",
        "tags": [
          "exportService"
        ]
      }
    },
    "/api/export/v01/exportJobs/actions/{id}/startJob": {
      "post": {
        "operationId": "exportJobStartJob",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "exportJob id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/exportJobStartJobRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobStartJobResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobStartJob-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobStartJob-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Start job",
        "tags": [
          "exportService"
        ]
      }
    },
    "/api/export/v01/exportJobs/actions/{id}/setJobFailed": {
      "post": {
        "operationId": "exportJobSetJobFailed",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "exportJob id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/exportJobSetJobFailedRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobSetJobFailedResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobSetJobFailed-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobSetJobFailed-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Set job failed",
        "tags": [
          "exportService"
        ]
      }
    },
    "/api/export/v01/exportJobs/actions/{id}/setJobSuccess": {
      "post": {
        "operationId": "exportJobSetJobSuccess",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "exportJob id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/exportJobSetJobSuccessRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobSetJobSuccessResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobSetJobSuccess-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobSetJobSuccess-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Set job success",
        "tags": [
          "exportService"
        ]
      }
    },
    "/api/export/v01/exportJobs/{id}/actions/downloadExport/{filePath}": {
      "get": {
        "operationId": "exportJobDownloadExport",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "exportJob id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "filePath",
            "description": "exportJob filePath",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobDownloadExportResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobDownloadExport-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/exportJobDownloadExport-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Download export ",
        "tags": [
          "exportService"
        ]
      }
    },
    "/api/log/v01/resourceActivitys": {
      "post": {
        "operationId": "resourceActivityCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/resourceActivityCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create resourceActivity",
        "tags": [
          "historyService"
        ]
      },
      "get": {
        "operationId": "resourceActivityGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[id]",
            "description": "Filter by id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[action]",
            "description": "Filter by action. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[relationshipId]",
            "description": "Filter by relationshipId. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[relationshipType]",
            "description": "Filter by relationshipType. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[requestId]",
            "description": "Filter by requestId. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[resource]",
            "description": "Filter by resource. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[resourceId]",
            "description": "Filter by resourceId. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[service]",
            "description": "Filter by service. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[userId]",
            "description": "Filter by userId. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "excludeFields",
            "description": "When provided specified fields will be excluded (applied after include)",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "id",
                  "attributes.action",
                  "attributes.diff",
                  "attributes.requestId",
                  "attributes.resource",
                  "attributes.resourceId",
                  "attributes.service",
                  "attributes.snapshot",
                  "attributes.srcCreatedAt",
                  "attributes.srcDeactivatedAt",
                  "attributes.srcUpdatedAt",
                  "attributes.userId",
                  "attributes.username"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeFields",
            "description": "When provided only specified fields will be returned in response",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "id",
                  "attributes.action",
                  "attributes.diff",
                  "attributes.requestId",
                  "attributes.resource",
                  "attributes.resourceId",
                  "attributes.service",
                  "attributes.snapshot",
                  "attributes.srcCreatedAt",
                  "attributes.srcDeactivatedAt",
                  "attributes.srcUpdatedAt",
                  "attributes.userId",
                  "attributes.username"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find resourceActivitys",
        "tags": [
          "historyService"
        ]
      }
    },
    "/api/log/v01/resourceActivitys/actions/bulkCreate": {
      "post": {
        "operationId": "resourceActivityBulkCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/resourceActivityBulkCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityBulkCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityBulkCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityBulkCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Bulk create multiple resourceActivity",
        "tags": [
          "historyService"
        ]
      }
    },
    "/api/log/v01/resourceActivitys/{id}": {
      "get": {
        "operationId": "resourceActivityGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "resourceActivity id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[action]",
            "description": "Filter by action. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[relationshipId]",
            "description": "Filter by relationshipId. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[relationshipType]",
            "description": "Filter by relationshipType. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[requestId]",
            "description": "Filter by requestId. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[resource]",
            "description": "Filter by resource. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[resourceId]",
            "description": "Filter by resourceId. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[service]",
            "description": "Filter by service. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[userId]",
            "description": "Filter by userId. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "excludeFields",
            "description": "When provided specified fields will be excluded (applied after include)",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "id",
                  "attributes.action",
                  "attributes.diff",
                  "attributes.requestId",
                  "attributes.resource",
                  "attributes.resourceId",
                  "attributes.service",
                  "attributes.snapshot",
                  "attributes.srcCreatedAt",
                  "attributes.srcDeactivatedAt",
                  "attributes.srcUpdatedAt",
                  "attributes.userId",
                  "attributes.username"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeFields",
            "description": "When provided only specified fields will be returned in response",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "id",
                  "attributes.action",
                  "attributes.diff",
                  "attributes.requestId",
                  "attributes.resource",
                  "attributes.resourceId",
                  "attributes.service",
                  "attributes.snapshot",
                  "attributes.srcCreatedAt",
                  "attributes.srcDeactivatedAt",
                  "attributes.srcUpdatedAt",
                  "attributes.userId",
                  "attributes.username"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find resourceActivity by id",
        "tags": [
          "historyService"
        ]
      },
      "patch": {
        "operationId": "resourceActivityUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "resourceActivity id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/resourceActivityUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates resourceActivity",
        "tags": [
          "historyService"
        ]
      },
      "delete": {
        "operationId": "resourceActivityDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "resourceActivity id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceActivityDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes resourceActivity",
        "tags": [
          "historyService"
        ]
      }
    },
    "/api/identifiers/v01/catalogNumbers/actions/generate": {
      "post": {
        "operationId": "catalogNumberGenerate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/catalogNumberGenerateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberGenerateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberGenerate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberGenerate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Generate catalog number",
        "tags": [
          "identifierService"
        ]
      }
    },
    "/api/identifiers/v01/catalogNumbers": {
      "post": {
        "operationId": "catalogNumberCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/catalogNumberCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create catalogNumber",
        "tags": [
          "identifierService"
        ]
      },
      "get": {
        "operationId": "catalogNumberGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[id]",
            "description": "Filter by id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[number]",
            "description": "Filter by undefined. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[identifier]",
            "description": "Filter by undefined. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[year]",
            "description": "Filter by undefined. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "excludeFields",
            "description": "When provided specified fields will be excluded (applied after include)",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "number",
                  "attributes.identifier",
                  "id",
                  "year"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeFields",
            "description": "When provided only specified fields will be returned in response",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "number",
                  "attributes.identifier",
                  "id",
                  "year"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance",
                  "number:asc",
                  "number:desc",
                  "attributes.identifier:asc",
                  "attributes.identifier:desc",
                  "id:asc",
                  "id:desc",
                  "year:asc",
                  "year:desc"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find catalogNumbers",
        "tags": [
          "identifierService"
        ]
      }
    },
    "/api/identifiers/v01/catalogNumbers/{id}": {
      "delete": {
        "operationId": "catalogNumberDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "catalogNumber id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes catalogNumber",
        "tags": [
          "identifierService"
        ]
      },
      "get": {
        "operationId": "catalogNumberGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "catalogNumber id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "excludeFields",
            "description": "When provided specified fields will be excluded (applied after include)",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "number",
                  "attributes.identifier",
                  "id",
                  "year"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeFields",
            "description": "When provided only specified fields will be returned in response",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "number",
                  "attributes.identifier",
                  "id",
                  "year"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find catalogNumber by id",
        "tags": [
          "identifierService"
        ]
      }
    },
    "/api/identifiers/v01/catalogNumbers/actions/validate": {
      "post": {
        "operationId": "catalogNumberValidate",
        "parameters": [
          {
            "in": "query",
            "name": "requireUnique",
            "description": "If set resource should not exist in database",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/catalogNumberValidateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberValidateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberValidate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberValidate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Validate catalogNumber",
        "tags": [
          "identifierService"
        ]
      }
    },
    "/api/identifiers/v01/catalogNumbers/actions/updateView": {
      "post": {
        "operationId": "catalogNumberUpdateView",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/catalogNumberUpdateViewRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberUpdateViewResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberUpdateView-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberUpdateView-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource catalogNumber",
        "tags": [
          "identifierService"
        ]
      }
    },
    "/api/identifiers/v01/catalogNumbers/actions/rebuildView": {
      "post": {
        "operationId": "catalogNumberRebuildView",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberRebuildViewResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberRebuildView-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/catalogNumberRebuildView-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource catalogNumber",
        "tags": [
          "identifierService"
        ]
      }
    },
    "/api/jobs/v01/jobs": {
      "post": {
        "operationId": "jobCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/jobCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create job",
        "tags": [
          "jobService"
        ]
      },
      "get": {
        "operationId": "jobGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[deactivatedAt]",
            "description": "Filter by deactivatedAt. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[failedAt]",
            "description": "Filter by failedAt. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[startedAt]",
            "description": "Filter by startedAt. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[succeededAt]",
            "description": "Filter by succeededAt. Provide true to check existance. null to check no existance",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find jobs",
        "tags": [
          "jobService"
        ]
      }
    },
    "/api/jobs/v01/jobs/{id}": {
      "get": {
        "operationId": "jobGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "job id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find job by id",
        "tags": [
          "jobService"
        ]
      },
      "patch": {
        "operationId": "jobUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "job id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/jobUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates job",
        "tags": [
          "jobService"
        ]
      },
      "delete": {
        "operationId": "jobDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "job id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes job",
        "tags": [
          "jobService"
        ]
      }
    },
    "/api/jobs/v01/jobs/actions/{id}/startJob": {
      "post": {
        "operationId": "jobStartJob",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "job id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/jobStartJobRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobStartJobResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobStartJob-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobStartJob-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Start job",
        "tags": [
          "jobService"
        ]
      }
    },
    "/api/jobs/v01/jobs/actions/{id}/setJobFailed": {
      "post": {
        "operationId": "jobSetJobFailed",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "job id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/jobSetJobFailedRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobSetJobFailedResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobSetJobFailed-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobSetJobFailed-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Set job failed",
        "tags": [
          "jobService"
        ]
      }
    },
    "/api/jobs/v01/jobs/actions/{id}/setJobSuccess": {
      "post": {
        "operationId": "jobSetJobSuccess",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "job id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/jobSetJobSuccessRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobSetJobSuccessResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobSetJobSuccess-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/jobSetJobSuccess-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Set job success",
        "tags": [
          "jobService"
        ]
      }
    },
    "/api/migrationService/v01/dataModelMigrationLogs": {
      "post": {
        "operationId": "dataModelMigrationLogCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/dataModelMigrationLogCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataModelMigrationLogCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataModelMigrationLogCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataModelMigrationLogCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create dataModelMigrationLog",
        "tags": [
          "migrationService"
        ]
      },
      "get": {
        "operationId": "dataModelMigrationLogGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance",
                  "id:asc",
                  "id:desc"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataModelMigrationLogGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataModelMigrationLogGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataModelMigrationLogGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find dataModelMigrationLogs",
        "tags": [
          "migrationService"
        ]
      }
    },
    "/api/migrationService/v01/dataModelMigrationLogs/{id}": {
      "get": {
        "operationId": "dataModelMigrationLogGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "dataModelMigrationLog id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataModelMigrationLogGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataModelMigrationLogGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataModelMigrationLogGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataModelMigrationLogGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find dataModelMigrationLog by id",
        "tags": [
          "migrationService"
        ]
      },
      "patch": {
        "operationId": "dataModelMigrationLogUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "dataModelMigrationLog id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/dataModelMigrationLogUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataModelMigrationLogUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataModelMigrationLogUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataModelMigrationLogUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataModelMigrationLogUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates dataModelMigrationLog",
        "tags": [
          "migrationService"
        ]
      }
    },
    "/api/locality/v01/places": {
      "post": {
        "operationId": "placeCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/placeCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create place",
        "tags": [
          "placeService"
        ]
      },
      "get": {
        "operationId": "placeGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "parent",
                  "children",
                  "resourceActivities",
                  "specimens"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[ancestorsToId]",
            "description": "Find ancestors to resource with provided id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[group]",
            "description": "Filter by group",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[id]",
            "description": "Filter by id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[nodesWithCircularDependencies]",
            "description": "Find nodes with circularDependencies",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[name]",
            "description": "Filter by name match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[nameSearch]",
            "description": "Filter by string search, example swe",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[parentId]",
            "description": "Filter by parentId, example 123",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "excludeFields",
            "description": "When provided specified fields will be excluded (applied after include)",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "id",
                  "attributes.name",
                  "attributes.group"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeFields",
            "description": "When provided only specified fields will be returned in response",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "id",
                  "attributes.name",
                  "attributes.group"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance",
                  "id:asc",
                  "id:desc",
                  "attributes.name:asc",
                  "attributes.name:desc"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find places",
        "tags": [
          "placeService"
        ]
      }
    },
    "/api/locality/v01/places/{id}": {
      "get": {
        "operationId": "placeGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "place id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "parent",
                  "children",
                  "resourceActivities",
                  "specimens"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find place by id",
        "tags": [
          "placeService"
        ]
      },
      "patch": {
        "operationId": "placeUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "place id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/placeUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates place",
        "tags": [
          "placeService"
        ]
      },
      "delete": {
        "operationId": "placeDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "place id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes place",
        "tags": [
          "placeService"
        ]
      }
    },
    "/api/locality/v01/places/actions/query": {
      "post": {
        "operationId": "placeQuery",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/placeQueryRequest"
              }
            }
          },
          "description": "\n  \n**Available filter functions:**\n***\n<br/>\n\n ***ancestorsToId*** <br/> Find ancestors to resource with provided id <br/> <br/>  ***group*** <br/> Filter by group <br/> <br/>  ***id*** <br/> Filter by id <br/> <br/>  ***ids*** <br/> Filter by ids <br/> <br/>  ***nodesWithCircularDependencies*** <br/> Find nodes with circularDependencies <br/> <br/>  ***name*** <br/> Filter by name match <br/> <br/>  ***nameSearch*** <br/> Filter by string search, example swe <br/> <br/>  ***parentId*** <br/> Filter by parentId, example 123 <br/> <br/>  ***updatedAfter*** <br/> Filter by updatedAt after specificed timestamp <br/>\n\n  \n  <br/>\n\n  "
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeQueryResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeQuery-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeQuery-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Query place",
        "tags": [
          "placeService"
        ]
      }
    },
    "/api/locality/v01/places/actions/importDataFromFile": {
      "post": {
        "operationId": "placeImportDataFromFile",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeImportDataFromFileResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeImportDataFromFile-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeImportDataFromFile-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource place",
        "tags": [
          "placeService"
        ]
      }
    },
    "/api/locality/v01/places/{id}/relationships/children": {
      "get": {
        "operationId": "placeGetRelationshipChildren",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "place id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetRelationshipChildrenResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetRelationshipChildren-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetRelationshipChildren-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetRelationshipChildren-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find place -> children",
        "tags": [
          "placeService"
        ]
      },
      "patch": {
        "description": "NOTE: Use endpoint with operationId \"placeUpdateRelationshipParent\" instead. This endpoint is not active.",
        "operationId": "placeUpdateRelationshipChildren",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "place id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/placeUpdateRelationshipChildrenRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateRelationshipChildrenResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateRelationshipChildren-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateRelationshipChildren-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateRelationshipChildren-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update place -> children",
        "tags": [
          "placeService"
        ],
        "x-inverseOperationId": "placeUpdateRelationshipParent"
      }
    },
    "/api/locality/v01/places/{id}/relationships/parent": {
      "get": {
        "operationId": "placeGetRelationshipParent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "place id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetRelationshipParentResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetRelationshipParent-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetRelationshipParent-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetRelationshipParent-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find place -> parent",
        "tags": [
          "placeService"
        ]
      },
      "patch": {
        "operationId": "placeUpdateRelationshipParent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "place id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/placeUpdateRelationshipParentRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateRelationshipParentResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateRelationshipParent-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateRelationshipParent-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateRelationshipParent-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update place -> parent",
        "tags": [
          "placeService"
        ]
      }
    },
    "/api/locality/v01/places/{id}/relationships/specimens": {
      "get": {
        "operationId": "placeGetRelationshipSpecimens",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "place id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetRelationshipSpecimensResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetRelationshipSpecimens-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetRelationshipSpecimens-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeGetRelationshipSpecimens-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find place -> specimens",
        "tags": [
          "placeService"
        ]
      },
      "patch": {
        "description": "NOTE: Use endpoint with operationId \"placeUpdateRelationshipPlaces\" instead. This endpoint is not active.",
        "operationId": "placeUpdateRelationshipSpecimens",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "place id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/placeUpdateRelationshipSpecimensRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateRelationshipSpecimensResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateRelationshipSpecimens-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateRelationshipSpecimens-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/placeUpdateRelationshipSpecimens-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update place -> specimens",
        "tags": [
          "placeService"
        ],
        "x-inverseOperationId": "placeUpdateRelationshipPlaces"
      }
    },
    "/api/search/v01/cachePhysicalObjects": {
      "post": {
        "operationId": "cachePhysicalObjectCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/cachePhysicalObjectCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create cachePhysicalObject",
        "tags": [
          "searchService"
        ]
      },
      "get": {
        "operationId": "cachePhysicalObjectGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "storageLocation"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[group]",
            "description": "Filter by group",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find cachePhysicalObjects",
        "tags": [
          "searchService"
        ]
      }
    },
    "/api/search/v01/cachePhysicalObjects/{id}": {
      "get": {
        "operationId": "cachePhysicalObjectGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "cachePhysicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "storageLocation"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find cachePhysicalObject by id",
        "tags": [
          "searchService"
        ]
      },
      "patch": {
        "operationId": "cachePhysicalObjectUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "cachePhysicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/cachePhysicalObjectUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates cachePhysicalObject",
        "tags": [
          "searchService"
        ]
      },
      "delete": {
        "operationId": "cachePhysicalObjectDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "cachePhysicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes cachePhysicalObject",
        "tags": [
          "searchService"
        ]
      }
    },
    "/api/search/v01/cachePhysicalObjects/actions/emptyView": {
      "post": {
        "operationId": "cachePhysicalObjectEmptyView",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectEmptyViewResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectEmptyView-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectEmptyView-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Empty view for resource cachePhysicalObject",
        "tags": [
          "searchService"
        ]
      }
    },
    "/api/search/v01/cachePhysicalObjects/actions/rebuildView": {
      "post": {
        "operationId": "cachePhysicalObjectRebuildView",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectRebuildViewResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectRebuildView-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cachePhysicalObjectRebuildView-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource cachePhysicalObject",
        "tags": [
          "searchService"
        ]
      }
    },
    "/api/search/v01/searchSpecimens/{id}": {
      "get": {
        "operationId": "searchSpecimenGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "searchSpecimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "excludeFields",
            "description": "When provided specified fields will be excluded (applied after include)",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes.searchOnlyFields.searchAge",
                  "attributes.searchOnlyFields.searchDate",
                  "attributes.searchOnlyFields.remarksObject",
                  "attributes.tags.agentTags",
                  "attributes.tags.ageStageTags",
                  "attributes.tags.boneTags",
                  "attributes.tags.conditionTags",
                  "attributes.tags.dateTags",
                  "attributes.tags.identifierTags",
                  "attributes.tags.lengthTags",
                  "attributes.tags.locationTags",
                  "attributes.tags.otherPreparationTags",
                  "attributes.tags.higherGeographyTags",
                  "attributes.tags.sexTags",
                  "attributes.tags.skeletonTags",
                  "attributes.tags.skinTags",
                  "attributes.tags.storageLocationTags",
                  "attributes.tags.taxonomyTags",
                  "attributes.searchOnlyFields.weightObject",
                  "attributes.tags.wetPreparationTags",
                  "attributes.collectingEventCollectors",
                  "attributes.collectingEventCountry",
                  "attributes.collectingEventDistrict",
                  "attributes.collectingEventEndDate",
                  "attributes.collectingEventLocality",
                  "attributes.collectingEventProvince",
                  "attributes.collectingEventStartDate",
                  "attributes.deathInformationDeath",
                  "attributes.featureAge",
                  "attributes.featureAgeStage",
                  "attributes.featureBodyLength",
                  "attributes.featureCompleteBodyWeight",
                  "attributes.featureCondition",
                  "attributes.featureSex",
                  "attributes.featureTotalLength",
                  "id",
                  "attributes.identifiersCatalogNumber",
                  "attributes.identifiersOtherIdentifiers",
                  "attributes.idNumeric",
                  "attributes.originInformationLocality",
                  "attributes.physicalUnitOtherPreparation",
                  "attributes.physicalUnitSkeleton",
                  "attributes.physicalUnitSkin",
                  "attributes.physicalUnitWetPreparation",
                  "attributes.recordEventCataloged",
                  "attributes.recordEventLastModified",
                  "attributes.recordEventRegistered",
                  "attributes.taxonomyCuratorialName",
                  "attributes.taxonomyFamily",
                  "attributes.taxonomyGenus",
                  "attributes.taxonomySpecies",
                  "attributes.taxonomySubspecies"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeFields",
            "description": "When provided only specified fields will be returned in response",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes.searchOnlyFields.searchAge",
                  "attributes.searchOnlyFields.searchDate",
                  "attributes.searchOnlyFields.remarksObject",
                  "attributes.tags.agentTags",
                  "attributes.tags.ageStageTags",
                  "attributes.tags.boneTags",
                  "attributes.tags.conditionTags",
                  "attributes.tags.dateTags",
                  "attributes.tags.identifierTags",
                  "attributes.tags.lengthTags",
                  "attributes.tags.locationTags",
                  "attributes.tags.otherPreparationTags",
                  "attributes.tags.higherGeographyTags",
                  "attributes.tags.sexTags",
                  "attributes.tags.skeletonTags",
                  "attributes.tags.skinTags",
                  "attributes.tags.storageLocationTags",
                  "attributes.tags.taxonomyTags",
                  "attributes.searchOnlyFields.weightObject",
                  "attributes.tags.wetPreparationTags",
                  "attributes.collectingEventCollectors",
                  "attributes.collectingEventCountry",
                  "attributes.collectingEventDistrict",
                  "attributes.collectingEventEndDate",
                  "attributes.collectingEventLocality",
                  "attributes.collectingEventProvince",
                  "attributes.collectingEventStartDate",
                  "attributes.deathInformationDeath",
                  "attributes.featureAge",
                  "attributes.featureAgeStage",
                  "attributes.featureBodyLength",
                  "attributes.featureCompleteBodyWeight",
                  "attributes.featureCondition",
                  "attributes.featureSex",
                  "attributes.featureTotalLength",
                  "id",
                  "attributes.identifiersCatalogNumber",
                  "attributes.identifiersOtherIdentifiers",
                  "attributes.idNumeric",
                  "attributes.originInformationLocality",
                  "attributes.physicalUnitOtherPreparation",
                  "attributes.physicalUnitSkeleton",
                  "attributes.physicalUnitSkin",
                  "attributes.physicalUnitWetPreparation",
                  "attributes.recordEventCataloged",
                  "attributes.recordEventLastModified",
                  "attributes.recordEventRegistered",
                  "attributes.taxonomyCuratorialName",
                  "attributes.taxonomyFamily",
                  "attributes.taxonomyGenus",
                  "attributes.taxonomySpecies",
                  "attributes.taxonomySubspecies"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find searchSpecimen by id",
        "tags": [
          "searchService"
        ]
      },
      "delete": {
        "operationId": "searchSpecimenDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "searchSpecimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes searchSpecimen",
        "tags": [
          "searchService"
        ]
      }
    },
    "/api/search/v01/searchSpecimens/actions/query": {
      "post": {
        "operationId": "searchSpecimenQuery",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/searchSpecimenQueryRequest"
              }
            }
          },
          "description": "\n  \n**Available filter functions:**\n***\n<br/>\n\n ***id*** <br/> Filter by id <br/> <br/>  ***raw*** <br/> Raw filtering for elasticsearch <br/> <br/>  ***ids*** <br/> Filter by ids <br/> <br/>  ***rangeAge*** <br/> Match for attributes.searchOnlyFields.searchAge <br/> <br/>  ***searchDates*** <br/> Search date <br/> <br/>  ***matchRemarksSrcField*** <br/> Match for attributes.searchOnlyFields.remarksObject.srcFields <br/> <br/>  ***searchRemarks*** <br/> Query string search <br/> <br/>  ***matchAgentTags*** <br/> Search attributes.tags.agentTags <br/> <br/>  ***searchAgentTags*** <br/> Search attributes.tags.agentTags <br/> <br/>  ***matchAgeStageTags*** <br/> Search attributes.tags.ageStageTags <br/> <br/>  ***searchAgeStageTags*** <br/> Search attributes.tags.ageStageTags <br/> <br/>  ***matchBoneTags*** <br/> Search attributes.tags.boneTags <br/> <br/>  ***searchBoneTags*** <br/> Search attributes.tags.boneTags <br/> <br/>  ***matchConditionTags*** <br/> Search attributes.tags.conditionTags <br/> <br/>  ***searchConditionTags*** <br/> Search attributes.tags.conditionTags <br/> <br/>  ***matchDateTags*** <br/> Search attributes.tags.dateTags <br/> <br/>  ***searchDateTags*** <br/> Search attributes.tags.dateTags <br/> <br/>  ***matchIdentifierTags*** <br/> Search attributes.tags.identifierTags <br/> <br/>  ***searchIdentifierTags*** <br/> Search attributes.tags.identifierTags <br/> <br/>  ***matchLengthTags*** <br/> Match for attributes.tags.lengthTags <br/> <br/>  ***rangeLength*** <br/> Match for attributes.tags.lengthTags <br/> <br/>  ***matchLocationTags*** <br/> Search attributes.tags.locationTags <br/> <br/>  ***searchLocationTags*** <br/> Search attributes.tags.locationTags <br/> <br/>  ***matchOtherPreparationTags*** <br/> Search attributes.tags.otherPreparationTags <br/> <br/>  ***searchOtherPreparationTags*** <br/> Search attributes.tags.otherPreparationTags <br/> <br/>  ***matchHigherGeographyTags*** <br/> Search attributes.tags.higherGeographyTags <br/> <br/>  ***searchHigherGeographyTags*** <br/> Search attributes.tags.higherGeographyTags <br/> <br/>  ***matchSexTags*** <br/> Search attributes.tags.sexTags <br/> <br/>  ***searchSexTags*** <br/> Search attributes.tags.sexTags <br/> <br/>  ***matchSkeletonTags*** <br/> Search attributes.tags.skeletonTags <br/> <br/>  ***searchSkeletonTags*** <br/> Search attributes.tags.skeletonTags <br/> <br/>  ***matchSkinTags*** <br/> Search attributes.tags.skinTags <br/> <br/>  ***searchSkinTags*** <br/> Search attributes.tags.skinTags <br/> <br/>  ***matchStorageLocationTags*** <br/> Search attributes.tags.storageLocationTags <br/> <br/>  ***searchStorageLocationTags*** <br/> Search attributes.tags.storageLocationTags <br/> <br/>  ***matchTaxonomyTags*** <br/> Search attributes.tags.taxonomyTags <br/> <br/>  ***searchTaxonomyTags*** <br/> Search attributes.tags.taxonomyTags <br/> <br/>  ***matchWeightTags*** <br/> Match for attributes.searchOnlyFields.weightObject <br/> <br/>  ***rangeWeight*** <br/> Match for attributes.searchOnlyFields.weightObject <br/> <br/>  ***matchWetPreparationTags*** <br/> Search attributes.tags.wetPreparationTags <br/> <br/>  ***searchWetPreparationTags*** <br/> Search attributes.tags.wetPreparationTags <br/>\n\n  \n  <br/>\n\n  \n**Available aggregation functions:**\n***\n<br/>\n\n ***aggregateRemarkSrcFields*** <br/> Aggregation for: attributes.searchOnlyFields.remarksObject.srcFields <br/> <br/>  ***aggregateRemarksTextPreview*** <br/> Text preview aggregation for: remarkTags <br/> <br/>  ***aggregateAgentTagTypes*** <br/> Aggregation for: attributes.tags.agentTags <br/> <br/>  ***aggregateAgentTagValues*** <br/> Aggregation for: attributes.tags.agentTags <br/> <br/>  ***aggregateAgeStageTags*** <br/> Aggregation for: attributes.tags.ageStageTags <br/> <br/>  ***aggregateBoneTags*** <br/> Aggregation for: attributes.tags.boneTags <br/> <br/>  ***aggregateConditionTags*** <br/> Aggregation for: attributes.tags.conditionTags <br/> <br/>  ***aggregateDateTags*** <br/> Aggregation for: attributes.tags.dateTags <br/> <br/>  ***aggregateIdentifierTagTypes*** <br/> Aggregation for: attributes.tags.identifierTags <br/> <br/>  ***aggregateIdentifierTagValues*** <br/> Aggregation for: attributes.tags.identifierTags <br/> <br/>  ***aggregateLengthTags*** <br/> Aggregation for: attributes.tags.lengthTags <br/> <br/>  ***aggregateLocationTagTypes*** <br/> Aggregation for: attributes.tags.locationTags <br/> <br/>  ***aggregateLocationTagValues*** <br/> Aggregation for: attributes.tags.locationTags <br/> <br/>  ***aggregateOtherPreparationTags*** <br/> Aggregation for: attributes.tags.otherPreparationTags <br/> <br/>  ***aggregateHigherGeographyTagTypes*** <br/> Aggregation for: attributes.tags.higherGeographyTags <br/> <br/>  ***aggregateHigherGeographyTagValues*** <br/> Aggregation for: attributes.tags.higherGeographyTags <br/> <br/>  ***aggregateSexTags*** <br/> Aggregation for: attributes.tags.sexTags <br/> <br/>  ***aggregateSkeletonTags*** <br/> Aggregation for: attributes.tags.skeletonTags <br/> <br/>  ***aggregateSkinTags*** <br/> Aggregation for: attributes.tags.skinTags <br/> <br/>  ***aggregateStorageLocationTagTypes*** <br/> Aggregation for: attributes.tags.storageLocationTags <br/> <br/>  ***aggregateStorageLocationTagValues*** <br/> Aggregation for: attributes.tags.storageLocationTags <br/> <br/>  ***aggregateTaxonomyTagTypes*** <br/> Aggregation for: attributes.tags.taxonomyTags <br/> <br/>  ***aggregateTaxonomyTagValues*** <br/> Aggregation for: attributes.tags.taxonomyTags <br/> <br/>  ***aggregateWeightTags*** <br/> Aggregation for: attributes.searchOnlyFields.weightObject <br/> <br/>  ***aggregateWetPreparationTags*** <br/> Aggregation for: attributes.tags.wetPreparationTags <br/>\n\n  "
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenQueryResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenQuery-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenQuery-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Query searchSpecimen",
        "tags": [
          "searchService"
        ]
      }
    },
    "/api/search/v01/searchSpecimens": {
      "get": {
        "operationId": "searchSpecimenGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[id]",
            "description": "Filter by id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[rangeAge]",
            "description": "Match for attributes.searchOnlyFields.searchAge",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[searchDates]",
            "description": "Search date",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[matchRemarksSrcField]",
            "description": "Match for attributes.searchOnlyFields.remarksObject.srcFields",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[searchRemarks]",
            "description": "Query string search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[matchAgentTags]",
            "description": "Search attributes.tags.agentTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[searchAgentTags]",
            "description": "Search attributes.tags.agentTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[matchAgeStageTags]",
            "description": "Search attributes.tags.ageStageTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[searchAgeStageTags]",
            "description": "Search attributes.tags.ageStageTags",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[matchBoneTags]",
            "description": "Search attributes.tags.boneTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[searchBoneTags]",
            "description": "Search attributes.tags.boneTags",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[matchConditionTags]",
            "description": "Search attributes.tags.conditionTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[searchConditionTags]",
            "description": "Search attributes.tags.conditionTags",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[matchDateTags]",
            "description": "Search attributes.tags.dateTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[searchDateTags]",
            "description": "Search attributes.tags.dateTags",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[matchIdentifierTags]",
            "description": "Search attributes.tags.identifierTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[searchIdentifierTags]",
            "description": "Search attributes.tags.identifierTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[matchLengthTags]",
            "description": "Match for attributes.tags.lengthTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[rangeLength]",
            "description": "Match for attributes.tags.lengthTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[matchLocationTags]",
            "description": "Search attributes.tags.locationTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[searchLocationTags]",
            "description": "Search attributes.tags.locationTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[matchOtherPreparationTags]",
            "description": "Search attributes.tags.otherPreparationTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[searchOtherPreparationTags]",
            "description": "Search attributes.tags.otherPreparationTags",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[matchHigherGeographyTags]",
            "description": "Search attributes.tags.higherGeographyTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[searchHigherGeographyTags]",
            "description": "Search attributes.tags.higherGeographyTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[matchSexTags]",
            "description": "Search attributes.tags.sexTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[searchSexTags]",
            "description": "Search attributes.tags.sexTags",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[matchSkeletonTags]",
            "description": "Search attributes.tags.skeletonTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[searchSkeletonTags]",
            "description": "Search attributes.tags.skeletonTags",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[matchSkinTags]",
            "description": "Search attributes.tags.skinTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[searchSkinTags]",
            "description": "Search attributes.tags.skinTags",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[matchStorageLocationTags]",
            "description": "Search attributes.tags.storageLocationTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[searchStorageLocationTags]",
            "description": "Search attributes.tags.storageLocationTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[matchTaxonomyTags]",
            "description": "Search attributes.tags.taxonomyTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[searchTaxonomyTags]",
            "description": "Search attributes.tags.taxonomyTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[matchWeightTags]",
            "description": "Match for attributes.searchOnlyFields.weightObject",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[rangeWeight]",
            "description": "Match for attributes.searchOnlyFields.weightObject",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[matchWetPreparationTags]",
            "description": "Search attributes.tags.wetPreparationTags",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "in": "query",
            "name": "filter[searchWetPreparationTags]",
            "description": "Search attributes.tags.wetPreparationTags",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "excludeFields",
            "description": "When provided specified fields will be excluded (applied after include)",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes.searchOnlyFields.searchAge",
                  "attributes.searchOnlyFields.searchDate",
                  "attributes.searchOnlyFields.remarksObject",
                  "attributes.tags.agentTags",
                  "attributes.tags.ageStageTags",
                  "attributes.tags.boneTags",
                  "attributes.tags.conditionTags",
                  "attributes.tags.dateTags",
                  "attributes.tags.identifierTags",
                  "attributes.tags.lengthTags",
                  "attributes.tags.locationTags",
                  "attributes.tags.otherPreparationTags",
                  "attributes.tags.higherGeographyTags",
                  "attributes.tags.sexTags",
                  "attributes.tags.skeletonTags",
                  "attributes.tags.skinTags",
                  "attributes.tags.storageLocationTags",
                  "attributes.tags.taxonomyTags",
                  "attributes.searchOnlyFields.weightObject",
                  "attributes.tags.wetPreparationTags",
                  "attributes.collectingEventCollectors",
                  "attributes.collectingEventCountry",
                  "attributes.collectingEventDistrict",
                  "attributes.collectingEventEndDate",
                  "attributes.collectingEventLocality",
                  "attributes.collectingEventProvince",
                  "attributes.collectingEventStartDate",
                  "attributes.deathInformationDeath",
                  "attributes.featureAge",
                  "attributes.featureAgeStage",
                  "attributes.featureBodyLength",
                  "attributes.featureCompleteBodyWeight",
                  "attributes.featureCondition",
                  "attributes.featureSex",
                  "attributes.featureTotalLength",
                  "id",
                  "attributes.identifiersCatalogNumber",
                  "attributes.identifiersOtherIdentifiers",
                  "attributes.idNumeric",
                  "attributes.originInformationLocality",
                  "attributes.physicalUnitOtherPreparation",
                  "attributes.physicalUnitSkeleton",
                  "attributes.physicalUnitSkin",
                  "attributes.physicalUnitWetPreparation",
                  "attributes.recordEventCataloged",
                  "attributes.recordEventLastModified",
                  "attributes.recordEventRegistered",
                  "attributes.taxonomyCuratorialName",
                  "attributes.taxonomyFamily",
                  "attributes.taxonomyGenus",
                  "attributes.taxonomySpecies",
                  "attributes.taxonomySubspecies"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeFields",
            "description": "When provided only specified fields will be returned in response",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes.searchOnlyFields.searchAge",
                  "attributes.searchOnlyFields.searchDate",
                  "attributes.searchOnlyFields.remarksObject",
                  "attributes.tags.agentTags",
                  "attributes.tags.ageStageTags",
                  "attributes.tags.boneTags",
                  "attributes.tags.conditionTags",
                  "attributes.tags.dateTags",
                  "attributes.tags.identifierTags",
                  "attributes.tags.lengthTags",
                  "attributes.tags.locationTags",
                  "attributes.tags.otherPreparationTags",
                  "attributes.tags.higherGeographyTags",
                  "attributes.tags.sexTags",
                  "attributes.tags.skeletonTags",
                  "attributes.tags.skinTags",
                  "attributes.tags.storageLocationTags",
                  "attributes.tags.taxonomyTags",
                  "attributes.searchOnlyFields.weightObject",
                  "attributes.tags.wetPreparationTags",
                  "attributes.collectingEventCollectors",
                  "attributes.collectingEventCountry",
                  "attributes.collectingEventDistrict",
                  "attributes.collectingEventEndDate",
                  "attributes.collectingEventLocality",
                  "attributes.collectingEventProvince",
                  "attributes.collectingEventStartDate",
                  "attributes.deathInformationDeath",
                  "attributes.featureAge",
                  "attributes.featureAgeStage",
                  "attributes.featureBodyLength",
                  "attributes.featureCompleteBodyWeight",
                  "attributes.featureCondition",
                  "attributes.featureSex",
                  "attributes.featureTotalLength",
                  "id",
                  "attributes.identifiersCatalogNumber",
                  "attributes.identifiersOtherIdentifiers",
                  "attributes.idNumeric",
                  "attributes.originInformationLocality",
                  "attributes.physicalUnitOtherPreparation",
                  "attributes.physicalUnitSkeleton",
                  "attributes.physicalUnitSkin",
                  "attributes.physicalUnitWetPreparation",
                  "attributes.recordEventCataloged",
                  "attributes.recordEventLastModified",
                  "attributes.recordEventRegistered",
                  "attributes.taxonomyCuratorialName",
                  "attributes.taxonomyFamily",
                  "attributes.taxonomyGenus",
                  "attributes.taxonomySpecies",
                  "attributes.taxonomySubspecies"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance",
                  "attributes.collectingEventCollectors:asc",
                  "attributes.collectingEventCollectors:desc",
                  "attributes.collectingEventCountry:asc",
                  "attributes.collectingEventCountry:desc",
                  "attributes.collectingEventDistrict:asc",
                  "attributes.collectingEventDistrict:desc",
                  "attributes.collectingEventEndDate:asc",
                  "attributes.collectingEventEndDate:desc",
                  "attributes.collectingEventLocality:asc",
                  "attributes.collectingEventLocality:desc",
                  "attributes.collectingEventProvince:asc",
                  "attributes.collectingEventProvince:desc",
                  "attributes.collectingEventStartDate:asc",
                  "attributes.collectingEventStartDate:desc",
                  "attributes.deathInformationDeath:asc",
                  "attributes.deathInformationDeath:desc",
                  "attributes.featureAge:asc",
                  "attributes.featureAge:desc",
                  "attributes.featureAgeStage:asc",
                  "attributes.featureAgeStage:desc",
                  "attributes.featureBodyLength:asc",
                  "attributes.featureBodyLength:desc",
                  "attributes.featureCompleteBodyWeight:asc",
                  "attributes.featureCompleteBodyWeight:desc",
                  "attributes.featureCondition:asc",
                  "attributes.featureCondition:desc",
                  "attributes.featureSex:asc",
                  "attributes.featureSex:desc",
                  "attributes.featureTotalLength:asc",
                  "attributes.featureTotalLength:desc",
                  "id:asc",
                  "id:desc",
                  "attributes.identifiersCatalogNumber:asc",
                  "attributes.identifiersCatalogNumber:desc",
                  "attributes.identifiersOtherIdentifiers:asc",
                  "attributes.identifiersOtherIdentifiers:desc",
                  "attributes.idNumeric:asc",
                  "attributes.idNumeric:desc",
                  "attributes.originInformationLocality:asc",
                  "attributes.originInformationLocality:desc",
                  "attributes.physicalUnitOtherPreparation:asc",
                  "attributes.physicalUnitOtherPreparation:desc",
                  "attributes.physicalUnitSkeleton:asc",
                  "attributes.physicalUnitSkeleton:desc",
                  "attributes.physicalUnitSkin:asc",
                  "attributes.physicalUnitSkin:desc",
                  "attributes.physicalUnitWetPreparation:asc",
                  "attributes.physicalUnitWetPreparation:desc",
                  "attributes.recordEventCataloged:asc",
                  "attributes.recordEventCataloged:desc",
                  "attributes.recordEventLastModified:asc",
                  "attributes.recordEventLastModified:desc",
                  "attributes.recordEventRegistered:asc",
                  "attributes.recordEventRegistered:desc",
                  "attributes.taxonomyCuratorialName:asc",
                  "attributes.taxonomyCuratorialName:desc",
                  "attributes.taxonomyFamily:asc",
                  "attributes.taxonomyFamily:desc",
                  "attributes.taxonomyGenus:asc",
                  "attributes.taxonomyGenus:desc",
                  "attributes.taxonomySpecies:asc",
                  "attributes.taxonomySpecies:desc",
                  "attributes.taxonomySubspecies:asc",
                  "attributes.taxonomySubspecies:desc"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find searchSpecimens",
        "tags": [
          "searchService"
        ]
      }
    },
    "/api/search/v01/searchSpecimens/actions/emptyView": {
      "post": {
        "operationId": "searchSpecimenEmptyView",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenEmptyViewResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenEmptyView-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenEmptyView-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Empty view for resource searchSpecimen",
        "tags": [
          "searchService"
        ]
      }
    },
    "/api/search/v01/searchSpecimens/actions/updateView": {
      "post": {
        "operationId": "searchSpecimenUpdateView",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/searchSpecimenUpdateViewRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenUpdateViewResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenUpdateView-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenUpdateView-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource searchSpecimen",
        "tags": [
          "searchService"
        ]
      }
    },
    "/api/search/v01/searchSpecimens/actions/rebuildView": {
      "post": {
        "operationId": "searchSpecimenRebuildView",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenRebuildViewResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenRebuildView-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenRebuildView-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource searchSpecimen",
        "tags": [
          "searchService"
        ]
      }
    },
    "/api/search/v01/searchSpecimens/actions/requestRebuildView": {
      "post": {
        "operationId": "searchSpecimenRequestRebuildView",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenRequestRebuildViewResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenRequestRebuildView-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenRequestRebuildView-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource searchSpecimen",
        "tags": [
          "searchService"
        ]
      }
    },
    "/api/search/v01/searchSpecimens/actions/requestUpdateView": {
      "post": {
        "operationId": "searchSpecimenRequestUpdateView",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/searchSpecimenRequestUpdateViewRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenRequestUpdateViewResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenRequestUpdateView-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSpecimenRequestUpdateView-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource searchSpecimen",
        "tags": [
          "searchService"
        ]
      }
    },
    "/api/specimen/v01/specimens": {
      "post": {
        "operationId": "specimenCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create specimen",
        "tags": [
          "specimenService"
        ]
      },
      "get": {
        "operationId": "specimenGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "causeOfDeathTypes",
                  "curatorialTaxon",
                  "establishmentMeansTypes",
                  "featureTypes",
                  "identifierTypes",
                  "normalizedAgents",
                  "physicalObjects",
                  "places",
                  "preparationTypes",
                  "resourceActivities",
                  "taxonNames",
                  "typeSpecimenType"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[catalogNumber]",
            "description": "catalog number used to filter specimens",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[normalizedAgent]",
            "description": "normalizedAgent id used to filter specimen",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[physicalObject]",
            "description": "physicalObject id used to filter specimen",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[place]",
            "description": "place id used to filter specimen",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[taxon]",
            "description": "taxon id used to filter specimen",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimens",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}": {
      "get": {
        "operationId": "specimenGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "causeOfDeathTypes",
                  "curatorialTaxon",
                  "establishmentMeansTypes",
                  "featureTypes",
                  "identifierTypes",
                  "normalizedAgents",
                  "physicalObjects",
                  "places",
                  "preparationTypes",
                  "resourceActivities",
                  "taxonNames",
                  "typeSpecimenType"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen by id",
        "tags": [
          "specimenService"
        ]
      },
      "patch": {
        "operationId": "specimenUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates specimen",
        "tags": [
          "specimenService"
        ]
      },
      "delete": {
        "operationId": "specimenDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes specimen",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/actions/query": {
      "post": {
        "operationId": "specimenQuery",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenQueryRequest"
              }
            }
          },
          "description": "\n  \n**Available filter functions:**\n***\n<br/>\n\n ***ids*** <br/> Filter by ids <br/> <br/>  ***updatedAfter*** <br/> Filter by updatedAt after specificed timestamp <br/> <br/>  ***catalogNumber*** <br/> catalog number used to filter specimens <br/> <br/>  ***normalizedAgent*** <br/> normalizedAgent id used to filter specimen <br/> <br/>  ***physicalObject*** <br/> physicalObject id used to filter specimen <br/> <br/>  ***place*** <br/> place id used to filter specimen <br/> <br/>  ***taxon*** <br/> taxon id used to filter specimen <br/>\n\n  \n  <br/>\n\n  "
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenQueryResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenQuery-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenQuery-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Query specimen",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/actions/importDataFromFile": {
      "post": {
        "operationId": "specimenImportDataFromFile",
        "parameters": [
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "causeOfDeathTypes",
                  "curatorialTaxon",
                  "establishmentMeansTypes",
                  "featureTypes",
                  "identifierTypes",
                  "normalizedAgents",
                  "physicalObjects",
                  "places",
                  "preparationTypes",
                  "resourceActivities",
                  "taxonNames",
                  "typeSpecimenType"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenImportDataFromFileResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenImportDataFromFile-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenImportDataFromFile-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource specimen",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/normalizedAgents": {
      "get": {
        "operationId": "specimenGetRelationshipNormalizedAgents",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipNormalizedAgentsResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipNormalizedAgents-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipNormalizedAgents-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipNormalizedAgents-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> normalizedAgents",
        "tags": [
          "specimenService"
        ]
      },
      "patch": {
        "operationId": "specimenUpdateRelationshipNormalizedAgents",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenUpdateRelationshipNormalizedAgentsRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipNormalizedAgentsResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipNormalizedAgents-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipNormalizedAgents-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipNormalizedAgents-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> normalizedAgents",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/causeOfDeathTypes": {
      "get": {
        "operationId": "specimenGetRelationshipCauseOfDeathTypes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipCauseOfDeathTypesResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipCauseOfDeathTypes-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipCauseOfDeathTypes-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipCauseOfDeathTypes-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> causeOfDeathTypes",
        "tags": [
          "specimenService"
        ]
      },
      "patch": {
        "operationId": "specimenUpdateRelationshipCauseOfDeathTypes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenUpdateRelationshipCauseOfDeathTypesRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipCauseOfDeathTypesResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipCauseOfDeathTypes-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipCauseOfDeathTypes-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipCauseOfDeathTypes-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> causeOfDeathTypes",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/curatorialTaxon": {
      "get": {
        "operationId": "specimenGetRelationshipCuratorialTaxon",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipCuratorialTaxonResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipCuratorialTaxon-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipCuratorialTaxon-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipCuratorialTaxon-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> curatorialTaxon",
        "tags": [
          "specimenService"
        ]
      },
      "patch": {
        "operationId": "specimenUpdateRelationshipCuratorialTaxon",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenUpdateRelationshipCuratorialTaxonRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipCuratorialTaxonResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipCuratorialTaxon-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipCuratorialTaxon-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipCuratorialTaxon-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> curatorialTaxon",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/establishmentMeansTypes": {
      "get": {
        "operationId": "specimenGetRelationshipEstablishmentMeansTypes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipEstablishmentMeansTypesResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipEstablishmentMeansTypes-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipEstablishmentMeansTypes-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipEstablishmentMeansTypes-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> establishmentMeansTypes",
        "tags": [
          "specimenService"
        ]
      },
      "patch": {
        "operationId": "specimenUpdateRelationshipEstablishmentMeansTypes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenUpdateRelationshipEstablishmentMeansTypesRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipEstablishmentMeansTypesResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipEstablishmentMeansTypes-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipEstablishmentMeansTypes-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipEstablishmentMeansTypes-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> establishmentMeansTypes",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/featureTypes": {
      "get": {
        "operationId": "specimenGetRelationshipFeatureTypes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipFeatureTypesResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipFeatureTypes-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipFeatureTypes-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipFeatureTypes-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> featureTypes",
        "tags": [
          "specimenService"
        ]
      },
      "patch": {
        "operationId": "specimenUpdateRelationshipFeatureTypes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenUpdateRelationshipFeatureTypesRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipFeatureTypesResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipFeatureTypes-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipFeatureTypes-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipFeatureTypes-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> featureTypes",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/identifierTypes": {
      "get": {
        "operationId": "specimenGetRelationshipIdentifierTypes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipIdentifierTypesResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipIdentifierTypes-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipIdentifierTypes-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipIdentifierTypes-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> identifierTypes",
        "tags": [
          "specimenService"
        ]
      },
      "patch": {
        "operationId": "specimenUpdateRelationshipIdentifierTypes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenUpdateRelationshipIdentifierTypesRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipIdentifierTypesResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipIdentifierTypes-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipIdentifierTypes-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipIdentifierTypes-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> identifierTypes",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/physicalObjects": {
      "get": {
        "operationId": "specimenGetRelationshipPhysicalObjects",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipPhysicalObjectsResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipPhysicalObjects-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipPhysicalObjects-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipPhysicalObjects-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> physicalObjects",
        "tags": [
          "specimenService"
        ]
      },
      "patch": {
        "operationId": "specimenUpdateRelationshipPhysicalObjects",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenUpdateRelationshipPhysicalObjectsRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipPhysicalObjectsResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipPhysicalObjects-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipPhysicalObjects-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipPhysicalObjects-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> physicalObjects",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/places": {
      "get": {
        "operationId": "specimenGetRelationshipPlaces",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipPlacesResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipPlaces-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipPlaces-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipPlaces-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> places",
        "tags": [
          "specimenService"
        ]
      },
      "patch": {
        "operationId": "specimenUpdateRelationshipPlaces",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenUpdateRelationshipPlacesRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipPlacesResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipPlaces-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipPlaces-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipPlaces-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> places",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/preparationTypes": {
      "get": {
        "operationId": "specimenGetRelationshipPreparationTypes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipPreparationTypesResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipPreparationTypes-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipPreparationTypes-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipPreparationTypes-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> preparationTypes",
        "tags": [
          "specimenService"
        ]
      },
      "patch": {
        "operationId": "specimenUpdateRelationshipPreparationTypes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenUpdateRelationshipPreparationTypesRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipPreparationTypesResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipPreparationTypes-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipPreparationTypes-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipPreparationTypes-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> preparationTypes",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/taxonNames": {
      "get": {
        "operationId": "specimenGetRelationshipTaxonNames",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipTaxonNamesResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipTaxonNames-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipTaxonNames-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipTaxonNames-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> taxonNames",
        "tags": [
          "specimenService"
        ]
      },
      "patch": {
        "operationId": "specimenUpdateRelationshipTaxonNames",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenUpdateRelationshipTaxonNamesRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipTaxonNamesResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipTaxonNames-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipTaxonNames-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipTaxonNames-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> taxonNames",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/api/specimen/v01/specimens/{id}/relationships/typeSpecimenType": {
      "get": {
        "operationId": "specimenGetRelationshipTypeSpecimenType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipTypeSpecimenTypeResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipTypeSpecimenType-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipTypeSpecimenType-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenGetRelationshipTypeSpecimenType-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find specimen -> typeSpecimenType",
        "tags": [
          "specimenService"
        ]
      },
      "patch": {
        "operationId": "specimenUpdateRelationshipTypeSpecimenType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "specimen id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/specimenUpdateRelationshipTypeSpecimenTypeRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipTypeSpecimenTypeResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipTypeSpecimenType-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipTypeSpecimenType-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/specimenUpdateRelationshipTypeSpecimenType-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update specimen -> typeSpecimenType",
        "tags": [
          "specimenService"
        ]
      }
    },
    "/status": {
      "get": {
        "operationId": "getStatus",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/getStatusResponse"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "statusService"
        ]
      }
    },
    "/api/storage/v01/physicalObjects": {
      "post": {
        "operationId": "physicalObjectCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/physicalObjectCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create physicalObject",
        "tags": [
          "storageService"
        ]
      },
      "get": {
        "operationId": "physicalObjectGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "specimens",
                  "storageLocation"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalObjects",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/physicalObjects/{id}": {
      "get": {
        "operationId": "physicalObjectGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "specimens",
                  "storageLocation"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalObject by id",
        "tags": [
          "storageService"
        ]
      },
      "patch": {
        "operationId": "physicalObjectUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/physicalObjectUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates physicalObject",
        "tags": [
          "storageService"
        ]
      },
      "delete": {
        "operationId": "physicalObjectDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes physicalObject",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/physicalObjects/{id}/relationships/specimens": {
      "get": {
        "operationId": "physicalObjectGetRelationshipSpecimens",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetRelationshipSpecimensResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetRelationshipSpecimens-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetRelationshipSpecimens-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetRelationshipSpecimens-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalObject -> specimens",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/physicalObjects/{id}/relationships/storageLocation": {
      "get": {
        "operationId": "physicalObjectGetRelationshipStorageLocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetRelationshipStorageLocationResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetRelationshipStorageLocation-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetRelationshipStorageLocation-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectGetRelationshipStorageLocation-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find physicalObject -> storageLocation",
        "tags": [
          "storageService"
        ]
      },
      "patch": {
        "operationId": "physicalObjectUpdateRelationshipStorageLocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "physicalObject id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/physicalObjectUpdateRelationshipStorageLocationRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdateRelationshipStorageLocationResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdateRelationshipStorageLocation-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdateRelationshipStorageLocation-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/physicalObjectUpdateRelationshipStorageLocation-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update physicalObject -> storageLocation",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/storageLocations": {
      "post": {
        "operationId": "storageLocationCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/storageLocationCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create storageLocation",
        "tags": [
          "storageService"
        ]
      },
      "get": {
        "operationId": "storageLocationGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "children",
                  "parent",
                  "physicalObjects",
                  "preparationTypes",
                  "resourceActivities",
                  "taxa"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[ancestorsToId]",
            "description": "Find ancestors to resource with provided id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[group]",
            "description": "Filter by group",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[id]",
            "description": "Filter by id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[nameSearch]",
            "description": "Filter by string search, example swe",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[nodesWithCircularDependencies]",
            "description": "Find nodes with circularDependencies",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[parentId]",
            "description": "Filter by parentId, example 123",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[taxon]",
            "description": "taxon id used to filter storageLocation",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance",
                  "id:asc",
                  "id:desc",
                  "attributes.name:asc",
                  "attributes.name:desc"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find storageLocations",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/storageLocations/{id}": {
      "get": {
        "operationId": "storageLocationGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "children",
                  "parent",
                  "physicalObjects",
                  "preparationTypes",
                  "resourceActivities",
                  "taxa"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find storageLocation by id",
        "tags": [
          "storageService"
        ]
      },
      "patch": {
        "operationId": "storageLocationUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/storageLocationUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates storageLocation",
        "tags": [
          "storageService"
        ]
      },
      "delete": {
        "operationId": "storageLocationDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes storageLocation",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/storageLocations/actions/query": {
      "post": {
        "operationId": "storageLocationQuery",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/storageLocationQueryRequest"
              }
            }
          },
          "description": "\n  \n**Available filter functions:**\n***\n<br/>\n\n ***ancestorsToId*** <br/> Find ancestors to resource with provided id <br/> <br/>  ***group*** <br/> Filter by group <br/> <br/>  ***id*** <br/> Filter by id <br/> <br/>  ***ids*** <br/> Filter by ids <br/> <br/>  ***nameSearch*** <br/> Filter by string search, example swe <br/> <br/>  ***nodesWithCircularDependencies*** <br/> Find nodes with circularDependencies <br/> <br/>  ***parentId*** <br/> Filter by parentId, example 123 <br/> <br/>  ***updatedAfter*** <br/> Filter by updatedAt after specificed timestamp <br/> <br/>  ***taxon*** <br/> taxon id used to filter storageLocation <br/>\n\n  \n  <br/>\n\n  "
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationQueryResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationQuery-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationQuery-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Query storageLocation",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/storageLocations/actions/importDataFromFile": {
      "post": {
        "operationId": "storageLocationImportDataFromFile",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationImportDataFromFileResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationImportDataFromFile-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationImportDataFromFile-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource storageLocation",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/storageLocations/{id}/relationships/children": {
      "get": {
        "operationId": "storageLocationGetRelationshipChildren",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationshipChildrenResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationshipChildren-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationshipChildren-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationshipChildren-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find storageLocation -> children",
        "tags": [
          "storageService"
        ]
      },
      "patch": {
        "description": "NOTE: Use endpoint with operationId \"storageLocationUpdateRelationshipParent\" instead. This endpoint is not active.",
        "operationId": "storageLocationUpdateRelationshipChildren",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/storageLocationUpdateRelationshipChildrenRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationshipChildrenResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationshipChildren-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationshipChildren-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationshipChildren-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update storageLocation -> children",
        "tags": [
          "storageService"
        ],
        "x-inverseOperationId": "storageLocationUpdateRelationshipParent"
      }
    },
    "/api/storage/v01/storageLocations/{id}/relationships/parent": {
      "get": {
        "operationId": "storageLocationGetRelationshipParent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationshipParentResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationshipParent-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationshipParent-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationshipParent-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find storageLocation -> parent",
        "tags": [
          "storageService"
        ]
      },
      "patch": {
        "operationId": "storageLocationUpdateRelationshipParent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/storageLocationUpdateRelationshipParentRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationshipParentResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationshipParent-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationshipParent-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationshipParent-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update storageLocation -> parent",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/storage/v01/storageLocations/{id}/relationships/physicalObjects": {
      "get": {
        "operationId": "storageLocationGetRelationshipPhysicalObjects",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationshipPhysicalObjectsResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationshipPhysicalObjects-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationshipPhysicalObjects-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationshipPhysicalObjects-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find storageLocation -> physicalObjects",
        "tags": [
          "storageService"
        ]
      },
      "patch": {
        "description": "NOTE: Use endpoint with operationId \"physicalObjectUpdateRelationshipStorageLocation\" instead. This endpoint is not active.",
        "operationId": "storageLocationUpdateRelationshipPhysicalObjects",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/storageLocationUpdateRelationshipPhysicalObjectsRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationshipPhysicalObjectsResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationshipPhysicalObjects-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationshipPhysicalObjects-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationUpdateRelationshipPhysicalObjects-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update storageLocation -> physicalObjects",
        "tags": [
          "storageService"
        ],
        "x-inverseOperationId": "physicalObjectUpdateRelationshipStorageLocation"
      }
    },
    "/api/storage/v01/storageLocations/{id}/relationships/taxa": {
      "get": {
        "operationId": "storageLocationGetRelationshipTaxa",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "storageLocation id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationshipTaxaResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationshipTaxa-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationshipTaxa-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocationGetRelationshipTaxa-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find storageLocation -> taxa",
        "tags": [
          "storageService"
        ]
      }
    },
    "/api/taxonomy/v01/taxa": {
      "post": {
        "operationId": "taxonCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create taxon",
        "tags": [
          "taxonomyService"
        ]
      },
      "get": {
        "operationId": "taxonGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "acceptedTaxonName",
                  "children",
                  "parent",
                  "resourceActivities",
                  "specimens",
                  "storageLocations",
                  "synonyms",
                  "vernacularNames"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[ancestorsToId]",
            "description": "Find ancestors to resource with provided id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[group]",
            "description": "Filter by group",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[id]",
            "description": "Filter by id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[name]",
            "description": "Filter by name match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[nodesWithCircularDependencies]",
            "description": "Find nodes with circularDependencies",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[parentId]",
            "description": "Filter by parentId, example 123",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[nameRank]",
            "description": "Search taxon by accepted name rank",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[nameSearch]",
            "description": "Search taxon by acceptedName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[vernacularNameSearch]",
            "description": "Search taxon by vernacular name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxa",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxa/{id}": {
      "get": {
        "operationId": "taxonGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "acceptedTaxonName",
                  "children",
                  "parent",
                  "resourceActivities",
                  "specimens",
                  "storageLocations",
                  "synonyms",
                  "vernacularNames"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxon by id",
        "tags": [
          "taxonomyService"
        ]
      },
      "patch": {
        "operationId": "taxonUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates taxon",
        "tags": [
          "taxonomyService"
        ]
      },
      "delete": {
        "operationId": "taxonDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes taxon",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxa/actions/query": {
      "post": {
        "operationId": "taxonQuery",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonQueryRequest"
              }
            }
          },
          "description": "\n  \n**Available filter functions:**\n***\n<br/>\n\n ***id*** <br/> Filter by id <br/> <br/>  ***ids*** <br/> Filter by ids <br/> <br/>  ***updatedAfter*** <br/> Filter by updatedAt after specificed timestamp <br/> <br/>  ***parentId*** <br/> Filter by parentId, example 123 <br/> <br/>  ***group*** <br/> Filter by group <br/> <br/>  ***name*** <br/> Filter by name match <br/> <br/>  ***nameRank*** <br/> Search taxon by accepted name rank <br/> <br/>  ***nameSearch*** <br/> Search taxon by acceptedName <br/> <br/>  ***vernacularNameSearch*** <br/> Search taxon by vernacular name <br/>\n\n  \n  <br/>\n\n  "
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonQueryResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonQuery-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonQuery-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Query taxon",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxa/{id}/relationships/parent": {
      "get": {
        "operationId": "taxonGetRelationshipParent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipParentResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipParent-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipParent-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipParent-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxon -> parent",
        "tags": [
          "taxonomyService"
        ]
      },
      "patch": {
        "operationId": "taxonUpdateRelationshipParent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonUpdateRelationshipParentRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipParentResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipParent-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipParent-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipParent-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update taxon -> parent",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxa/actions/importDataFromFile": {
      "post": {
        "operationId": "taxonImportDataFromFile",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonImportDataFromFileResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonImportDataFromFile-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonImportDataFromFile-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource taxon",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxa/{id}/relationships/children": {
      "get": {
        "operationId": "taxonGetRelationshipChildren",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipChildrenResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipChildren-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipChildren-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipChildren-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxon -> children",
        "tags": [
          "taxonomyService"
        ]
      },
      "patch": {
        "description": "NOTE: Use endpoint with operationId \"taxonUpdateRelationshipParent\" instead. This endpoint is not active.",
        "operationId": "taxonUpdateRelationshipChildren",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonUpdateRelationshipChildrenRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipChildrenResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipChildren-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipChildren-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipChildren-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update taxon -> children",
        "tags": [
          "taxonomyService"
        ],
        "x-inverseOperationId": "taxonUpdateRelationshipParent"
      }
    },
    "/api/taxonomy/v01/taxa/{id}/relationships/acceptedTaxonName": {
      "get": {
        "operationId": "taxonGetRelationshipAcceptedTaxonName",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipAcceptedTaxonNameResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipAcceptedTaxonName-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipAcceptedTaxonName-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipAcceptedTaxonName-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxon -> acceptedTaxonName",
        "tags": [
          "taxonomyService"
        ]
      },
      "patch": {
        "description": "NOTE: Use endpoint with operationId \"taxonNameUpdateRelationshipAcceptedToTaxon\" instead. This endpoint is not active.",
        "operationId": "taxonUpdateRelationshipAcceptedTaxonName",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonUpdateRelationshipAcceptedTaxonNameRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipAcceptedTaxonNameResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipAcceptedTaxonName-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipAcceptedTaxonName-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipAcceptedTaxonName-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update taxon -> acceptedTaxonName",
        "tags": [
          "taxonomyService"
        ],
        "x-inverseOperationId": "taxonNameUpdateRelationshipAcceptedToTaxon"
      }
    },
    "/api/taxonomy/v01/taxa/{id}/relationships/specimens": {
      "get": {
        "operationId": "taxonGetRelationshipSpecimens",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipSpecimensResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipSpecimens-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipSpecimens-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipSpecimens-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxon -> specimens",
        "tags": [
          "taxonomyService"
        ]
      },
      "patch": {
        "description": "NOTE: Use endpoint with operationId \"specimenUpdateRelationshipCuratorialTaxon\" instead. This endpoint is not active.",
        "operationId": "taxonUpdateRelationshipSpecimens",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonUpdateRelationshipSpecimensRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipSpecimensResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipSpecimens-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipSpecimens-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipSpecimens-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update taxon -> specimens",
        "tags": [
          "taxonomyService"
        ],
        "x-inverseOperationId": "specimenUpdateRelationshipCuratorialTaxon"
      }
    },
    "/api/taxonomy/v01/taxa/{id}/relationships/storageLocations": {
      "get": {
        "operationId": "taxonGetRelationshipStorageLocations",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipStorageLocationsResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipStorageLocations-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipStorageLocations-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipStorageLocations-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxon -> storageLocations",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxa/{id}/relationships/synonyms": {
      "get": {
        "operationId": "taxonGetRelationshipSynonyms",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipSynonymsResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipSynonyms-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipSynonyms-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipSynonyms-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxon -> synonyms",
        "tags": [
          "taxonomyService"
        ]
      },
      "patch": {
        "description": "NOTE: Use endpoint with operationId \"taxonNameUpdateRelationshipSynonymToTaxon\" instead. This endpoint is not active.",
        "operationId": "taxonUpdateRelationshipSynonyms",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonUpdateRelationshipSynonymsRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipSynonymsResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipSynonyms-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipSynonyms-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipSynonyms-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update taxon -> synonyms",
        "tags": [
          "taxonomyService"
        ],
        "x-inverseOperationId": "taxonNameUpdateRelationshipSynonymToTaxon"
      }
    },
    "/api/taxonomy/v01/taxa/{id}/relationships/vernacularNames": {
      "get": {
        "operationId": "taxonGetRelationshipVernacularNames",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipVernacularNamesResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipVernacularNames-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipVernacularNames-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonGetRelationshipVernacularNames-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxon -> vernacularNames",
        "tags": [
          "taxonomyService"
        ]
      },
      "patch": {
        "description": "NOTE: Use endpoint with operationId \"taxonNameUpdateRelationshipVernacularToTaxon\" instead. This endpoint is not active.",
        "operationId": "taxonUpdateRelationshipVernacularNames",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxon id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonUpdateRelationshipVernacularNamesRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipVernacularNamesResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipVernacularNames-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipVernacularNames-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonUpdateRelationshipVernacularNames-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update taxon -> vernacularNames",
        "tags": [
          "taxonomyService"
        ],
        "x-inverseOperationId": "taxonNameUpdateRelationshipVernacularToTaxon"
      }
    },
    "/api/taxonomy/v01/taxonNames": {
      "post": {
        "operationId": "taxonNameCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonNameCreateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameCreateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameCreate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameCreate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create taxonName",
        "tags": [
          "taxonomyService"
        ]
      },
      "get": {
        "operationId": "taxonNameGetMany",
        "parameters": [
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "acceptedToTaxon",
                  "resourceActivities",
                  "synonymToTaxon",
                  "vernacularToTaxon"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[id]",
            "description": "Filter by id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[ids]",
            "description": "Filter by ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[nameSearch]",
            "description": "Filter by string search, example swe",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[acceptedToTaxonId]",
            "description": "Find taxon names that are accepted to taxon id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[isAcceptedToTaxon]",
            "description": "Find taxon names that are accepted to any taxon",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[isVernacularToTaxon]",
            "description": "Find taxon names that are venacular to any taxon",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[neitherAcceptedNorSynonymToTaxon]",
            "description": "Find scientific names that are neither accepted nor synonym to any taxon",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[rank]",
            "description": "Match for rank",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[rubinNumber]",
            "description": "Match for rubinNumber",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[synonymToTaxonId]",
            "description": "Find taxon names that are synonym to taxon id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter[taxonNameType]",
            "description": "Match for taxonNameType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Offset the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by one or more of available fields",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "relevance",
                  "id:asc",
                  "id:desc",
                  "attributes.name:asc",
                  "attributes.name:desc"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetManyResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetMany-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetMany-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxonNames",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxonNames/{id}": {
      "get": {
        "operationId": "taxonNameGetOne",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxonName id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "relationships",
            "description": "Relationships to add to the response. Add 0 or many",
            "schema": {
              "items": {
                "enum": [
                  "all",
                  "acceptedToTaxon",
                  "resourceActivities",
                  "synonymToTaxon",
                  "vernacularToTaxon"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "includeDeactivated",
            "description": "Will include deactivated items",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter[updatedAfter]",
            "description": "Filter by updatedAt after specificed timestamp",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mock",
            "description": "Will return mock data",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "exampleId",
            "description": "Set to return a specific example. If example dont exist 404 will be returned. Only active when combined with mock parameter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetOneResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetOne-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetOne-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetOne-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxonName by id",
        "tags": [
          "taxonomyService"
        ]
      },
      "patch": {
        "operationId": "taxonNameUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxonName id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonNameUpdateRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdate-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdate-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdate-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Updates taxonName",
        "tags": [
          "taxonomyService"
        ]
      },
      "delete": {
        "operationId": "taxonNameDel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxonName id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameDelResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameDel-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameDel-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameDel-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameDel-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Deletes taxonName",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxonNames/actions/query": {
      "post": {
        "operationId": "taxonNameQuery",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonNameQueryRequest"
              }
            }
          },
          "description": "\n  \n**Available filter functions:**\n***\n<br/>\n\n ***id*** <br/> Filter by id <br/> <br/>  ***ids*** <br/> Filter by ids <br/> <br/>  ***updatedAfter*** <br/> Filter by updatedAt after specificed timestamp <br/> <br/>  ***nameSearch*** <br/> Filter by string search, example swe <br/> <br/>  ***acceptedToTaxonId*** <br/> Find taxon names that are accepted to taxon id <br/> <br/>  ***isAcceptedToTaxon*** <br/> Find taxon names that are accepted to any taxon <br/> <br/>  ***isVernacularToTaxon*** <br/> Find taxon names that are venacular to any taxon <br/> <br/>  ***neitherAcceptedNorSynonymToTaxon*** <br/> Find scientific names that are neither accepted nor synonym to any taxon <br/> <br/>  ***rank*** <br/> Match for rank <br/> <br/>  ***rubinNumber*** <br/> Match for rubinNumber <br/> <br/>  ***synonymToTaxonId*** <br/> Find taxon names that are synonym to taxon id <br/> <br/>  ***taxonNameType*** <br/> Match for taxonNameType <br/>\n\n  \n  <br/>\n\n  "
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameQueryResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameQuery-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameQuery-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Query taxonName",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxonNames/{id}/relationships/acceptedToTaxon": {
      "get": {
        "operationId": "taxonNameGetRelationshipAcceptedToTaxon",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxonName id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetRelationshipAcceptedToTaxonResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetRelationshipAcceptedToTaxon-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetRelationshipAcceptedToTaxon-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetRelationshipAcceptedToTaxon-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxonName -> acceptedToTaxon",
        "tags": [
          "taxonomyService"
        ]
      },
      "patch": {
        "operationId": "taxonNameUpdateRelationshipAcceptedToTaxon",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxonName id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonNameUpdateRelationshipAcceptedToTaxonRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationshipAcceptedToTaxonResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationshipAcceptedToTaxon-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationshipAcceptedToTaxon-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationshipAcceptedToTaxon-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update taxonName -> acceptedToTaxon",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxonNames/actions/importDataFromFile": {
      "post": {
        "operationId": "taxonNameImportDataFromFile",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Limit the result",
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameImportDataFromFileResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "403": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameImportDataFromFile-403"
                }
              }
            },
            "description": "Error: 403"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameImportDataFromFile-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Rebuild view for resource taxonName",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxonNames/{id}/relationships/synonymToTaxon": {
      "get": {
        "operationId": "taxonNameGetRelationshipSynonymToTaxon",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxonName id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetRelationshipSynonymToTaxonResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetRelationshipSynonymToTaxon-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetRelationshipSynonymToTaxon-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetRelationshipSynonymToTaxon-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxonName -> synonymToTaxon",
        "tags": [
          "taxonomyService"
        ]
      },
      "patch": {
        "operationId": "taxonNameUpdateRelationshipSynonymToTaxon",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxonName id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonNameUpdateRelationshipSynonymToTaxonRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationshipSynonymToTaxonResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationshipSynonymToTaxon-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationshipSynonymToTaxon-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationshipSynonymToTaxon-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update taxonName -> synonymToTaxon",
        "tags": [
          "taxonomyService"
        ]
      }
    },
    "/api/taxonomy/v01/taxonNames/{id}/relationships/vernacularToTaxon": {
      "get": {
        "operationId": "taxonNameGetRelationshipVernacularToTaxon",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxonName id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetRelationshipVernacularToTaxonResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetRelationshipVernacularToTaxon-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetRelationshipVernacularToTaxon-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameGetRelationshipVernacularToTaxon-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find taxonName -> vernacularToTaxon",
        "tags": [
          "taxonomyService"
        ]
      },
      "patch": {
        "operationId": "taxonNameUpdateRelationshipVernacularToTaxon",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "taxonName id",
            "example": "1",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/taxonNameUpdateRelationshipVernacularToTaxonRequest"
              }
            }
          },
          "description": "successful operation"
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationshipVernacularToTaxonResponse"
                }
              }
            },
            "description": "successful operation"
          },
          "400": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationshipVernacularToTaxon-400"
                }
              }
            },
            "description": "Error: 400"
          },
          "404": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationshipVernacularToTaxon-404"
                }
              }
            },
            "description": "Error: 404"
          },
          "500": {
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/taxonNameUpdateRelationshipVernacularToTaxon-500"
                }
              }
            },
            "description": "Error: 500"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update taxonName -> vernacularToTaxon",
        "tags": [
          "taxonomyService"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "400": {
        "description": "Bad Request",
        "example": "400",
        "title": "400",
        "type": "integer"
      },
      "403": {
        "description": "Forbidden",
        "example": "403",
        "title": "403",
        "type": "integer"
      },
      "404": {
        "description": "Not Found",
        "example": "404",
        "title": "404",
        "type": "integer"
      },
      "500": {
        "description": "Internal Server Error",
        "example": "500",
        "title": "500",
        "type": "integer"
      },
      "affiliation": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "x-summary": ""
          }
        },
        "x-category": "agentService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "normalizedAgent": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "x-summary": ""
          },
          "deactivatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "givenName": {
            "type": "string",
            "x-summary": ""
          },
          "familyName": {
            "type": "string",
            "x-summary": ""
          },
          "fullName": {
            "type": "string",
            "x-summary": ""
          },
          "additionalName": {
            "type": "string",
            "x-summary": ""
          },
          "abbreviation": {
            "type": "string",
            "x-summary": ""
          },
          "alsoKnownAs": {
            "type": "string",
            "x-summary": ""
          },
          "disambiguatingDescription": {
            "type": "string",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "x-summary": ""
          },
          "city": {
            "type": "string",
            "x-summary": ""
          },
          "country": {
            "type": "string",
            "x-summary": ""
          },
          "postalCode": {
            "type": "string",
            "x-summary": ""
          },
          "postOfficeBoxNumber": {
            "type": "string",
            "x-summary": ""
          },
          "legacyData": {
            "$ref": "#/components/schemas/legacyData",
            "x-summary": ""
          },
          "streetAddress": {
            "type": "string",
            "x-summary": ""
          },
          "stateProvince": {
            "type": "string",
            "x-summary": ""
          },
          "telephone": {
            "type": "string",
            "x-summary": ""
          },
          "email": {
            "type": "string",
            "x-summary": ""
          },
          "lifespan": {
            "$ref": "#/components/schemas/dateRange",
            "x-summary": ""
          },
          "agentType": {
            "type": "string",
            "enum": [
              "person",
              "organization",
              "other",
              "unknown"
            ],
            "x-summary": ""
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/role"
            },
            "x-summary": ""
          },
          "title": {
            "type": "string",
            "x-summary": ""
          },
          "readOnly": {
            "$ref": "#/components/schemas/readOnly",
            "x-summary": ""
          },
          "resourceActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "user": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          }
        },
        "x-category": "agentService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "role": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "x-summary": ""
          },
          "dateRange": {
            "$ref": "#/components/schemas/dateRange",
            "x-summary": ""
          },
          "affiliation": {
            "$ref": "#/components/schemas/affiliation",
            "x-summary": ""
          }
        },
        "x-category": "agentService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "user": {
        "additionalProperties": false,
        "properties": {
          "normalizedAgents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "id": {
            "type": "string",
            "x-summary": ""
          },
          "email": {
            "type": "string",
            "x-summary": ""
          },
          "username": {
            "type": "string",
            "x-summary": ""
          }
        },
        "x-category": "authService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "agent": {
        "additionalProperties": false,
        "properties": {
          "normalized": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          },
          "textI": {
            "description": "Interpreted text",
            "type": "string",
            "x-summary": ""
          },
          "textV": {
            "description": "Verbatim text",
            "type": "string",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "x-summary": ""
          }
        },
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "customObject": {
        "additionalProperties": true,
        "description": "A model to be used until proper concept is defined",
        "type": "object",
        "properties": {},
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "datePart": {
        "additionalProperties": false,
        "description": "A date part",
        "properties": {
          "timestamp": {
            "description": "A date in standard format. TBA",
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "interpretedTimestamp": {
            "description": "A date in standard format, derived from day, month year.",
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "dateText": {
            "type": "string",
            "example": "Before 1800",
            "x-summary": ""
          },
          "day": {
            "type": "integer",
            "x-summary": ""
          },
          "month": {
            "type": "integer",
            "x-summary": ""
          },
          "year": {
            "type": "integer",
            "x-summary": ""
          }
        },
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "dateRange": {
        "additionalProperties": false,
        "description": "A date range",
        "properties": {
          "dateText": {
            "type": "string",
            "example": "Before 1800",
            "x-summary": ""
          },
          "dateType": {
            "type": "string",
            "enum": [
              "latest",
              "openRange",
              "range",
              "single"
            ],
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "example": "Some remarks",
            "x-summary": ""
          },
          "startDate": {
            "$ref": "#/components/schemas/datePart",
            "x-summary": ""
          },
          "endDate": {
            "$ref": "#/components/schemas/datePart",
            "x-summary": ""
          }
        },
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "externalModelReference": {
        "additionalProperties": false,
        "description": "A reference to a model owned by another service",
        "properties": {
          "id": {
            "type": "string",
            "x-summary": ""
          },
          "lid": {
            "type": "string",
            "x-summary": ""
          },
          "type": {
            "type": "string",
            "x-summary": ""
          }
        },
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "id": {
        "additionalProperties": false,
        "description": "An identifier id",
        "type": "string",
        "properties": {},
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "legacyData": {
        "additionalProperties": true,
        "properties": {},
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "lid": {
        "additionalProperties": false,
        "description": "A local identifier lid (local id). Should be a uuid",
        "type": "string",
        "properties": {},
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "notDefinedModel": {
        "additionalProperties": true,
        "description": "A model to be used until proper concept is defined",
        "properties": {},
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "polygon": {
        "additionalProperties": false,
        "description": "### Definition\n\nTBA\n\n### Example(s)\n\nTBA\n\n\n\n",
        "properties": {
          "vertices": {
            "type": "array",
            "description": "Corners of the polygon in sane format",
            "x-summary": ""
          }
        },
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "position": {
        "additionalProperties": false,
        "description": "### Definition\n\nTBA\n\n### Example(s)\n\nTBA\n\n\n\n",
        "properties": {
          "latitude": {
            "type": "string",
            "description": "Latitude or northing. Prefixed with minus for coordinates on southern hemisphere.",
            "x-summary": ""
          },
          "longitude": {
            "type": "string",
            "description": "Longitude or easting. Prefixed with minus for coordinates on western hemisphere.",
            "x-summary": ""
          },
          "geodeticDatum": {
            "type": "string",
            "description": "Geodetic datum wip",
            "x-summary": ""
          },
          "uncertaintyInMeters": {
            "type": "integer",
            "description": "Coordinate uncertainty in meters",
            "x-summary": ""
          },
          "referenceSystem": {
            "type": "string",
            "description": "TBA",
            "x-summary": ""
          }
        },
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "queryAggregation": {
        "additionalProperties": true,
        "x-internal": true,
        "properties": {
          "aggregationFunction": {
            "type": "string",
            "x-summary": ""
          },
          "options": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "queryAnd": {
        "additionalProperties": true,
        "x-internal": true,
        "properties": {
          "items": {
            "$ref": "#/components/schemas/queryNode",
            "x-summary": ""
          }
        },
        "type": "array",
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "queryFilter": {
        "additionalProperties": true,
        "x-internal": true,
        "properties": {},
        "type": "object",
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "queryNode": {
        "additionalProperties": true,
        "x-internal": true,
        "properties": {
          "and": {
            "$ref": "#/components/schemas/queryAnd",
            "x-summary": ""
          },
          "or": {
            "$ref": "#/components/schemas/queryOr",
            "x-summary": ""
          },
          "filter": {
            "$ref": "#/components/schemas/queryFilter",
            "x-summary": ""
          }
        },
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "queryOr": {
        "additionalProperties": true,
        "x-internal": true,
        "properties": {
          "items": {
            "$ref": "#/components/schemas/queryNode",
            "x-summary": ""
          }
        },
        "type": "array",
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "queryRoot": {
        "additionalProperties": true,
        "x-internal": true,
        "properties": {
          "and": {
            "$ref": "#/components/schemas/queryAnd",
            "x-summary": ""
          },
          "or": {
            "$ref": "#/components/schemas/queryOr",
            "x-summary": ""
          },
          "filter": {
            "$ref": "#/components/schemas/queryFilter",
            "x-summary": ""
          }
        },
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "readOnly": {
        "additionalProperties": true,
        "properties": {},
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "translatedString": {
        "additionalProperties": false,
        "properties": {
          "en": {
            "type": "string",
            "x-summary": ""
          },
          "sv": {
            "type": "string",
            "x-summary": ""
          }
        },
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "type": {
        "additionalProperties": false,
        "description": "Resource type",
        "type": "string",
        "properties": {},
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "verticalPosition": {
        "additionalProperties": false,
        "description": "### Definition\n\nTBA\n\n### Example(s)\n\nTBA\n\n\n\n",
        "properties": {
          "maximumDepthInMeters": {
            "type": "integer",
            "description": "Max depth (m)",
            "x-summary": ""
          },
          "maximumElevationInMeters": {
            "type": "integer",
            "description": "Max elevation (m)",
            "x-summary": ""
          },
          "minimumDepthInMeters": {
            "type": "integer",
            "description": "Min depth (m)",
            "x-summary": ""
          },
          "minimumElevationInMeters": {
            "type": "integer",
            "description": "Min elevation (m)",
            "x-summary": ""
          }
        },
        "x-required": [
          "name",
          "id",
          "description",
          "type"
        ],
        "x-category": "core",
        "x-modelType": "model",
        "x-summary": ""
      },
      "causeOfDeathType": {
        "additionalProperties": false,
        "properties": {
          "deactivatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "key": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "$ref": "#/components/schemas/translatedString",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "customTaxonNameType": {
        "additionalProperties": false,
        "properties": {
          "deactivatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "key": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "$ref": "#/components/schemas/translatedString",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "establishmentMeansType": {
        "additionalProperties": false,
        "properties": {
          "deactivatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "key": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "$ref": "#/components/schemas/translatedString",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "featureType": {
        "additionalProperties": false,
        "properties": {
          "deactivatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "key": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "$ref": "#/components/schemas/translatedString",
            "x-summary": ""
          },
          "group": {
            "type": "string",
            "x-summary": ""
          },
          "selectableValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/selectableValue"
            },
            "x-summary": ""
          },
          "selectableUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/selectableUnit"
            },
            "x-summary": ""
          },
          "selectableMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/selectableMethod"
            },
            "x-summary": ""
          },
          "description": {
            "type": "string",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "description": "### Definition\n\nThe type of FeatureObservation. Will likely be a currated list\n\n### Example(s)\n\nSex\n",
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": ""
      },
      "identifierType": {
        "additionalProperties": false,
        "properties": {
          "deactivatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "$ref": "#/components/schemas/translatedString",
            "x-summary": ""
          },
          "key": {
            "type": "string",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "description": "# identifierType\n\nThe kind of [identifier](/docs/0.1.0-0.1.0/models/identifier/), for example \"catalog number\".\n\n\n### Definition\n\nThe kind of identifier.\n\n\n### Examples\n\n* \"catalog number\"\n* \"old skeleton number\"\n\n\n### Notes\n\nSome kinds of identifiers, like \"catalog number\", are predefined for the whole system whereas other are custom types defined for the collection (e.g. \"old skeleton number\").\n\n\n### See also\n\n[identifier](/docs/0.1.0-0.1.0/models/identifier/)",
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": "The kind of identifier."
      },
      "preparationType": {
        "additionalProperties": false,
        "properties": {
          "deactivatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          },
          "category": {
            "type": "string",
            "example": "skin",
            "x-summary": ""
          },
          "key": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "$ref": "#/components/schemas/translatedString",
            "x-summary": ""
          }
        },
        "description": "# preparationType\n\nThe kind of [physicalObject](/docs/0.1.0-0.1.0/models/physicalObject/) or [collectionItem](/docs/0.1.0-0.1.0/models/collectionItem/), for example \"study skin\", \"dried plant\", or \"microscope slide\".\n\n\n### Definition\n\nThe kind of [physicalObject](/docs/0.1.0-0.1.0/models/physicalObject/) or [collectionItem](/docs/0.1.0-0.1.0/models/collectionItem/).\n\n\n### Examples\n\n* Herbarium sheet (for a [physicalObject](/docs/0.1.0-0.1.0/models/physicalObject/))\n* A herbarium sheet with two [collectionItems](/docs/0.1.0-0.1.0/models/collectionItem/), a plant and an microscope slide attached to the sheet: preparationTypes are \"microscope slide\" and \"dried plant\"\n\n\n### Notes\n\nThe preparationType is defined within the context of the collection. In future we may want to tag preparation types with different properties, so that they can be understood outside the collection.",
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": "The kind of physicalUnit or collectionItem."
      },
      "selectableMethod": {
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "$ref": "#/components/schemas/translatedString",
            "x-summary": ""
          },
          "description": {
            "type": "string",
            "x-summary": ""
          },
          "methodType": {
            "type": "string",
            "x-summary": ""
          }
        },
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "selectableUnit": {
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "$ref": "#/components/schemas/translatedString",
            "x-summary": ""
          },
          "description": {
            "type": "string",
            "x-summary": ""
          },
          "unitType": {
            "type": "string",
            "x-summary": ""
          }
        },
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "selectableValue": {
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "$ref": "#/components/schemas/translatedString",
            "x-summary": ""
          },
          "description": {
            "type": "string",
            "x-summary": ""
          },
          "valueType": {
            "type": "string",
            "x-summary": ""
          }
        },
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "typeSpecimenType": {
        "additionalProperties": false,
        "properties": {
          "deactivatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "$ref": "#/components/schemas/translatedString",
            "x-summary": ""
          },
          "description": {
            "type": "string",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "key": {
            "type": "string",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "x-category": "curatedListService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "exportJob": {
        "additionalProperties": false,
        "description": "A model keeping track of exports",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "startedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "failedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "succeededAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "schemaVersion": {
            "type": "string",
            "x-summary": ""
          },
          "error": {
            "type": "string",
            "x-summary": ""
          },
          "resource": {
            "type": "string",
            "x-summary": ""
          },
          "exportIds": {
            "type": "array",
            "x-summary": ""
          },
          "exportFields": {
            "type": "array",
            "x-summary": ""
          },
          "userId": {
            "type": "string",
            "x-summary": ""
          },
          "requestId": {
            "type": "string",
            "x-summary": ""
          },
          "filePath": {
            "type": "string",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "x-category": "exportService",
        "x-modelType": "model",
        "x-summary": ""
      },
      "resourceActivity": {
        "additionalProperties": false,
        "description": "Representing resourceActivity",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "schemaVersion": {
            "type": "string",
            "x-summary": ""
          },
          "service": {
            "type": "string",
            "x-summary": ""
          },
          "resource": {
            "type": "string",
            "x-summary": ""
          },
          "resourceId": {
            "type": "string",
            "x-summary": ""
          },
          "action": {
            "type": "string",
            "x-summary": ""
          },
          "userId": {
            "type": "string",
            "x-summary": ""
          },
          "username": {
            "type": "string",
            "x-summary": ""
          },
          "requestId": {
            "type": "string",
            "x-summary": ""
          },
          "snapshot": {
            "type": "object",
            "x-summary": ""
          },
          "srcSchemaVersion": {
            "type": "string",
            "x-summary": ""
          },
          "diff": {
            "type": "array",
            "x-summary": ""
          },
          "srcCreatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "srcUpdatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "srcDeactivatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "sourceData": {
            "type": "object",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "x-category": "historyService",
        "x-modelType": "model",
        "x-summary": ""
      },
      "catalogNumber": {
        "additionalProperties": false,
        "description": "A model for catalogNumber",
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "identifier": {
            "type": "string",
            "x-summary": ""
          },
          "year": {
            "type": "number",
            "x-summary": ""
          },
          "number": {
            "type": "number",
            "x-summary": ""
          },
          "schemaVersion": {
            "type": "string",
            "x-summary": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "x-category": "identifierService",
        "x-modelType": "model",
        "x-summary": ""
      },
      "job": {
        "additionalProperties": false,
        "description": "A job model that should be further specified",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "name": {
            "$ref": "#/components/schemas/translatedString",
            "x-summary": ""
          },
          "startedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "failedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "succeededAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "error": {
            "type": "string",
            "x-summary": ""
          },
          "successMessage": {
            "type": "string",
            "x-summary": ""
          },
          "isStarted": {
            "type": "boolean",
            "x-summary": ""
          },
          "isCompleted": {
            "type": "boolean",
            "x-summary": ""
          },
          "isFailed": {
            "type": "boolean",
            "x-summary": ""
          },
          "isSucceeded": {
            "type": "boolean",
            "x-summary": ""
          },
          "operationId": {
            "type": "string",
            "x-summary": ""
          },
          "operationRequest": {
            "type": "object",
            "x-summary": ""
          },
          "startedBy": {
            "type": "boolean",
            "x-summary": ""
          },
          "initiatedBy": {
            "type": "boolean",
            "x-summary": ""
          },
          "schemaVersion": {
            "type": "string",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "x-category": "jobService",
        "x-modelType": "model",
        "x-summary": ""
      },
      "dataModelMigrationLog": {
        "additionalProperties": false,
        "description": "A job model that keep tracks of schema migrations",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "status": {
            "type": "string",
            "x-summary": ""
          },
          "dataModelVersion": {
            "type": "string",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          }
        },
        "x-category": "migrationService",
        "x-modelType": "model",
        "x-summary": ""
      },
      "place": {
        "additionalProperties": false,
        "properties": {
          "deactivatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "type": "string",
            "description": "Name of the locality",
            "x-summary": ""
          },
          "versionId": {
            "type": "string",
            "description": "Id of the specific version",
            "x-summary": ""
          },
          "createdAt": {
            "type": "string",
            "description": "Timestamp corresponding to when created",
            "x-summary": ""
          },
          "createdBy": {
            "type": "string",
            "description": "Some kind of reference to the individual that created the locality",
            "x-summary": ""
          },
          "updatedBy": {
            "type": "string",
            "description": "Some kind of reference to the individual that updated/created the specific version",
            "x-summary": ""
          },
          "updatedAt": {
            "type": "string",
            "description": "Timestamp corresponding to when updated. Could be called versionCreatedAt",
            "x-summary": ""
          },
          "description": {
            "type": "string",
            "description": "Description of the locality",
            "x-summary": ""
          },
          "group": {
            "type": "string",
            "description": "Group of locality",
            "enum": [
              "continentOcean",
              "country",
              "district",
              "geodeticDatum",
              "locality",
              "province",
              "root",
              "rubin"
            ],
            "x-summary": ""
          },
          "centralPosition": {
            "type": "object",
            "description": "A position describing the center",
            "$ref": "#/components/schemas/position",
            "x-summary": ""
          },
          "polygon": {
            "type": "object",
            "description": "A polygon describing the edges",
            "$ref": "#/components/schemas/polygon",
            "x-summary": ""
          },
          "verticalPosition": {
            "description": "A vertical position",
            "type": "object",
            "$ref": "#/components/schemas/verticalPosition",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          },
          "parent": {
            "type": "object",
            "description": "Parent place",
            "$ref": "#/components/schemas/place",
            "x-summary": ""
          },
          "children": {
            "type": "array",
            "description": "Children places",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "resourceActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          }
        },
        "description": "# place\n\nA defined place that has a name and is reusable, for example a country or a lake.\n\n\n### Definition\n\nA defined location with known, fixed extension in space.\n\n\n### Examples\n\n* A named location for a Malaise trap within an insect inventory project.\n\n\n### Notes\n\nPlaces can have relations to other places.\n\nNew name suggestion: \"location\" (motivation: \"place\" is usually understood as something less defined, or perhaps more informal).\n\n\n### See also\n\n[locationInformation](/docs/0.1.0-0.1.0/models/locationInformation/)",
        "x-category": "placeService",
        "x-modelType": "model",
        "x-summary": "A defined location with known, fixed extension in space."
      },
      "cachePhysicalObject": {
        "additionalProperties": true,
        "x-internal": true,
        "properties": {},
        "x-category": "searchService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "searchSpecimen": {
        "additionalProperties": true,
        "properties": {},
        "x-category": "searchService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "stageSpecimen": {
        "additionalProperties": true,
        "properties": {},
        "x-category": "searchService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "acquisition": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "handedInByAgent": {
            "$ref": "#/components/schemas/agent",
            "x-summary": ""
          },
          "acquisitionTypeText": {
            "type": "string",
            "x-summary": ""
          },
          "date": {
            "$ref": "#/components/schemas/dateRange",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "x-summary": ""
          }
        },
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "collectingInformation": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "establishmentMeansType": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          },
          "collectedByAgent": {
            "$ref": "#/components/schemas/agent",
            "x-summary": ""
          },
          "collectorsText": {
            "type": "string",
            "example": "Bergström, U",
            "description": "Name of the collector",
            "x-summary": ""
          },
          "isDeathDate": {
            "type": "boolean",
            "description": "This is a temporary parameter",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "x-summary": ""
          },
          "event": {
            "$ref": "#/components/schemas/event",
            "x-summary": ""
          }
        },
        "description": "# collectingInformation\n\nInformation about the collecting activity, like for example the name of a collector or the collecting method.\n\n\n### Definition\n\nInformation pertaining to the activity of collecting of some material.\n\n\n### Examples\n\nThe collecting method (e.g., the kind of trap) used for collecting some material.\n\n\n### Notes\n\nThe purpose of this term is to keep information that is specific for the collecting activity, for example collectors, collecting method, field number etc. The general description of the death event, like its time and location, should be recorded under [event](/docs/0.1.0-0.1.0/models/event/).\n\n\n### See also\n\n[event](/docs/0.1.0-0.1.0/models/event/)",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "Information about a collecting activity."
      },
      "collectionItem": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "alternateIdentifiersText": {
            "type": "string",
            "example": "Skin complete, prepared",
            "x-summary": ""
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identifier"
            },
            "x-summary": ""
          },
          "collectingInformation": {
            "$ref": "#/components/schemas/collectingInformation",
            "x-summary": ""
          },
          "curatorialAssessments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/curatorialAssessment"
            },
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "x-summary": ""
          },
          "description": {
            "type": "string",
            "x-summary": ""
          },
          "preparationType": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          },
          "physicalObjectText": {
            "type": "string",
            "example": "Skin complete, prepared",
            "x-summary": ""
          },
          "physicalObject": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          }
        },
        "description": "# collectionItem\n\nThe smallest recognized \"thing\" in the collection. This is usually a physical object but could also be a part of a physical object. For example, a moss and a lichen growing on the same piece of bark may be considered as two collection items.\n\n\n### Definition\n\nThe smallest recognized \"thing\" in the collection. This may be a physical object or part of a physical object.\n\n\n### Examples\n\n* A skin prepared from a squirrel.\n* One fish in a jar with five fishes.\n* All fishes in a jar with five fishes.\n* A moss and a lichen attached to the same piece of bark recognized as two collection items.\n\n\n### Notes\n\nThis term represents a fundamental unit in the management of the collection. The term is permissive on what to include in a collection item, just to make the model able to fit different use cases.\n\n\n### See also\n\n[physicalObject](/docs/0.1.0-0.1.0/models/physicalObject/)",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "The smallest recognized \"thing\" in the collection."
      },
      "curatorialAssessment": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "agent": {
            "$ref": "#/components/schemas/agent",
            "x-summary": ""
          },
          "date": {
            "$ref": "#/components/schemas/dateRange",
            "x-summary": ""
          },
          "condition": {
            "type": "string",
            "example": "Good",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "x-summary": ""
          },
          "isInStorage": {
            "type": "boolean",
            "x-summary": ""
          }
        },
        "description": "### Definition\n\nAssessment whether specimen is in storage or not found.\n\n### Example(s)\n\n* 2017-01-02 Jane Doe. Not found. On loan\n* 2016-10-11 John Doe. In storage. Good condition.\n",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": ""
      },
      "customTaxonName": {
        "additionalProperties": false,
        "properties": {
          "customTaxonNameType": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          },
          "language": {
            "type": "string",
            "example": "en",
            "x-summary": ""
          },
          "value": {
            "type": "string",
            "x-summary": ""
          }
        },
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "deathInformation": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "causeOfDeathType": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "x-summary": ""
          },
          "event": {
            "$ref": "#/components/schemas/event",
            "x-summary": ""
          }
        },
        "description": "# deathInformation\n\nInformation about the death of an [individual](/docs/0.1.0-0.1.0/models/individual/). Typical information involves the cause of death.\n\n\n### Definition\nInformation pertaining to the death circumstances of an [individual](/docs/0.1.0-0.1.0/models/individual/).\n\n\n### Notes\n\nThe purpose of this term is to keep information that has to do with the death of one or more individuals, for example a cause of the death. The general description of the death event, like its time and location, should be recorded under [event](/docs/0.1.0-0.1.0/models/event/).\n\n\n### See also\n\n[event](/docs/0.1.0-0.1.0/models/event/)",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "Information about the death of an individual."
      },
      "determination": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "example": "Some remarks",
            "x-summary": ""
          },
          "taxonNameV": {
            "type": "string",
            "description": "Verbatim taxon name, in exactly the same words as were used originally",
            "x-summary": ""
          },
          "taxonNameI": {
            "type": "string",
            "description": "Interpreted taxon name",
            "x-summary": ""
          },
          "determinedByAgent": {
            "$ref": "#/components/schemas/agent",
            "x-summary": ""
          },
          "date": {
            "$ref": "#/components/schemas/dateRange",
            "x-summary": ""
          }
        },
        "description": "# determination\n\nA determination is a statement about an [individual's](/docs/0.1.0-0.1.0/models/individual/) taxon and/or type status, made by a person at a certain date. The outcome of a determination is usually a taxon name.\n\n\n### Definition\n\nThe act of making a statement about an [individual's](/docs/0.1.0-0.1.0/models/individual/) taxon and/or type status, which is not itself a type status designation.\n\n\n### Examples\n\n\"Phoca hispida, det. by NN, 1957\"\n\n\n### Notes\n\nA *type status designation* is understood here as an explicit or implicit designation of a new type status for a specimen with respect to a taxon name. A type status designation is a nomenclatural act made through a publication and strictly regulated by a nomenclatural code. The type status designation is the primary source of a specimen's type status and should not be recorded as a determination. This is sometimes called \"verified type status\".\n\nA *type status identification* on the other hand is a secondary source for the type status, and is typically written on a label that is attached to a specimen. For a type status identification (as opposed to type status designation) it is fine to record any type status, even ones that are not sanctioned by the nomenclatural codes (e.g. \"topotype\" or \"allotype\"). Because of the similarities between type status identifications and taxonomic identifications, both are here been treated as determinations. In fact, if a taxon name is included in the type status identification, it may also be considered as an implicit taxonomic identification.\n\nThe outcome of the determination is in most cases a *taxon name* (that may be either scientific or vernacular). What *taxon* (i.e. taxon concept) the person intended with the determination is often difficult or even impossible to know, and has little relevance for collection management. It is usually sufficient to match the taxon name from the latest determination to the taxon concepts in the local classification currently used for the collection.\n\n\n### See also\n\n[taxonInformation](/docs/0.1.0-0.1.0/models/taxonInformation/), [individual.typeStatus](/docs/0.1.0-0.1.0/models/individual/typeStatus)",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "A statement about an individual's taxon and/or type status."
      },
      "event": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "dateRange": {
            "$ref": "#/components/schemas/dateRange",
            "x-summary": ""
          },
          "expeditionText": {
            "type": "string",
            "example": "Vega Expedition",
            "x-summary": ""
          },
          "locationInformation": {
            "$ref": "#/components/schemas/locationInformation",
            "x-summary": ""
          }
        },
        "description": "# Event\n\nAn activity or occurrence at a time and location, for example the collecting of some material.\n\n\n### Definition\n\nAn activity or occurrence at a particular time and location.\n\n\n### Examples\n\nAn event involving the collecting of some material.\n\n\n### Notes\n\nIf it is uncertain whether two specimens were collected at the same event (e.g., if there are different information sources), the information should be recorded as two separate events.\n\nAn event may have both collecting- and death information.\n\n\n### See also\n\n[collectingInformation](/docs/0.1.0-0.1.0/models/collectingInformation/), [deathInformation](/docs/0.1.0-0.1.0/models/deathInformation/), [originInformation](/docs/0.1.0-0.1.0/models/originInformation/)",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "An activity or occurrence at a time and location."
      },
      "featureObservation": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "featureObservationAgent": {
            "$ref": "#/components/schemas/agent",
            "x-summary": ""
          },
          "date": {
            "$ref": "#/components/schemas/dateRange",
            "x-summary": ""
          },
          "featureObservationText": {
            "type": "string",
            "example": "10 years",
            "x-summary": ""
          },
          "featureObservationUnit": {
            "type": "string",
            "example": "kg",
            "x-summary": ""
          },
          "featureType": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          },
          "methodText": {
            "type": "string",
            "example": "Known age",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "example": "According to catalog card",
            "x-summary": ""
          }
        },
        "description": "# featureObservation\n\nAn observation of some property, for example a measurement by a person or a machine at a particular time.\n\n\n### Definition\n\nThe data measured, collected, perceived or noticed for some property by an agent (e.g. a person or a machine).\n\n\n### Examples\n\n* When a curator measures the wingspan and the weight of a bird, this counts as two separate observations.\n* A curator observes the color of a specimen.\n\n\n### Notes\n\nThis term is currently used for features for an [individual](/docs/0.1.0-0.1.0/models/individual/) other than [taxonomical determinations](/docs/0.1.0-0.1.0/models/determination/) and is not used for [curatorialAssessments](/docs/0.1.0-0.1.0/models/curatorialAssessment/) that apply to [collectionItems](/docs/0.1.0-0.1.0/models/collectionItem/).\n\n\n### See also\n\n[featureType](/docs/0.1.0-0.1.0/models/featureType/), [curatorialAssessment](/docs/0.1.0-0.1.0/models/curatorialAssessment/), [determination](/docs/0.1.0-0.1.0/models/determination/)\n\n\n### Relation to other standards\n\n* DarwinCore: not assessed\n* ABCD:  not assessed",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "The data measured or noticed for some property by an agent."
      },
      "identifier": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "example": "Some remarks",
            "x-summary": ""
          },
          "identifierType": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          },
          "value": {
            "type": "string",
            "example": "584028",
            "x-summary": ""
          },
          "namespace": {
            "type": "string",
            "example": "mammal",
            "x-summary": ""
          },
          "validation": {
            "type": "string",
            "example": "^$|^[0-9]{6}$|^[0-9]{8}$",
            "x-summary": ""
          }
        },
        "description": "# identifier\n\nA string or number that identifies something, for example a [physicaObject](/docs/0.1.0-0.1.0/models/physicalObject/), an [individual](/docs/0.1.0-0.1.0/models/individual/) or an [event](/docs/0.1.0-0.1.0/models/event/). The catalog number is an example of an identifier for a specimen.\n\n\n### Definition\n\nA name that identifies (that is, labels the identity of) something.\n\n\n### Examples\n\n* The catalog number \"12345\"\n* Taxon name id \"9488-1\" (http://www.ipni.org/ipni/idPlantNameSearch.do?id=9488-1)\n* Part of a [physicaObject](/docs/0.1.0-0.1.0/models/physicalObject/) (i.e. a [collectionItem](/docs/0.1.0-0.1.0/models/collectionItem/)) labeled \"a\"\n\n\n### Notes\n\nIdentifiers are used for different purposes, for example for connecting information with an [individual](/docs/0.1.0-0.1.0/models/individual/) or for identifying a specimen. This term is used both for keeping record of official identifiers (like catalog numbers) and unofficial ones (like those for example found on handwritten labels attached to a specimen, or sometimes even written directly on the object).\n\n\n### See also\n\n[identifierType](/docs/0.1.0-0.1.0/models/identifierType/)",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "A string or number that identifies something."
      },
      "individual": {
        "additionalProperties": false,
        "description": "# individual\n\nOne or more specimens sharing a common history and individual characteristics, for example an organism, a group of organisms or a piece of mineral.\n\n\n## Definition\n\nOne or more individuals with a single set of individual characteristics.\n\n\n### Examples\n\n* A specific squirrel represented by both a skin and a tissue sample in a collection.\n* Three fishes in a jar of alcohol, coming from the same collecting event and representing the same taxon. The group of fishes may be treated as the individual.\n* A cluster of ammonite fossils in the same piece of rock.\n* A piece of mineral.\n\n\n### Notes\n\nIndividual is understood in a broad sense and should be applied within its context. Thus, it should be possible to talk about individuals in for example a mineralogical collection.\n\nThis term has two purposes:\n\n1. To keep information about the coherent unit that has a life history (or similar depending on the context) even when the unit is separated into smaller parts (as in the case where one preparation is stored separately from another).\n2. To allow individual traits (color, taxon, age, sex, etc.) to be applied to a group of specimens that are treated as one unit.\n\nYou should create new individuals when you need to capture differences. A mix of females and males can be treated as a single individual as long as you don't need to distinguish the two sexes. When you need to distinguish the sexes, you should create two individuals, one for each sex. If you need to describe additional differences (e.g. color, size etc.), you should probably create more individuals.\n\n\n### Relation to other standards\n\n* DarwinCore: [Organism](http://rs.tdwg.org/dwc/terms/Organism)\n* ABCD: not assessed\n",
        "properties": {
          "remarks": {
            "type": "string",
            "x-summary": ""
          },
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "acquisition": {
            "$ref": "#/components/schemas/acquisition",
            "x-summary": ""
          },
          "determinations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/determination"
            },
            "x-summary": ""
          },
          "taxonInformation": {
            "$ref": "#/components/schemas/taxonInformation",
            "x-summary": ""
          },
          "deathInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/deathInformation"
            },
            "x-summary": ""
          },
          "originInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/originInformation"
            },
            "x-summary": ""
          },
          "collectingInformation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/collectingInformation"
            },
            "x-summary": ""
          },
          "featureObservations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/featureObservation"
            },
            "x-summary": ""
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identifier"
            },
            "x-summary": ""
          },
          "collectionItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/collectionItem"
            },
            "x-summary": ""
          },
          "recordHistoryEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/recordHistoryEvent"
            },
            "x-summary": ""
          },
          "readOnly": {
            "$ref": "#/components/schemas/readOnly",
            "x-summary": ""
          },
          "version": {
            "type": "integer",
            "x-summary": ""
          }
        },
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": ""
      },
      "locationInformation": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "places": {
            "description": "An array with curated localities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "position": {
            "type": "object",
            "$ref": "#/components/schemas/position",
            "x-summary": ""
          },
          "polygon": {
            "type": "object",
            "$ref": "#/components/schemas/polygon",
            "x-summary": ""
          },
          "verticalPosition": {
            "type": "object",
            "$ref": "#/components/schemas/verticalPosition",
            "x-summary": ""
          },
          "coordinatesVerbatim": {
            "type": "string",
            "description": "Verbatim coordinates (or corresponding information, e.g. map number) from the original source",
            "x-summary": ""
          },
          "georeferenceSourcesText": {
            "type": "string",
            "description": "Describe how you got the georeferenced coordinates (data source(s), tools, maps ...)",
            "x-summary": ""
          },
          "localityI": {
            "type": "string",
            "description": "TBA",
            "x-summary": ""
          },
          "localityV": {
            "type": "string",
            "description": "Verbatim locality names and description, as in the original source, typos and all.",
            "x-summary": ""
          },
          "swedishGrid5km": {
            "type": "string",
            "description": "RT90 Index 5",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "description": "Notes on the locality",
            "x-summary": ""
          },
          "readOnly": {
            "$ref": "#/components/schemas/readOnly",
            "x-summary": ""
          }
        },
        "description": "# locationInformation\n\nInformation about the place of an event.\n\n\n### Definition\n\nInformation pertaining to a specific location.\n\n\n### Examples\n\nInformation about the collecting locality for a specimen, for example a transcribed text like \"Frescati, Stockholm, Uppland, Sweden\".\n\n\n### Notes\n\nThis term is for keeping general information about a location, for example geographic coordinates or verbatim information about the location.\n\nMore specifically, the purpose of the term is:\n\n1. to keep information about a location that is specific for an event (e.g., transcribed information about the location),\n2. to keep information regarding the uncertainty about a location,\n3. to describe how a location relates to some other place (\"3 km NW of\"), and\n4. to document the source for some information (so that interpretations can be traced).",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "Information about the place of an event."
      },
      "originInformation": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "originLocality": {
            "type": "string",
            "x-summary": ""
          },
          "establishmentMeansType": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "x-summary": ""
          },
          "isAffectedByManagement": {
            "type": "boolean",
            "x-summary": ""
          },
          "isResultOfSelectiveBreeding": {
            "type": "boolean",
            "x-summary": ""
          },
          "event": {
            "$ref": "#/components/schemas/event",
            "x-summary": ""
          }
        },
        "description": "# originInformation\n\nInformation about the physical or genetic origin of an [individual](/docs/0.1.0-0.1.0/models/individual/). This could for example be information on where an individual previously lived. The information may be associated with an [event](/docs/0.1.0-0.1.0/models/event/).\n\n\n### Defintion\nInformation pertaining to the origin of an [individual](/docs/0.1.0-0.1.0/models/individual/).\n\n\n### Example\n\nAn [individual](/docs/0.1.0-0.1.0/models/individual/) may have more than one [event](/docs/0.1.0-0.1.0/models/event/) connected with origin information. For example: a lion first lived in Africa (origin event 1), then was placed in a Zoo in Europe (origin event 2), and finally escaped into the wild (origin event 3) where it was later killed and collected (death and collecting event).\n\n\n### Notes\n\nThe purpose of this term is to keep information that has to do with the origin of [individuals](/docs/0.1.0-0.1.0/models/individual/). This could involve both the genetic and the physical origin. This term concerns the origin of individuals, not the provenance of specimens. The general description of the death event, like its time and location, should be recorded under [event](/docs/0.1.0-0.1.0/models/event/).\n\n\n### See also\n\n[event](/docs/0.1.0-0.1.0/models/event/)",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "Information about the origin of an individual."
      },
      "recordHistoryEvent": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "agent": {
            "$ref": "#/components/schemas/agent",
            "x-summary": ""
          },
          "date": {
            "$ref": "#/components/schemas/dateRange",
            "x-summary": ""
          },
          "description": {
            "type": "string",
            "x-summary": ""
          },
          "system": {
            "type": "string",
            "x-summary": ""
          }
        },
        "description": "### Definition\n\nInformation about the history of the record.\n\n### Note(s)\n\nThis can for example involve creation of a catalog card, creation of a record in MAM2006 or edit of the record.\n",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": ""
      },
      "specimen": {
        "additionalProperties": false,
        "description": "This is a description",
        "x-format": true,
        "x-normalize": false,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "deactivatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          },
          "publishRecord": {
            "type": "boolean",
            "x-summary": ""
          },
          "version": {
            "type": "integer",
            "x-summary": ""
          },
          "collectionItemsRemarks": {
            "type": "string",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "x-summary": ""
          },
          "legacyData": {
            "$ref": "#/components/schemas/legacyData",
            "x-summary": ""
          },
          "readOnly": {
            "$ref": "#/components/schemas/readOnly",
            "x-summary": ""
          },
          "individual": {
            "$ref": "#/components/schemas/individual",
            "x-summary": ""
          },
          "causeOfDeathTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "curatorialTaxon": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          },
          "establishmentMeansTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "featureTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "identifierTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "normalizedAgents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "physicalObjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "places": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "preparationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "resourceActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "taxonNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "typeSpecimenType": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          }
        },
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": ""
      },
      "taxonInformation": {
        "additionalProperties": false,
        "properties": {
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "curatorialTaxon": {
            "$ref": "#/components/schemas/taxon",
            "x-summary": ""
          },
          "customTaxonNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/customTaxonName"
            },
            "x-summary": ""
          },
          "taxonRemarks": {
            "type": "string",
            "x-summary": ""
          },
          "typeStatus": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          },
          "typifiedName": {
            "type": "string",
            "x-summary": ""
          },
          "readOnly": {
            "$ref": "#/components/schemas/readOnly",
            "x-summary": ""
          }
        },
        "description": "# taxonInformation\n\nInformation about an [individual's](/docs/0.1.0-0.1.0/models/individual/) taxon, for example its accepted name according to the local classification. This term can also hold other taxon names which are not part of a [determination](/docs/0.1.0-0.1.0/models/determination/).\n\n\n### Definition\n\nInformation about the taxon to which an [individual](/docs/0.1.0-0.1.0/models/individual/) is currently assigned according to the local classification, or other names that has been associated with the individual that do not qualify as [determinations](/docs/0.1.0-0.1.0/models/determination/).\n\n\n### Examples\n\n\"Pusa hispida\" is the accepted name for a taxon in the local classification, and “Phoca hispida” one of its synonyms. Consequently, \"Pusa hispida\" should be the locally accepted name (curatorial name) for a specimen that has been determined as \"Phoca hispida\".\n\n\n### Notes\n\nThe purpose of this concept is:\n\n1. to keep information of the currently accepted name for an individual, and\n2. to accommodate taxon-related legacy data that do not fit into taxon in the taxonomy API or into determination.\n\nThe data model is flexible, and it is possible to treat a locally accepted name for a specimen as a determination. One might then ask if there are cases when this should not be done? In principle, you should not use determination *if you cannot assume that the taxon name properly represents an original determination, and if it is impossible to assess whether that is the case*.\n\nImagine for example that the text on a determination label reads \"not taxon x\", while the name \"taxon x\" has been recorded as the name for the specimen in the database (this could happen with legacy data for collections where taxonomy is tightly connected to storage and it is important to just record some name). Without other information, it would be impossible to know that \"taxon x\" was derived from the text \"not taxon x\". Since you cannot be sure of where the information comes from, there would be no way to correct the erroneous determination record.\n\nAnother case is when a name at a different rank, let say a family, has been recorded from a determination to a subfamily written on the label, without saying anything about how the transformation was done. There can also be undocumented taxonomic interpretations at the same level, like when an original determination to \"Phoca hispida\" is recorded as just \"Pusa hispida\".\n\n\n### See also\n\n[determination](/docs/0.1.0-0.1.0/models/determination/), [taxon](/docs/0.1.0-0.1.0/models/taxon/)",
        "x-category": "specimenService",
        "x-modelType": "model",
        "x-summary": "Information about the taxon to which an individual is assigned."
      },
      "physicalObject": {
        "additionalProperties": false,
        "properties": {
          "deactivatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "lid": {
            "$ref": "#/components/schemas/lid",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          },
          "remarks": {
            "type": "string",
            "x-summary": ""
          },
          "collectionItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/collectionItem"
            },
            "x-summary": ""
          },
          "storageLocationText": {
            "type": "string",
            "x-summary": ""
          },
          "specimen": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          },
          "storageLocation": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          }
        },
        "description": "# physicalObject\n\nThe smallest recognized physical \"thing\" in the collection. Typical examples are a skin preparation and a herbarium sheet. A physical object represents one or more [collectionItems](/docs/0.1.0-0.1.0/models/collectionItem/).\n\n\n### Definition\n\nThe smallest recognized physical \"thing\" in the collection.\n\n\n### Examples\n\n* A herbarium sheet with three plants mounted on it (possibly three collection items)\n* A mounted skin of a squirrel (one [collectionItem](/docs/0.1.0-0.1.0/models/collectionItem/))\n* A jar with two fishes (possibly two [collectionItems](/docs/0.1.0-0.1.0/models/collectionItem/))\n* A tree branch with two birds mounted on it (possibly two [collectionItems](/docs/0.1.0-0.1.0/models/collectionItem/))\n\n\n### Notes\n\nThe physical object is the physical thing that you do something with when you manage your collection. This could for example be the thing stored on the shelf, sent on loan or received from a donator. Physical objects change over time. Imagine for example a jar of 5 fishes first treated as one physical object \"A\". In response to a loan request, a new physical object \"B\" is created with one of the fishes and sent to the borrower. When the loan is returned, the fish is put back into the original container (\"A\"), thereby ending the existence of object \"B\".\n\n\n### See also\n\n[collectionItem](/docs/0.1.0-0.1.0/models/collectionItem/)",
        "x-category": "storageService",
        "x-modelType": "model",
        "x-summary": "The smallest recognized physical \"thing\" in the collection."
      },
      "storageLocation": {
        "additionalProperties": false,
        "properties": {
          "deactivatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "versionId": {
            "type": "string",
            "x-summary": ""
          },
          "group": {
            "type": "string",
            "x-summary": ""
          },
          "description": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "type": "string",
            "x-summary": ""
          },
          "parentId": {
            "type": "string",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "parent": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          },
          "physicalObjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "preparationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "resourceActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "taxa": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          }
        },
        "description": "# storageLocation\n\nA space for storing [physicalObjects](/docs/0.1.0-0.1.0/models/physicalObject/) in a collection.\n\n\n### Definition\n\nA dedicated space, at any level in a hierarchy, for storing one or more [physicalObjects](/docs/0.1.0-0.1.0/models/physicalObject/) in a collection.\n\n\n### Examples\n\n* \"room 123\"\n* \"Swedish Coleoptera\"\n* \"the bone room\"\n\n\n### Notes\n\nA storage location is usually a fixed space (like a room, shelf or cabinet) but could also be a \"floating location\". This latter kind is especially common when objects are sorted by taxonomy. Instead of having a fixed physical position are floating storage locations placed in relation to other storage locations nearby. For example, the objects representing the genus *Phoca* may be placed after those of *Pagophilus*, but before those of *Pusa*. Storage locations may be arranged in a hierarchy, irrespective of whether they have fixed positions or not.\n\n\n### See also\n\n[physicalObject](/docs/0.1.0-0.1.0/models/physicalObject/)",
        "x-category": "storageService",
        "x-modelType": "model",
        "x-summary": "A dedicated space for storing physical objects."
      },
      "taxon": {
        "additionalProperties": false,
        "properties": {
          "deactivatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          },
          "acceptedTaxonName": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "parent": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          },
          "resourceActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "specimens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "storageLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "synonyms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "vernacularNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          }
        },
        "description": "# taxon\n\nA taxonomic group of any rank, such as a species or family, or class used to keep information about a locally used taxon concept.\n\n\n### Definition\n\nA taxonomic group of any rank, such as a species, family, or class.\n\n\n### Examples\n\nThe species that includes the type specimen for the name \"Pusa hispida\", which may also be referred to by the synonym \"Phoca hispida\".\n\n\n### Notes\n\nThe purpose of this term is to keep information about locally used taxon concepts. These concepts do not have to be used elsewhere. The local classification is the combination of all the names and their relations. In the local classification, each taxon has an accepted taxon name at same rank as the taxon (more precisely, the taxon gets its rank from the accepted name). The accepted name may have synonyms at any rank.\n\n\n### See also\n\n[determination](/docs/0.1.0-0.1.0/models/determination/), [taxonInformation](/docs/0.1.0-0.1.0/models/taxonInformation/)",
        "x-category": "taxonomyService",
        "x-modelType": "model",
        "x-summary": "A taxonomic group of any rank, such as a species or family."
      },
      "taxonName": {
        "additionalProperties": false,
        "properties": {
          "deactivatedAt": {
            "format": "date-time",
            "type": "string",
            "x-summary": ""
          },
          "language": {
            "type": "string",
            "x-summary": ""
          },
          "versionId": {
            "type": "string",
            "x-summary": ""
          },
          "name": {
            "type": "string",
            "x-summary": ""
          },
          "taxonNameType": {
            "type": "string",
            "enum": [
              "scientific",
              "vernacular"
            ],
            "x-summary": ""
          },
          "rank": {
            "type": "string",
            "description": "Taxon rank",
            "x-summary": ""
          },
          "rubinNumber": {
            "type": "string",
            "x-summary": ""
          },
          "id": {
            "$ref": "#/components/schemas/id",
            "x-summary": ""
          },
          "type": {
            "$ref": "#/components/schemas/type",
            "x-summary": ""
          },
          "acceptedToTaxon": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          },
          "resourceActivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/externalModelReference"
            },
            "x-summary": ""
          },
          "synonymToTaxon": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          },
          "vernacularToTaxon": {
            "$ref": "#/components/schemas/externalModelReference",
            "x-summary": ""
          }
        },
        "x-category": "taxonomyService",
        "x-modelType": "model",
        "x-summary": "",
        "description": ""
      },
      "BaseError": {
        "properties": {
          "description": {
            "description": "Description of the returned code",
            "type": "string"
          },
          "detail": {
            "description": "A human-readable explanation specific to this occurrence of the problem.",
            "type": "string"
          },
          "id": {
            "description": "A unique identifier for this particular occurrence of the problem.",
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "parameterErrors": {
            "properties": {
              "errorCode": {
                "enum": [
                  "ADDITIONAL_PROPERTIES",
                  "DEEP_REQUIRED",
                  "DUPLICATE",
                  "ENUM",
                  "MAX_LENGTH",
                  "MIN_LENGTH",
                  "REQUIRED",
                  "WRONG_TYPE",
                  "DATE_RANGE_START_DATE_NOT_AFTER_END_DATE",
                  "DATE_PAST",
                  "DATE_ORPHAN_DAY",
                  "DATE_ORPHAN_MONTH",
                  "DATE_RANGE_BOTH_START_AND_END_REQUIRED",
                  "DATE_CANNOT_BE_INTERPRETED",
                  "DIGITS_AND_DECIMAL_POINT",
                  "INVALID_LATITUDE",
                  "INVALID_LONGITUDE"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "title": {
            "description": "A short, human-readable summary of the problem. Associated with the code",
            "type": "string"
          }
        },
        "required": [
          "status",
          "code"
        ],
        "title": "Base error",
        "type": "object"
      },
      "REQUEST_BODY_VALIDATION_ERROR": {
        "description": "Input body does not pass validations",
        "example": "REQUEST_BODY_VALIDATION_ERROR",
        "title": "REQUEST_BODY_VALIDATION_ERROR",
        "type": "string"
      },
      "REQUEST_ERROR": {
        "description": "Something is wrong with the request. See details",
        "example": "REQUEST_ERROR",
        "title": "REQUEST_ERROR",
        "type": "string"
      },
      "normalizedAgentCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "RESPONSE_VALIDATION_ERROR": {
        "description": "Output does not pass validations",
        "example": "RESPONSE_VALIDATION_ERROR",
        "title": "RESPONSE_VALIDATION_ERROR",
        "type": "string"
      },
      "INTERNAL_SERVER_ERROR": {
        "description": "Error occurred on server",
        "example": "INTERNAL_SERVER_ERROR",
        "title": "INTERNAL_SERVER_ERROR",
        "type": "string"
      },
      "normalizedAgentCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "normalizedAgentGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "RESOURCE_NOT_FOUND_ERROR": {
        "description": "Requested resource not found. See details",
        "example": "RESOURCE_NOT_FOUND_ERROR",
        "title": "RESOURCE_NOT_FOUND_ERROR",
        "type": "string"
      },
      "normalizedAgentGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "normalizedAgentGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "normalizedAgentGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "normalizedAgentGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "normalizedAgentQuery-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "normalizedAgentQuery-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "normalizedAgentUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "normalizedAgentUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "normalizedAgentUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "FORBIDDEN_ERROR": {
        "description": "See details",
        "example": "FORBIDDEN_ERROR",
        "title": "FORBIDDEN_ERROR",
        "type": "string"
      },
      "normalizedAgentImportDataFromFile-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "normalizedAgentImportDataFromFile-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "normalizedAgentDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "normalizedAgentDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "normalizedAgentDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "normalizedAgentDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "normalizedAgentGetRelationshipSpecimens-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "normalizedAgentGetRelationshipSpecimens-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "normalizedAgentGetRelationshipSpecimens-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "normalizedAgentGetRelationshipUser-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "normalizedAgentGetRelationshipUser-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "normalizedAgentGetRelationshipUser-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "normalizedAgentUpdateRelationshipUser-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "normalizedAgentUpdateRelationshipUser-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "normalizedAgentUpdateRelationshipUser-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "userGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "userGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "userGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "userGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "userGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "causeOfDeathTypeCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "causeOfDeathTypeCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "causeOfDeathTypeGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "causeOfDeathTypeGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "causeOfDeathTypeGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "causeOfDeathTypeGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "causeOfDeathTypeGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "causeOfDeathTypeImportDataFromFile-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "causeOfDeathTypeImportDataFromFile-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "causeOfDeathTypeUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "causeOfDeathTypeUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "causeOfDeathTypeUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "causeOfDeathTypeDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "causeOfDeathTypeDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "causeOfDeathTypeDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "causeOfDeathTypeDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "customTaxonNameTypeCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "customTaxonNameTypeCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "customTaxonNameTypeGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "customTaxonNameTypeGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "customTaxonNameTypeGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "customTaxonNameTypeGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "customTaxonNameTypeGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "customTaxonNameTypeImportDataFromFile-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "customTaxonNameTypeImportDataFromFile-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "customTaxonNameTypeUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "customTaxonNameTypeUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "customTaxonNameTypeUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "customTaxonNameTypeDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "customTaxonNameTypeDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "customTaxonNameTypeDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "customTaxonNameTypeDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "establishmentMeansTypeCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "establishmentMeansTypeCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "establishmentMeansTypeGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "establishmentMeansTypeGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "establishmentMeansTypeGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "establishmentMeansTypeGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "establishmentMeansTypeGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "establishmentMeansTypeImportDataFromFile-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "establishmentMeansTypeImportDataFromFile-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "establishmentMeansTypeUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "establishmentMeansTypeUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "establishmentMeansTypeUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "establishmentMeansTypeDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "establishmentMeansTypeDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "establishmentMeansTypeDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "establishmentMeansTypeDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "featureTypeCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "featureTypeCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "featureTypeGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "featureTypeGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "featureTypeGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "featureTypeGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "featureTypeGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "featureTypeImportDataFromFile-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "featureTypeImportDataFromFile-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "featureTypeUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "featureTypeUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "featureTypeUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "featureTypeDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "featureTypeDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "featureTypeDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "featureTypeDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "identifierTypeCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "identifierTypeCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "identifierTypeGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "identifierTypeGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "identifierTypeGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "identifierTypeGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "identifierTypeGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "identifierTypeImportDataFromFile-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "identifierTypeImportDataFromFile-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "identifierTypeUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "identifierTypeUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "identifierTypeUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "identifierTypeDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "identifierTypeDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "identifierTypeDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "identifierTypeDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "preparationTypeCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "preparationTypeCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "preparationTypeGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "preparationTypeGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "preparationTypeGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "preparationTypeGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "preparationTypeGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "preparationTypeImportDataFromFile-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "preparationTypeImportDataFromFile-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "preparationTypeUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "preparationTypeUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "preparationTypeUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "preparationTypeDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "preparationTypeDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "preparationTypeDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "preparationTypeDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "typeSpecimenTypeCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "typeSpecimenTypeCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "typeSpecimenTypeGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "typeSpecimenTypeGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "typeSpecimenTypeGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "typeSpecimenTypeGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "typeSpecimenTypeGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "typeSpecimenTypeImportDataFromFile-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "typeSpecimenTypeImportDataFromFile-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "typeSpecimenTypeUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "typeSpecimenTypeUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "typeSpecimenTypeUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "typeSpecimenTypeDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "typeSpecimenTypeDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "typeSpecimenTypeDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "typeSpecimenTypeDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "exportJobGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "exportJobGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "exportJobGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "exportJobGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "exportJobGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "exportJobDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "exportJobDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "exportJobDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "exportJobDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "exportJobCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "exportJobCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "exportJobStartJob-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "exportJobStartJob-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "exportJobSetJobFailed-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "exportJobSetJobFailed-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "exportJobSetJobSuccess-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "exportJobSetJobSuccess-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "exportJobDownloadExport-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "exportJobDownloadExport-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "resourceActivityCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "resourceActivityCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "resourceActivityBulkCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "resourceActivityBulkCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "resourceActivityGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "resourceActivityGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "resourceActivityGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "resourceActivityGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "resourceActivityGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "resourceActivityUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "resourceActivityUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "resourceActivityUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "resourceActivityDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "resourceActivityDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "resourceActivityDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "resourceActivityDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "catalogNumberGenerate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "catalogNumberGenerate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "catalogNumberCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "catalogNumberCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "catalogNumberDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "catalogNumberDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "catalogNumberDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "catalogNumberDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "catalogNumberGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "catalogNumberGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "catalogNumberGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "catalogNumberValidate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "catalogNumberValidate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "catalogNumberGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "catalogNumberGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "catalogNumberUpdateView-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "catalogNumberUpdateView-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "catalogNumberRebuildView-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "catalogNumberRebuildView-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "jobCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "jobCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "jobGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "jobGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "jobGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "jobGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "jobGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "jobUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "jobUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "jobUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "jobDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "jobDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "jobDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "jobDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "jobStartJob-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "jobStartJob-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "jobSetJobFailed-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "jobSetJobFailed-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "jobSetJobSuccess-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "jobSetJobSuccess-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "dataModelMigrationLogCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "dataModelMigrationLogCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "dataModelMigrationLogGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "dataModelMigrationLogGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "dataModelMigrationLogGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "dataModelMigrationLogGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "dataModelMigrationLogGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "dataModelMigrationLogUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "dataModelMigrationLogUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "dataModelMigrationLogUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "placeGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeQuery-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeQuery-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "placeUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "placeDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "placeDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeImportDataFromFile-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "placeImportDataFromFile-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeGetRelationshipChildren-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeGetRelationshipChildren-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "placeGetRelationshipChildren-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeUpdateRelationshipChildren-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeUpdateRelationshipChildren-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "placeUpdateRelationshipChildren-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeGetRelationshipParent-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeGetRelationshipParent-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "placeGetRelationshipParent-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeUpdateRelationshipParent-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeUpdateRelationshipParent-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "placeUpdateRelationshipParent-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeGetRelationshipSpecimens-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeGetRelationshipSpecimens-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "placeGetRelationshipSpecimens-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "placeUpdateRelationshipSpecimens-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "placeUpdateRelationshipSpecimens-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "placeUpdateRelationshipSpecimens-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "cachePhysicalObjectCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "cachePhysicalObjectCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "cachePhysicalObjectGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "cachePhysicalObjectGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "cachePhysicalObjectGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "cachePhysicalObjectGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "cachePhysicalObjectGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "cachePhysicalObjectEmptyView-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "cachePhysicalObjectEmptyView-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "cachePhysicalObjectUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "cachePhysicalObjectUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "cachePhysicalObjectUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "cachePhysicalObjectDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "cachePhysicalObjectDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "cachePhysicalObjectDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "cachePhysicalObjectDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "cachePhysicalObjectRebuildView-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "cachePhysicalObjectRebuildView-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "searchSpecimenGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "searchSpecimenGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "searchSpecimenGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "searchSpecimenQuery-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "searchSpecimenQuery-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "searchSpecimenDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "searchSpecimenDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "searchSpecimenDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "searchSpecimenDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "searchSpecimenGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "searchSpecimenGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "searchSpecimenEmptyView-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "searchSpecimenEmptyView-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "searchSpecimenUpdateView-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "searchSpecimenUpdateView-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "searchSpecimenRebuildView-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "searchSpecimenRebuildView-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "searchSpecimenRequestRebuildView-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "searchSpecimenRequestRebuildView-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "searchSpecimenRequestUpdateView-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "searchSpecimenRequestUpdateView-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenQuery-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenQuery-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "specimenDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenImportDataFromFile-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "specimenImportDataFromFile-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetRelationshipNormalizedAgents-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetRelationshipNormalizedAgents-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenGetRelationshipNormalizedAgents-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenUpdateRelationshipNormalizedAgents-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenUpdateRelationshipNormalizedAgents-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenUpdateRelationshipNormalizedAgents-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetRelationshipCauseOfDeathTypes-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetRelationshipCauseOfDeathTypes-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenGetRelationshipCauseOfDeathTypes-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenUpdateRelationshipCauseOfDeathTypes-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenUpdateRelationshipCauseOfDeathTypes-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenUpdateRelationshipCauseOfDeathTypes-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetRelationshipCuratorialTaxon-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetRelationshipCuratorialTaxon-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenGetRelationshipCuratorialTaxon-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenUpdateRelationshipCuratorialTaxon-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenUpdateRelationshipCuratorialTaxon-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenUpdateRelationshipCuratorialTaxon-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetRelationshipEstablishmentMeansTypes-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetRelationshipEstablishmentMeansTypes-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenGetRelationshipEstablishmentMeansTypes-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenUpdateRelationshipEstablishmentMeansTypes-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenUpdateRelationshipEstablishmentMeansTypes-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenUpdateRelationshipEstablishmentMeansTypes-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetRelationshipFeatureTypes-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetRelationshipFeatureTypes-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenGetRelationshipFeatureTypes-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenUpdateRelationshipFeatureTypes-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenUpdateRelationshipFeatureTypes-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenUpdateRelationshipFeatureTypes-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetRelationshipIdentifierTypes-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetRelationshipIdentifierTypes-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenGetRelationshipIdentifierTypes-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenUpdateRelationshipIdentifierTypes-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenUpdateRelationshipIdentifierTypes-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenUpdateRelationshipIdentifierTypes-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetRelationshipPhysicalObjects-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetRelationshipPhysicalObjects-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenGetRelationshipPhysicalObjects-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenUpdateRelationshipPhysicalObjects-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenUpdateRelationshipPhysicalObjects-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenUpdateRelationshipPhysicalObjects-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetRelationshipPlaces-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetRelationshipPlaces-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenGetRelationshipPlaces-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenUpdateRelationshipPlaces-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenUpdateRelationshipPlaces-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenUpdateRelationshipPlaces-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetRelationshipPreparationTypes-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetRelationshipPreparationTypes-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenGetRelationshipPreparationTypes-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenUpdateRelationshipPreparationTypes-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenUpdateRelationshipPreparationTypes-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenUpdateRelationshipPreparationTypes-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetRelationshipTaxonNames-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetRelationshipTaxonNames-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenGetRelationshipTaxonNames-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenUpdateRelationshipTaxonNames-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenUpdateRelationshipTaxonNames-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenUpdateRelationshipTaxonNames-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenGetRelationshipTypeSpecimenType-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenGetRelationshipTypeSpecimenType-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenGetRelationshipTypeSpecimenType-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "specimenUpdateRelationshipTypeSpecimenType-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "specimenUpdateRelationshipTypeSpecimenType-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "specimenUpdateRelationshipTypeSpecimenType-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "physicalObjectCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "physicalObjectCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "physicalObjectGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "physicalObjectGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "physicalObjectGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "physicalObjectGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "physicalObjectGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "physicalObjectUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "physicalObjectUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "physicalObjectUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "physicalObjectDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "physicalObjectDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "physicalObjectDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "physicalObjectDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "physicalObjectGetRelationshipSpecimens-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "physicalObjectGetRelationshipSpecimens-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "physicalObjectGetRelationshipSpecimens-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "physicalObjectGetRelationshipStorageLocation-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "physicalObjectGetRelationshipStorageLocation-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "physicalObjectGetRelationshipStorageLocation-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "physicalObjectUpdateRelationshipStorageLocation-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "physicalObjectUpdateRelationshipStorageLocation-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "physicalObjectUpdateRelationshipStorageLocation-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "storageLocationGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationQuery-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationQuery-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "storageLocationUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "storageLocationDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "storageLocationDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationImportDataFromFile-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "storageLocationImportDataFromFile-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationGetRelationshipChildren-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationGetRelationshipChildren-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "storageLocationGetRelationshipChildren-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationUpdateRelationshipChildren-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationUpdateRelationshipChildren-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "storageLocationUpdateRelationshipChildren-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationGetRelationshipParent-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationGetRelationshipParent-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "storageLocationGetRelationshipParent-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationUpdateRelationshipParent-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationUpdateRelationshipParent-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "storageLocationUpdateRelationshipParent-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationGetRelationshipPhysicalObjects-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationGetRelationshipPhysicalObjects-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "storageLocationGetRelationshipPhysicalObjects-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationUpdateRelationshipPhysicalObjects-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationUpdateRelationshipPhysicalObjects-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "storageLocationUpdateRelationshipPhysicalObjects-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "storageLocationGetRelationshipTaxa-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "storageLocationGetRelationshipTaxa-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "storageLocationGetRelationshipTaxa-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonQuery-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonQuery-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "taxonDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonGetRelationshipParent-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonGetRelationshipParent-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonGetRelationshipParent-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonUpdateRelationshipParent-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonUpdateRelationshipParent-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonUpdateRelationshipParent-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonImportDataFromFile-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "taxonImportDataFromFile-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonGetRelationshipChildren-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonGetRelationshipChildren-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonGetRelationshipChildren-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonUpdateRelationshipChildren-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonUpdateRelationshipChildren-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonUpdateRelationshipChildren-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonGetRelationshipAcceptedTaxonName-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonGetRelationshipAcceptedTaxonName-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonGetRelationshipAcceptedTaxonName-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonUpdateRelationshipAcceptedTaxonName-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonUpdateRelationshipAcceptedTaxonName-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonUpdateRelationshipAcceptedTaxonName-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonGetRelationshipSpecimens-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonGetRelationshipSpecimens-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonGetRelationshipSpecimens-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonUpdateRelationshipSpecimens-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonUpdateRelationshipSpecimens-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonUpdateRelationshipSpecimens-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonGetRelationshipStorageLocations-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonGetRelationshipStorageLocations-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonGetRelationshipStorageLocations-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonGetRelationshipSynonyms-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonGetRelationshipSynonyms-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonGetRelationshipSynonyms-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonUpdateRelationshipSynonyms-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonUpdateRelationshipSynonyms-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonUpdateRelationshipSynonyms-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonGetRelationshipVernacularNames-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonGetRelationshipVernacularNames-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonGetRelationshipVernacularNames-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonUpdateRelationshipVernacularNames-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonUpdateRelationshipVernacularNames-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonUpdateRelationshipVernacularNames-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameCreate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameCreate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameGetOne-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameGetOne-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonNameGetOne-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameGetMany-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameGetMany-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameQuery-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameQuery-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameUpdate-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameUpdate-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonNameUpdate-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameDel-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameDel-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "taxonNameDel-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonNameDel-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameGetRelationshipAcceptedToTaxon-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameGetRelationshipAcceptedToTaxon-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonNameGetRelationshipAcceptedToTaxon-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameImportDataFromFile-403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/FORBIDDEN_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/403"
              }
            },
            "type": "object"
          }
        ],
        "title": "Forbidden",
        "type": "object"
      },
      "taxonNameImportDataFromFile-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameUpdateRelationshipAcceptedToTaxon-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameUpdateRelationshipAcceptedToTaxon-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonNameUpdateRelationshipAcceptedToTaxon-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameGetRelationshipSynonymToTaxon-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameGetRelationshipSynonymToTaxon-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonNameGetRelationshipSynonymToTaxon-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameUpdateRelationshipSynonymToTaxon-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameUpdateRelationshipSynonymToTaxon-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonNameUpdateRelationshipSynonymToTaxon-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameGetRelationshipVernacularToTaxon-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameGetRelationshipVernacularToTaxon-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonNameGetRelationshipVernacularToTaxon-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "taxonNameUpdateRelationshipVernacularToTaxon-400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/REQUEST_BODY_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/REQUEST_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/400"
              }
            },
            "type": "object"
          }
        ],
        "title": "Bad Request",
        "type": "object"
      },
      "taxonNameUpdateRelationshipVernacularToTaxon-404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESOURCE_NOT_FOUND_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/404"
              }
            },
            "type": "object"
          }
        ],
        "title": "Not Found",
        "type": "object"
      },
      "taxonNameUpdateRelationshipVernacularToTaxon-500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseError"
          },
          {
            "properties": {
              "code": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RESPONSE_VALIDATION_ERROR"
                  },
                  {
                    "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/500"
              }
            },
            "type": "object"
          }
        ],
        "title": "Internal Server Error",
        "type": "object"
      },
      "normalizedAgentCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "normalizedAgent",
                    "enum": [
                      "normalizedAgent"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/normalizedAgent"
                  },
                  "relationships": {
                    "properties": {
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "user": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "user"
                                    ],
                                    "example": "user",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "normalizedAgent",
              "attributes": {
                "givenName": "Carl",
                "familyName": "Linnaeus",
                "abbreviation": "CL",
                "email": "carl@linnaeus.com",
                "agentType": "person"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "normalizedAgent",
            "attributes": {
              "givenName": "Carl",
              "familyName": "Linnaeus",
              "abbreviation": "CL",
              "email": "carl@linnaeus.com",
              "agentType": "person"
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "normalizedAgentQueryRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "queryBody",
                "enum": [
                  "queryBody"
                ],
                "type": "string"
              },
              "attributes": {
                "properties": {
                  "aggregations": {
                    "items": {
                      "$ref": "#/components/schemas/queryAggregation"
                    },
                    "type": "array"
                  },
                  "excludeFields": {
                    "description": "When provided specified fields will be excluded (applied after include)",
                    "items": {
                      "enum": [
                        "id",
                        "attributes.agentType",
                        "attributes.fullName"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "includeFields": {
                    "description": "When provided only specified fields will be returned in response",
                    "items": {
                      "enum": [
                        "id",
                        "attributes.agentType",
                        "attributes.fullName"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "includeDeactivated": {
                    "description": "Will include deactivated items",
                    "default": false,
                    "type": "boolean"
                  },
                  "limit": {
                    "description": "Limit the result",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "offset": {
                    "description": "Offset the result",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "query": {
                    "$ref": "#/components/schemas/queryRoot"
                  },
                  "scroll": {
                    "default": false,
                    "example": false,
                    "description": "If true elastic search scroll will be used",
                    "type": "boolean"
                  },
                  "scrollId": {
                    "description": "Elastic search scroll id",
                    "type": "string"
                  },
                  "sort": {
                    "description": "When provided response will be sorted",
                    "items": {
                      "enum": [
                        "relevance",
                        "id:asc",
                        "id:desc",
                        "attributes.name:asc",
                        "attributes.name:desc"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "normalizedAgentUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "normalizedAgent",
                    "enum": [
                      "normalizedAgent"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/normalizedAgent"
                  },
                  "relationships": {
                    "properties": {
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "user": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "user"
                                    ],
                                    "example": "user",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "normalizedAgentUpdateRelationshipUserRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "user",
                    "enum": [
                      "user"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "loginUserRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "client_id": {
            "type": "string",
            "example": "dina-reset",
            "x-summary": ""
          },
          "grant_type": {
            "type": "string",
            "example": "password",
            "x-summary": ""
          },
          "password": {
            "type": "string",
            "example": "xxxxx",
            "x-summary": ""
          },
          "username": {
            "type": "string",
            "example": "john doe",
            "x-summary": ""
          }
        },
        "required": [
          "client_id",
          "grant_type",
          "password",
          "username"
        ],
        "x-summary": "",
        "description": ""
      },
      "causeOfDeathTypeCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "causeOfDeathType",
                    "enum": [
                      "causeOfDeathType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/causeOfDeathType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "id": "1234",
              "type": "causeOfDeathType",
              "attributes": {
                "key": "put-to-death",
                "name": {
                  "en": "put to death",
                  "sv": "avlivad"
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "id": "1234",
            "type": "causeOfDeathType",
            "attributes": {
              "key": "put-to-death",
              "name": {
                "en": "put to death",
                "sv": "avlivad"
              }
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "causeOfDeathTypeUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "causeOfDeathType",
                    "enum": [
                      "causeOfDeathType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/causeOfDeathType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "customTaxonNameTypeCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "customTaxonNameType",
                    "enum": [
                      "customTaxonNameType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/customTaxonNameType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "id": "1234",
              "type": "customTaxonNameType",
              "attributes": {
                "key": "label-name",
                "name": {
                  "en": "label name"
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "id": "1234",
            "type": "customTaxonNameType",
            "attributes": {
              "key": "label-name",
              "name": {
                "en": "label name"
              }
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "customTaxonNameTypeUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "customTaxonNameType",
                    "enum": [
                      "customTaxonNameType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/customTaxonNameType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "establishmentMeansTypeCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "establishmentMeansType",
                    "enum": [
                      "establishmentMeansType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/establishmentMeansType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "id": "1234",
              "type": "establishmentMeansType",
              "attributes": {
                "key": "spontaneous-native-or-introduced",
                "name": {
                  "en": "spontaneous: native or introduced"
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "id": "1234",
            "type": "establishmentMeansType",
            "attributes": {
              "key": "spontaneous-native-or-introduced",
              "name": {
                "en": "spontaneous: native or introduced"
              }
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "establishmentMeansTypeUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "establishmentMeansType",
                    "enum": [
                      "establishmentMeansType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/establishmentMeansType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "featureTypeCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "featureType",
                    "enum": [
                      "featureType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/featureType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "id": "1234",
              "type": "featureType",
              "attributes": {
                "name": {
                  "en": "bone",
                  "sv": "ben"
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "id": "1234",
            "type": "featureType",
            "attributes": {
              "name": {
                "en": "bone",
                "sv": "ben"
              }
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "featureTypeUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "featureType",
                    "enum": [
                      "featureType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/featureType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "identifierTypeCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "identifierType",
                    "enum": [
                      "identifierType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/identifierType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "identifierType",
              "attributes": {
                "key": "catalog-no",
                "name": {
                  "en": "catalogNumber"
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "identifierType",
            "attributes": {
              "key": "catalog-no",
              "name": {
                "en": "catalogNumber"
              }
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "identifierTypeUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "identifierType",
                    "enum": [
                      "identifierType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/identifierType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "preparationTypeCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "preparationType",
                    "enum": [
                      "preparationType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/preparationType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "preparationType",
              "attributes": {
                "category": "skin",
                "name": "preparation name"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "preparationType",
            "attributes": {
              "category": "skin",
              "name": "preparation name"
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "preparationTypeUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "preparationType",
                    "enum": [
                      "preparationType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/preparationType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "typeSpecimenTypeCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "typeSpecimenType",
                    "enum": [
                      "typeSpecimenType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/typeSpecimenType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "typeSpecimenType",
              "attributes": {
                "name": "lectotype"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "typeSpecimenType",
            "attributes": {
              "name": "lectotype"
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "typeSpecimenTypeUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "typeSpecimenType",
                    "enum": [
                      "typeSpecimenType"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/typeSpecimenType"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "exportJobCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "exportJob",
                    "enum": [
                      "exportJob"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/exportJob"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "attributes": {
                "exportFields": [
                  {
                    "fieldPath": "id",
                    "label": "id"
                  }
                ],
                "exportIds": [
                  1,
                  2,
                  3
                ],
                "resource": "specimen"
              },
              "type": "exportJob"
            }
          }
        },
        "example": {
          "data": {
            "attributes": {
              "exportFields": [
                {
                  "fieldPath": "id",
                  "label": "id"
                }
              ],
              "exportIds": [
                1,
                2,
                3
              ],
              "resource": "specimen"
            },
            "type": "exportJob"
          }
        },
        "x-summary": "",
        "description": ""
      },
      "exportJobStartJobRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "customObject",
                    "enum": [
                      "customObject"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "exportJobSetJobFailedRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "customObject",
                    "enum": [
                      "customObject"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "exportJobSetJobSuccessRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "customObject",
                    "enum": [
                      "customObject"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "resourceActivityCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "resourceActivity",
                    "enum": [
                      "resourceActivity"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/resourceActivity"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "attributes": {},
              "type": "resourceActivity"
            }
          }
        },
        "example": {
          "data": {
            "attributes": {},
            "type": "resourceActivity"
          }
        },
        "x-summary": "",
        "description": ""
      },
      "resourceActivityBulkCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "resourceActivity",
                  "enum": [
                    "resourceActivity"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                },
                "attributes": {
                  "$ref": "#/components/schemas/resourceActivity"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": [
              {
                "attributes": {},
                "type": "resourceActivity"
              }
            ]
          }
        },
        "example": {
          "data": [
            {
              "attributes": {},
              "type": "resourceActivity"
            }
          ]
        },
        "x-summary": "",
        "description": ""
      },
      "resourceActivityUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "resourceActivity",
                    "enum": [
                      "resourceActivity"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/resourceActivity"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "catalogNumberGenerateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "customObject",
                    "enum": [
                      "customObject"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "catalogNumberCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "catalogNumber",
                    "enum": [
                      "catalogNumber"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/catalogNumber"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "attributes": {
                "identifier": "123432"
              },
              "type": "catalogNumber"
            }
          }
        },
        "example": {
          "data": {
            "attributes": {
              "identifier": "123432"
            },
            "type": "catalogNumber"
          }
        },
        "x-summary": "",
        "description": ""
      },
      "catalogNumberValidateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "catalogNumber",
                    "enum": [
                      "catalogNumber"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/catalogNumber"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "catalogNumberUpdateViewRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "customObject",
                    "enum": [
                      "customObject"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "jobCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "job",
                    "enum": [
                      "job"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/job"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "attributes": {},
              "type": "job"
            }
          }
        },
        "example": {
          "data": {
            "attributes": {},
            "type": "job"
          }
        },
        "x-summary": "",
        "description": ""
      },
      "jobUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "job",
                    "enum": [
                      "job"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/job"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "jobStartJobRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "customObject",
                    "enum": [
                      "customObject"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "jobSetJobFailedRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "customObject",
                    "enum": [
                      "customObject"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "jobSetJobSuccessRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "customObject",
                    "enum": [
                      "customObject"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "dataModelMigrationLogCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "dataModelMigrationLog",
                    "enum": [
                      "dataModelMigrationLog"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/dataModelMigrationLog"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "attributes": {},
              "type": "dataModelMigrationLog"
            }
          }
        },
        "example": {
          "data": {
            "attributes": {},
            "type": "dataModelMigrationLog"
          }
        },
        "x-summary": "",
        "description": ""
      },
      "dataModelMigrationLogUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "dataModelMigrationLog",
                    "enum": [
                      "dataModelMigrationLog"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/dataModelMigrationLog"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "placeCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "place",
                    "enum": [
                      "place"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/place"
                  },
                  "relationships": {
                    "properties": {
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "place"
                                    ],
                                    "example": "place",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "place",
              "attributes": {
                "name": "string",
                "createdAt": "string",
                "createdBy": "string",
                "updatedBy": "string",
                "updatedAt": "string",
                "description": "string",
                "centralPosition": {
                  "latitude": "string",
                  "longitude": "string",
                  "geodeticDatum": "string",
                  "uncertaintyInMeters": 0
                },
                "verticalPosition": {
                  "maximumDepthInMeters": 0,
                  "maximumElevationInMeters": 0,
                  "minimumDepthInMeters": 0,
                  "minimumElevationInMeters": 0
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "place",
            "attributes": {
              "name": "string",
              "createdAt": "string",
              "createdBy": "string",
              "updatedBy": "string",
              "updatedAt": "string",
              "description": "string",
              "centralPosition": {
                "latitude": "string",
                "longitude": "string",
                "geodeticDatum": "string",
                "uncertaintyInMeters": 0
              },
              "verticalPosition": {
                "maximumDepthInMeters": 0,
                "maximumElevationInMeters": 0,
                "minimumDepthInMeters": 0,
                "minimumElevationInMeters": 0
              }
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "placeQueryRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "queryBody",
                "enum": [
                  "queryBody"
                ],
                "type": "string"
              },
              "attributes": {
                "properties": {
                  "aggregations": {
                    "items": {
                      "$ref": "#/components/schemas/queryAggregation"
                    },
                    "type": "array"
                  },
                  "excludeFields": {
                    "description": "When provided specified fields will be excluded (applied after include)",
                    "items": {
                      "enum": [
                        "id",
                        "attributes.name",
                        "attributes.group"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "includeFields": {
                    "description": "When provided only specified fields will be returned in response",
                    "items": {
                      "enum": [
                        "id",
                        "attributes.name",
                        "attributes.group"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "includeDeactivated": {
                    "description": "Will include deactivated items",
                    "default": false,
                    "type": "boolean"
                  },
                  "limit": {
                    "description": "Limit the result",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "offset": {
                    "description": "Offset the result",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "query": {
                    "$ref": "#/components/schemas/queryRoot"
                  },
                  "scroll": {
                    "default": false,
                    "example": false,
                    "description": "If true elastic search scroll will be used",
                    "type": "boolean"
                  },
                  "scrollId": {
                    "description": "Elastic search scroll id",
                    "type": "string"
                  },
                  "sort": {
                    "description": "When provided response will be sorted",
                    "items": {
                      "enum": [
                        "relevance",
                        "id:asc",
                        "id:desc",
                        "attributes.name:asc",
                        "attributes.name:desc"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "placeUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "place",
                    "enum": [
                      "place"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/place"
                  },
                  "relationships": {
                    "properties": {
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "place"
                                    ],
                                    "example": "place",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "placeUpdateRelationshipChildrenRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "place",
                  "enum": [
                    "place"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "placeUpdateRelationshipParentRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "place",
                    "enum": [
                      "place"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "placeUpdateRelationshipSpecimensRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "specimen",
                  "enum": [
                    "specimen"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "cachePhysicalObjectCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "cachePhysicalObject",
                    "enum": [
                      "cachePhysicalObject"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/cachePhysicalObject"
                  },
                  "relationships": {
                    "properties": {
                      "storageLocation": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "attributes": {
                "info": "123"
              },
              "type": "cachePhysicalObject"
            }
          }
        },
        "example": {
          "data": {
            "attributes": {
              "info": "123"
            },
            "type": "cachePhysicalObject"
          }
        },
        "x-summary": "",
        "description": ""
      },
      "cachePhysicalObjectUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "cachePhysicalObject",
                    "enum": [
                      "cachePhysicalObject"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/cachePhysicalObject"
                  },
                  "relationships": {
                    "properties": {
                      "storageLocation": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "searchSpecimenQueryRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "queryBody",
                "enum": [
                  "queryBody"
                ],
                "type": "string"
              },
              "attributes": {
                "properties": {
                  "aggregations": {
                    "items": {
                      "$ref": "#/components/schemas/queryAggregation"
                    },
                    "type": "array"
                  },
                  "excludeFields": {
                    "description": "When provided specified fields will be excluded (applied after include)",
                    "items": {
                      "enum": [
                        "attributes.searchOnlyFields.searchAge",
                        "attributes.searchOnlyFields.searchDate",
                        "attributes.searchOnlyFields.remarksObject",
                        "attributes.tags.agentTags",
                        "attributes.tags.ageStageTags",
                        "attributes.tags.boneTags",
                        "attributes.tags.conditionTags",
                        "attributes.tags.dateTags",
                        "attributes.tags.identifierTags",
                        "attributes.tags.lengthTags",
                        "attributes.tags.locationTags",
                        "attributes.tags.otherPreparationTags",
                        "attributes.tags.higherGeographyTags",
                        "attributes.tags.sexTags",
                        "attributes.tags.skeletonTags",
                        "attributes.tags.skinTags",
                        "attributes.tags.storageLocationTags",
                        "attributes.tags.taxonomyTags",
                        "attributes.searchOnlyFields.weightObject",
                        "attributes.tags.wetPreparationTags",
                        "attributes.collectingEventCollectors",
                        "attributes.collectingEventCountry",
                        "attributes.collectingEventDistrict",
                        "attributes.collectingEventEndDate",
                        "attributes.collectingEventLocality",
                        "attributes.collectingEventProvince",
                        "attributes.collectingEventStartDate",
                        "attributes.deathInformationDeath",
                        "attributes.featureAge",
                        "attributes.featureAgeStage",
                        "attributes.featureBodyLength",
                        "attributes.featureCompleteBodyWeight",
                        "attributes.featureCondition",
                        "attributes.featureSex",
                        "attributes.featureTotalLength",
                        "id",
                        "attributes.identifiersCatalogNumber",
                        "attributes.identifiersOtherIdentifiers",
                        "attributes.idNumeric",
                        "attributes.originInformationLocality",
                        "attributes.physicalUnitOtherPreparation",
                        "attributes.physicalUnitSkeleton",
                        "attributes.physicalUnitSkin",
                        "attributes.physicalUnitWetPreparation",
                        "attributes.recordEventCataloged",
                        "attributes.recordEventLastModified",
                        "attributes.recordEventRegistered",
                        "attributes.taxonomyCuratorialName",
                        "attributes.taxonomyFamily",
                        "attributes.taxonomyGenus",
                        "attributes.taxonomySpecies",
                        "attributes.taxonomySubspecies"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "includeFields": {
                    "description": "When provided only specified fields will be returned in response",
                    "items": {
                      "enum": [
                        "attributes.searchOnlyFields.searchAge",
                        "attributes.searchOnlyFields.searchDate",
                        "attributes.searchOnlyFields.remarksObject",
                        "attributes.tags.agentTags",
                        "attributes.tags.ageStageTags",
                        "attributes.tags.boneTags",
                        "attributes.tags.conditionTags",
                        "attributes.tags.dateTags",
                        "attributes.tags.identifierTags",
                        "attributes.tags.lengthTags",
                        "attributes.tags.locationTags",
                        "attributes.tags.otherPreparationTags",
                        "attributes.tags.higherGeographyTags",
                        "attributes.tags.sexTags",
                        "attributes.tags.skeletonTags",
                        "attributes.tags.skinTags",
                        "attributes.tags.storageLocationTags",
                        "attributes.tags.taxonomyTags",
                        "attributes.searchOnlyFields.weightObject",
                        "attributes.tags.wetPreparationTags",
                        "attributes.collectingEventCollectors",
                        "attributes.collectingEventCountry",
                        "attributes.collectingEventDistrict",
                        "attributes.collectingEventEndDate",
                        "attributes.collectingEventLocality",
                        "attributes.collectingEventProvince",
                        "attributes.collectingEventStartDate",
                        "attributes.deathInformationDeath",
                        "attributes.featureAge",
                        "attributes.featureAgeStage",
                        "attributes.featureBodyLength",
                        "attributes.featureCompleteBodyWeight",
                        "attributes.featureCondition",
                        "attributes.featureSex",
                        "attributes.featureTotalLength",
                        "id",
                        "attributes.identifiersCatalogNumber",
                        "attributes.identifiersOtherIdentifiers",
                        "attributes.idNumeric",
                        "attributes.originInformationLocality",
                        "attributes.physicalUnitOtherPreparation",
                        "attributes.physicalUnitSkeleton",
                        "attributes.physicalUnitSkin",
                        "attributes.physicalUnitWetPreparation",
                        "attributes.recordEventCataloged",
                        "attributes.recordEventLastModified",
                        "attributes.recordEventRegistered",
                        "attributes.taxonomyCuratorialName",
                        "attributes.taxonomyFamily",
                        "attributes.taxonomyGenus",
                        "attributes.taxonomySpecies",
                        "attributes.taxonomySubspecies"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "includeDeactivated": {
                    "description": "Will include deactivated items",
                    "default": false,
                    "type": "boolean"
                  },
                  "limit": {
                    "description": "Limit the result",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "offset": {
                    "description": "Offset the result",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "query": {
                    "$ref": "#/components/schemas/queryRoot"
                  },
                  "scroll": {
                    "default": false,
                    "example": false,
                    "description": "If true elastic search scroll will be used",
                    "type": "boolean"
                  },
                  "scrollId": {
                    "description": "Elastic search scroll id",
                    "type": "string"
                  },
                  "sort": {
                    "description": "When provided response will be sorted",
                    "items": {
                      "enum": [
                        "relevance",
                        "attributes.collectingEventCollectors:asc",
                        "attributes.collectingEventCollectors:desc",
                        "attributes.collectingEventCountry:asc",
                        "attributes.collectingEventCountry:desc",
                        "attributes.collectingEventDistrict:asc",
                        "attributes.collectingEventDistrict:desc",
                        "attributes.collectingEventEndDate:asc",
                        "attributes.collectingEventEndDate:desc",
                        "attributes.collectingEventLocality:asc",
                        "attributes.collectingEventLocality:desc",
                        "attributes.collectingEventProvince:asc",
                        "attributes.collectingEventProvince:desc",
                        "attributes.collectingEventStartDate:asc",
                        "attributes.collectingEventStartDate:desc",
                        "attributes.deathInformationDeath:asc",
                        "attributes.deathInformationDeath:desc",
                        "attributes.featureAge:asc",
                        "attributes.featureAge:desc",
                        "attributes.featureAgeStage:asc",
                        "attributes.featureAgeStage:desc",
                        "attributes.featureBodyLength:asc",
                        "attributes.featureBodyLength:desc",
                        "attributes.featureCompleteBodyWeight:asc",
                        "attributes.featureCompleteBodyWeight:desc",
                        "attributes.featureCondition:asc",
                        "attributes.featureCondition:desc",
                        "attributes.featureSex:asc",
                        "attributes.featureSex:desc",
                        "attributes.featureTotalLength:asc",
                        "attributes.featureTotalLength:desc",
                        "id:asc",
                        "id:desc",
                        "attributes.identifiersCatalogNumber:asc",
                        "attributes.identifiersCatalogNumber:desc",
                        "attributes.identifiersOtherIdentifiers:asc",
                        "attributes.identifiersOtherIdentifiers:desc",
                        "attributes.idNumeric:asc",
                        "attributes.idNumeric:desc",
                        "attributes.originInformationLocality:asc",
                        "attributes.originInformationLocality:desc",
                        "attributes.physicalUnitOtherPreparation:asc",
                        "attributes.physicalUnitOtherPreparation:desc",
                        "attributes.physicalUnitSkeleton:asc",
                        "attributes.physicalUnitSkeleton:desc",
                        "attributes.physicalUnitSkin:asc",
                        "attributes.physicalUnitSkin:desc",
                        "attributes.physicalUnitWetPreparation:asc",
                        "attributes.physicalUnitWetPreparation:desc",
                        "attributes.recordEventCataloged:asc",
                        "attributes.recordEventCataloged:desc",
                        "attributes.recordEventLastModified:asc",
                        "attributes.recordEventLastModified:desc",
                        "attributes.recordEventRegistered:asc",
                        "attributes.recordEventRegistered:desc",
                        "attributes.taxonomyCuratorialName:asc",
                        "attributes.taxonomyCuratorialName:desc",
                        "attributes.taxonomyFamily:asc",
                        "attributes.taxonomyFamily:desc",
                        "attributes.taxonomyGenus:asc",
                        "attributes.taxonomyGenus:desc",
                        "attributes.taxonomySpecies:asc",
                        "attributes.taxonomySpecies:desc",
                        "attributes.taxonomySubspecies:asc",
                        "attributes.taxonomySubspecies:desc"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "searchSpecimenUpdateViewRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "customObject",
                    "enum": [
                      "customObject"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "searchSpecimenRequestUpdateViewRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "customObject",
                    "enum": [
                      "customObject"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "specimen",
                    "enum": [
                      "specimen"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/specimen"
                  },
                  "relationships": {
                    "properties": {
                      "causeOfDeathTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "causeOfDeathType"
                                  ],
                                  "example": "causeOfDeathType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "curatorialTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "establishmentMeansTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "establishmentMeansType"
                                  ],
                                  "example": "establishmentMeansType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "featureTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "featureType"
                                  ],
                                  "example": "featureType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "identifierTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "identifierType"
                                  ],
                                  "example": "identifierType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "normalizedAgents": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "normalizedAgent"
                                  ],
                                  "example": "normalizedAgent",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "physicalObjects": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "physicalObject"
                                  ],
                                  "example": "physicalObject",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "places": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "preparationTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "preparationType"
                                  ],
                                  "example": "preparationType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "taxonNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "typeSpecimenType": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "typeSpecimenType"
                                    ],
                                    "example": "typeSpecimenType",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "specimen",
              "relationships": {
                "places": {
                  "data": [
                    {
                      "id": "1",
                      "type": "place"
                    },
                    {
                      "id": "2",
                      "type": "place"
                    },
                    {
                      "id": "3",
                      "type": "place"
                    },
                    {
                      "id": "4",
                      "type": "place"
                    },
                    {
                      "id": "5",
                      "type": "place"
                    }
                  ]
                },
                "featureTypes": {
                  "data": [
                    {
                      "id": "2",
                      "type": "featureType"
                    }
                  ]
                },
                "physicalObjects": {
                  "data": [
                    {
                      "id": "2234",
                      "type": "physicalObject"
                    }
                  ]
                }
              },
              "attributes": {
                "publishRecord": true,
                "individual": {
                  "collectionItems": [
                    {
                      "alternateIdentifiersText": "alternateIdentifiersText",
                      "physicalObject": {
                        "id": "2234",
                        "type": "physicalObject"
                      },
                      "physicalObjectText": "physicalObjectText"
                    }
                  ],
                  "identifiers": [
                    {
                      "identifierType": {
                        "id": "1",
                        "type": "identifierType"
                      },
                      "namespace": "",
                      "remarks": "",
                      "value": "123456"
                    }
                  ],
                  "determinations": [
                    {
                      "determinedByAgent": {
                        "textV": "determinedByAgentText"
                      },
                      "remarks": "remarks"
                    }
                  ],
                  "featureObservations": [
                    {
                      "featureObservationAgent": "featureObservationAgent",
                      "featureObservationText": "21",
                      "featureType": {
                        "id": "1",
                        "type": "featureType"
                      },
                      "methodText": "methodText",
                      "lid": "eed22ecc-7927-4b32-ae36-8e4e1dd465a8"
                    }
                  ],
                  "collectingInformation": [
                    {
                      "collectorsText": "collectorsText",
                      "event": {
                        "dateRange": {
                          "endDate": {
                            "dateText": "endDate"
                          }
                        },
                        "expeditionText": "expeditionText",
                        "locationInformation": {
                          "coordinatesVerbatim": "coordinatesVerbatim",
                          "places": [
                            {
                              "id": "1",
                              "type": "place"
                            },
                            {
                              "id": "2",
                              "type": "place"
                            },
                            {
                              "id": "3",
                              "type": "place"
                            },
                            {
                              "id": "4",
                              "type": "place"
                            },
                            {
                              "id": "5",
                              "type": "place"
                            }
                          ],
                          "georeferenceSourcesText": "georeferenceSourcesText",
                          "localityV": "localityV",
                          "position": {
                            "geodeticDatum": "geodeticDatum text",
                            "latitude": "latitude-string",
                            "longitude": "longitude-string",
                            "uncertaintyInMeters": 10
                          },
                          "remarks": "remarks",
                          "verticalPosition": {
                            "maximumDepthInMeters": 100,
                            "maximumElevationInMeters": 100,
                            "minimumDepthInMeters": 20,
                            "minimumElevationInMeters": 20
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "specimen",
            "relationships": {
              "places": {
                "data": [
                  {
                    "id": "1",
                    "type": "place"
                  },
                  {
                    "id": "2",
                    "type": "place"
                  },
                  {
                    "id": "3",
                    "type": "place"
                  },
                  {
                    "id": "4",
                    "type": "place"
                  },
                  {
                    "id": "5",
                    "type": "place"
                  }
                ]
              },
              "featureTypes": {
                "data": [
                  {
                    "id": "2",
                    "type": "featureType"
                  }
                ]
              },
              "physicalObjects": {
                "data": [
                  {
                    "id": "2234",
                    "type": "physicalObject"
                  }
                ]
              }
            },
            "attributes": {
              "publishRecord": true,
              "individual": {
                "collectionItems": [
                  {
                    "alternateIdentifiersText": "alternateIdentifiersText",
                    "physicalObject": {
                      "id": "2234",
                      "type": "physicalObject"
                    },
                    "physicalObjectText": "physicalObjectText"
                  }
                ],
                "identifiers": [
                  {
                    "identifierType": {
                      "id": "1",
                      "type": "identifierType"
                    },
                    "namespace": "",
                    "remarks": "",
                    "value": "123456"
                  }
                ],
                "determinations": [
                  {
                    "determinedByAgent": {
                      "textV": "determinedByAgentText"
                    },
                    "remarks": "remarks"
                  }
                ],
                "featureObservations": [
                  {
                    "featureObservationAgent": "featureObservationAgent",
                    "featureObservationText": "21",
                    "featureType": {
                      "id": "1",
                      "type": "featureType"
                    },
                    "methodText": "methodText",
                    "lid": "eed22ecc-7927-4b32-ae36-8e4e1dd465a8"
                  }
                ],
                "collectingInformation": [
                  {
                    "collectorsText": "collectorsText",
                    "event": {
                      "dateRange": {
                        "endDate": {
                          "dateText": "endDate"
                        }
                      },
                      "expeditionText": "expeditionText",
                      "locationInformation": {
                        "coordinatesVerbatim": "coordinatesVerbatim",
                        "places": [
                          {
                            "id": "1",
                            "type": "place"
                          },
                          {
                            "id": "2",
                            "type": "place"
                          },
                          {
                            "id": "3",
                            "type": "place"
                          },
                          {
                            "id": "4",
                            "type": "place"
                          },
                          {
                            "id": "5",
                            "type": "place"
                          }
                        ],
                        "georeferenceSourcesText": "georeferenceSourcesText",
                        "localityV": "localityV",
                        "position": {
                          "geodeticDatum": "geodeticDatum text",
                          "latitude": "latitude-string",
                          "longitude": "longitude-string",
                          "uncertaintyInMeters": 10
                        },
                        "remarks": "remarks",
                        "verticalPosition": {
                          "maximumDepthInMeters": 100,
                          "maximumElevationInMeters": 100,
                          "minimumDepthInMeters": 20,
                          "minimumElevationInMeters": 20
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenQueryRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "queryBody",
                "enum": [
                  "queryBody"
                ],
                "type": "string"
              },
              "attributes": {
                "properties": {
                  "aggregations": {
                    "items": {
                      "$ref": "#/components/schemas/queryAggregation"
                    },
                    "type": "array"
                  },
                  "includeDeactivated": {
                    "description": "Will include deactivated items",
                    "default": false,
                    "type": "boolean"
                  },
                  "limit": {
                    "description": "Limit the result",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "offset": {
                    "description": "Offset the result",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "query": {
                    "$ref": "#/components/schemas/queryRoot"
                  },
                  "scroll": {
                    "default": false,
                    "example": false,
                    "description": "If true elastic search scroll will be used",
                    "type": "boolean"
                  },
                  "scrollId": {
                    "description": "Elastic search scroll id",
                    "type": "string"
                  },
                  "sort": {
                    "description": "When provided response will be sorted",
                    "items": {
                      "enum": [
                        "relevance"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "specimen",
                    "enum": [
                      "specimen"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/specimen"
                  },
                  "relationships": {
                    "properties": {
                      "causeOfDeathTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "causeOfDeathType"
                                  ],
                                  "example": "causeOfDeathType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "curatorialTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "establishmentMeansTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "establishmentMeansType"
                                  ],
                                  "example": "establishmentMeansType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "featureTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "featureType"
                                  ],
                                  "example": "featureType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "identifierTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "identifierType"
                                  ],
                                  "example": "identifierType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "normalizedAgents": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "normalizedAgent"
                                  ],
                                  "example": "normalizedAgent",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "physicalObjects": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "physicalObject"
                                  ],
                                  "example": "physicalObject",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "places": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "preparationTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "preparationType"
                                  ],
                                  "example": "preparationType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "taxonNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "typeSpecimenType": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "typeSpecimenType"
                                    ],
                                    "example": "typeSpecimenType",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipNormalizedAgentsRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "normalizedAgent",
                  "enum": [
                    "normalizedAgent"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipCauseOfDeathTypesRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "causeOfDeathType",
                  "enum": [
                    "causeOfDeathType"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipCuratorialTaxonRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxon",
                    "enum": [
                      "taxon"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipEstablishmentMeansTypesRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "establishmentMeansType",
                  "enum": [
                    "establishmentMeansType"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipFeatureTypesRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "featureType",
                  "enum": [
                    "featureType"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipIdentifierTypesRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "identifierType",
                  "enum": [
                    "identifierType"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipPhysicalObjectsRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "physicalObject",
                  "enum": [
                    "physicalObject"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipPlacesRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "place",
                  "enum": [
                    "place"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipPreparationTypesRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "preparationType",
                  "enum": [
                    "preparationType"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipTaxonNamesRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "taxonName",
                  "enum": [
                    "taxonName"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipTypeSpecimenTypeRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "typeSpecimenType",
                    "enum": [
                      "typeSpecimenType"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "physicalObjectCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "physicalObject",
                    "enum": [
                      "physicalObject"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/physicalObject"
                  },
                  "relationships": {
                    "properties": {
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "storageLocation": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "physicalObject",
              "attributes": {
                "storageLocationText": "Sorex minutus"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "physicalObject",
            "attributes": {
              "storageLocationText": "Sorex minutus"
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "physicalObjectUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "physicalObject",
                    "enum": [
                      "physicalObject"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/physicalObject"
                  },
                  "relationships": {
                    "properties": {
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "storageLocation": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "physicalObjectUpdateRelationshipStorageLocationRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "storageLocation",
                    "enum": [
                      "storageLocation"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "storageLocationCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "storageLocation",
                    "enum": [
                      "storageLocation"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/storageLocation"
                  },
                  "relationships": {
                    "properties": {
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "physicalObjects": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "physicalObject"
                                  ],
                                  "example": "physicalObject",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "preparationTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "preparationType"
                                  ],
                                  "example": "preparationType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "taxa": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "storageLocation",
              "attributes": {
                "name": "string"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "storageLocation",
            "attributes": {
              "name": "string"
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "storageLocationQueryRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "queryBody",
                "enum": [
                  "queryBody"
                ],
                "type": "string"
              },
              "attributes": {
                "properties": {
                  "aggregations": {
                    "items": {
                      "$ref": "#/components/schemas/queryAggregation"
                    },
                    "type": "array"
                  },
                  "excludeFields": {
                    "description": "When provided specified fields will be excluded (applied after include)",
                    "items": {
                      "enum": [
                        "id",
                        "attributes.name",
                        "attributes.group"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "includeFields": {
                    "description": "When provided only specified fields will be returned in response",
                    "items": {
                      "enum": [
                        "id",
                        "attributes.name",
                        "attributes.group"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "includeDeactivated": {
                    "description": "Will include deactivated items",
                    "default": false,
                    "type": "boolean"
                  },
                  "limit": {
                    "description": "Limit the result",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "offset": {
                    "description": "Offset the result",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "query": {
                    "$ref": "#/components/schemas/queryRoot"
                  },
                  "scroll": {
                    "default": false,
                    "example": false,
                    "description": "If true elastic search scroll will be used",
                    "type": "boolean"
                  },
                  "scrollId": {
                    "description": "Elastic search scroll id",
                    "type": "string"
                  },
                  "sort": {
                    "description": "When provided response will be sorted",
                    "items": {
                      "enum": [
                        "relevance",
                        "id:asc",
                        "id:desc",
                        "attributes.name:asc",
                        "attributes.name:desc"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "storageLocationUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "storageLocation",
                    "enum": [
                      "storageLocation"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/storageLocation"
                  },
                  "relationships": {
                    "properties": {
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "physicalObjects": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "physicalObject"
                                  ],
                                  "example": "physicalObject",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "preparationTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "preparationType"
                                  ],
                                  "example": "preparationType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "taxa": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "storageLocationUpdateRelationshipChildrenRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "storageLocation",
                  "enum": [
                    "storageLocation"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "storageLocationUpdateRelationshipParentRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "storageLocation",
                    "enum": [
                      "storageLocation"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "storageLocationUpdateRelationshipPhysicalObjectsRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "physicalObject",
                  "enum": [
                    "physicalObject"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxon",
                    "enum": [
                      "taxon"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/taxon"
                  },
                  "relationships": {
                    "properties": {
                      "acceptedTaxonName": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxonName"
                                    ],
                                    "example": "taxonName",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "storageLocations": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "synonyms": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "vernacularNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "attributes": {},
              "type": "taxon"
            }
          }
        },
        "example": {
          "data": {
            "attributes": {},
            "type": "taxon"
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonQueryRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "queryBody",
                "enum": [
                  "queryBody"
                ],
                "type": "string"
              },
              "attributes": {
                "properties": {
                  "aggregations": {
                    "items": {
                      "$ref": "#/components/schemas/queryAggregation"
                    },
                    "type": "array"
                  },
                  "excludeFields": {
                    "description": "When provided specified fields will be excluded (applied after include)",
                    "items": {
                      "enum": [
                        "id"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "includeFields": {
                    "description": "When provided only specified fields will be returned in response",
                    "items": {
                      "enum": [
                        "id"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "includeDeactivated": {
                    "description": "Will include deactivated items",
                    "default": false,
                    "type": "boolean"
                  },
                  "limit": {
                    "description": "Limit the result",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "offset": {
                    "description": "Offset the result",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "query": {
                    "$ref": "#/components/schemas/queryRoot"
                  },
                  "scroll": {
                    "default": false,
                    "example": false,
                    "description": "If true elastic search scroll will be used",
                    "type": "boolean"
                  },
                  "scrollId": {
                    "description": "Elastic search scroll id",
                    "type": "string"
                  },
                  "sort": {
                    "description": "When provided response will be sorted",
                    "items": {
                      "enum": [
                        "relevance"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxon",
                    "enum": [
                      "taxon"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/taxon"
                  },
                  "relationships": {
                    "properties": {
                      "acceptedTaxonName": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxonName"
                                    ],
                                    "example": "taxonName",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "storageLocations": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "synonyms": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "vernacularNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationshipParentRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxon",
                    "enum": [
                      "taxon"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationshipChildrenRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "taxon",
                  "enum": [
                    "taxon"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationshipAcceptedTaxonNameRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxonName",
                    "enum": [
                      "taxonName"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationshipSpecimensRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "specimen",
                  "enum": [
                    "specimen"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationshipSynonymsRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "taxonName",
                  "enum": [
                    "taxonName"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationshipVernacularNamesRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "default": "taxonName",
                  "enum": [
                    "taxonName"
                  ],
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "example": "1234"
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonNameCreateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxonName",
                    "enum": [
                      "taxonName"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/taxonName"
                  },
                  "relationships": {
                    "properties": {
                      "acceptedToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "synonymToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "vernacularToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-examples": {
          "primary": {
            "data": {
              "type": "taxonName",
              "attributes": {
                "name": "Addax nasomaculatus",
                "rank": "species",
                "rubinNumber": "7904803",
                "taxonNameType": "scientific"
              }
            }
          }
        },
        "example": {
          "data": {
            "type": "taxonName",
            "attributes": {
              "name": "Addax nasomaculatus",
              "rank": "species",
              "rubinNumber": "7904803",
              "taxonNameType": "scientific"
            }
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonNameQueryRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "example": "1234"
              },
              "type": {
                "default": "queryBody",
                "enum": [
                  "queryBody"
                ],
                "type": "string"
              },
              "attributes": {
                "properties": {
                  "aggregations": {
                    "items": {
                      "$ref": "#/components/schemas/queryAggregation"
                    },
                    "type": "array"
                  },
                  "excludeFields": {
                    "description": "When provided specified fields will be excluded (applied after include)",
                    "items": {
                      "enum": [
                        "id",
                        "attributes.name",
                        "attributes.rank"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "includeFields": {
                    "description": "When provided only specified fields will be returned in response",
                    "items": {
                      "enum": [
                        "id",
                        "attributes.name",
                        "attributes.rank"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "includeDeactivated": {
                    "description": "Will include deactivated items",
                    "default": false,
                    "type": "boolean"
                  },
                  "limit": {
                    "description": "Limit the result",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "offset": {
                    "description": "Offset the result",
                    "minimum": 0,
                    "type": "integer"
                  },
                  "query": {
                    "$ref": "#/components/schemas/queryRoot"
                  },
                  "scroll": {
                    "default": false,
                    "example": false,
                    "description": "If true elastic search scroll will be used",
                    "type": "boolean"
                  },
                  "scrollId": {
                    "description": "Elastic search scroll id",
                    "type": "string"
                  },
                  "sort": {
                    "description": "When provided response will be sorted",
                    "items": {
                      "enum": [
                        "relevance",
                        "id:asc",
                        "id:desc",
                        "attributes.name:asc",
                        "attributes.name:desc"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                }
              }
            },
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonNameUpdateRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxonName",
                    "enum": [
                      "taxonName"
                    ],
                    "type": "string"
                  },
                  "attributes": {
                    "$ref": "#/components/schemas/taxonName"
                  },
                  "relationships": {
                    "properties": {
                      "acceptedToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "synonymToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "vernacularToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonNameUpdateRelationshipAcceptedToTaxonRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxon",
                    "enum": [
                      "taxon"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonNameUpdateRelationshipSynonymToTaxonRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxon",
                    "enum": [
                      "taxon"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "taxonNameUpdateRelationshipVernacularToTaxonRequest": {
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "1234"
                  },
                  "type": {
                    "default": "taxon",
                    "enum": [
                      "taxon"
                    ],
                    "type": "string"
                  }
                }
              }
            ],
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "normalizedAgentCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/normalizedAgent"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "user": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "user"
                                    ],
                                    "example": "user",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "normalizedAgent",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/normalizedAgents",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "normalizedAgentGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/normalizedAgent"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "user": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "user"
                                    ],
                                    "example": "user",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "normalizedAgent",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/normalizedAgents/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "normalizedAgentGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/normalizedAgent"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "resourceActivities": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "resourceActivity"
                                ],
                                "example": "resourceActivity",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "specimens": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "specimen"
                                ],
                                "example": "specimen",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "user": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "user"
                                  ],
                                  "example": "user",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "normalizedAgent",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/normalizedAgents",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "normalizedAgentQueryResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/customObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "resourceActivities": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "resourceActivity"
                                ],
                                "example": "resourceActivity",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "specimens": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "specimen"
                                ],
                                "example": "specimen",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "user": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "user"
                                  ],
                                  "example": "user",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "customObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/normalizedAgents/actions/query",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "normalizedAgentUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/normalizedAgent"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "user": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "user"
                                    ],
                                    "example": "user",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "normalizedAgent",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/normalizedAgents/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "normalizedAgentImportDataFromFileResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/normalizedAgents/actions/importDataFromFile",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "normalizedAgentDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/normalizedAgent"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "user": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "user"
                                    ],
                                    "example": "user",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "normalizedAgent",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/normalizedAgents/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "normalizedAgentGetRelationshipSpecimensResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/normalizedAgents/{id}/relationships/specimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "normalizedAgentGetRelationshipUserResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/user"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "user",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/normalizedAgents/{id}/relationships/user",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "normalizedAgentUpdateRelationshipUserResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/normalizedAgent"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "normalizedAgent",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/agent/v01/normalizedAgents/{id}/relationships/user",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "loginUserResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "access_token": {
            "type": "string",
            "example": "xxxx",
            "x-summary": ""
          },
          "expires_in": {
            "type": "integer",
            "example": 300,
            "x-summary": ""
          },
          "not-before-policy": {
            "type": "integer",
            "example": 0,
            "x-summary": ""
          },
          "refresh_expires_in": {
            "type": "integer",
            "example": 1800,
            "x-summary": ""
          },
          "refresh_token": {
            "type": "string",
            "example": "xxxx",
            "x-summary": ""
          },
          "session_state": {
            "type": "string",
            "example": "bearer",
            "x-summary": ""
          },
          "token_type": {
            "type": "string",
            "example": "xxxx",
            "x-summary": ""
          }
        },
        "required": [
          "access_token"
        ],
        "x-summary": "",
        "description": ""
      },
      "userGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/user"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "normalizedAgent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "normalizedAgent"
                                  ],
                                  "example": "normalizedAgent",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "user",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/auth/v01/users/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "userGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/user"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "normalizedAgent": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "normalizedAgent"
                                ],
                                "example": "normalizedAgent",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "user",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/auth/v01/users",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "userInfoGetOneResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string",
            "example": "john.doe@example.com",
            "x-summary": ""
          },
          "family_name": {
            "type": "string",
            "example": "Doe",
            "x-summary": ""
          },
          "given_name": {
            "type": "string",
            "example": "John",
            "x-summary": ""
          },
          "name": {
            "type": "string",
            "example": "John Doe",
            "x-summary": ""
          },
          "preferred_username": {
            "type": "string",
            "example": "john doe",
            "x-summary": ""
          },
          "sub": {
            "type": "string",
            "example": "xxxx",
            "x-summary": ""
          }
        },
        "required": [
          "email",
          "preferred_username"
        ],
        "x-summary": "",
        "description": ""
      },
      "causeOfDeathTypeCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/causeOfDeathType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "causeOfDeathType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/causeOfDeathTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "causeOfDeathTypeGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/causeOfDeathType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "causeOfDeathType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/causeOfDeathTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "causeOfDeathTypeGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/causeOfDeathType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "causeOfDeathType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/causeOfDeathTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "causeOfDeathTypeImportDataFromFileResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/causeOfDeathTypes/actions/importDataFromFile",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "causeOfDeathTypeUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/causeOfDeathType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "causeOfDeathType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/causeOfDeathTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "causeOfDeathTypeDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/causeOfDeathType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "causeOfDeathType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/causeOfDeathTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "customTaxonNameTypeCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customTaxonNameType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customTaxonNameType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/customTaxonNameTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "customTaxonNameTypeGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customTaxonNameType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customTaxonNameType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/customTaxonNameTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "customTaxonNameTypeGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/customTaxonNameType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "customTaxonNameType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/customTaxonNameTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "customTaxonNameTypeImportDataFromFileResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/customTaxonNameTypes/actions/importDataFromFile",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "customTaxonNameTypeUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customTaxonNameType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customTaxonNameType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/customTaxonNameTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "customTaxonNameTypeDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customTaxonNameType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customTaxonNameType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/customTaxonNameTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "establishmentMeansTypeCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/establishmentMeansType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "establishmentMeansType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/establishmentMeansTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "establishmentMeansTypeGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/establishmentMeansType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "establishmentMeansType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/establishmentMeansTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "establishmentMeansTypeGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/establishmentMeansType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "establishmentMeansType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/establishmentMeansTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "establishmentMeansTypeImportDataFromFileResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/establishmentMeansTypes/actions/importDataFromFile",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "establishmentMeansTypeUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/establishmentMeansType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "establishmentMeansType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/establishmentMeansTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "establishmentMeansTypeDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/establishmentMeansType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "establishmentMeansType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/establishmentMeansTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "featureTypeCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/featureType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "featureType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "featureTypeGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/featureType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "featureType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "featureTypeGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/featureType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "featureType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "featureTypeImportDataFromFileResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureTypes/actions/importDataFromFile",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "featureTypeUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/featureType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "featureType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "featureTypeDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/featureType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "featureType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/featureTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "identifierTypeCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/identifierType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "identifierType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/identifierTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "identifierTypeGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/identifierType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "identifierType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/identifierTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "identifierTypeGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/identifierType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "identifierType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/identifierTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "identifierTypeImportDataFromFileResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/identifierTypes/actions/importDataFromFile",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "identifierTypeUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/identifierType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "identifierType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/identifierTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "identifierTypeDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/identifierType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "identifierType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/identifierTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "preparationTypeCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/preparationType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "preparationType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/preparationTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "preparationTypeGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/preparationType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "preparationType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/preparationTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "preparationTypeGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/preparationType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "preparationType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/preparationTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "preparationTypeImportDataFromFileResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/preparationTypes/actions/importDataFromFile",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "preparationTypeUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/preparationType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "preparationType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/preparationTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "preparationTypeDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/preparationType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "preparationType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/preparationTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "typeSpecimenTypeCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/typeSpecimenType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "typeSpecimenType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/typeSpecimenTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "typeSpecimenTypeGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/typeSpecimenType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "typeSpecimenType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/typeSpecimenTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "typeSpecimenTypeGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/typeSpecimenType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "typeSpecimenType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/typeSpecimenTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "typeSpecimenTypeImportDataFromFileResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/typeSpecimenTypes/actions/importDataFromFile",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "typeSpecimenTypeUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/typeSpecimenType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "typeSpecimenType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/typeSpecimenTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "typeSpecimenTypeDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/typeSpecimenType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "typeSpecimenType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/curatedList/v01/typeSpecimenTypes/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "exportJobGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/exportJob"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "exportJob",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/export/v01/exportJobs/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "exportJobGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/exportJob"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "exportJob",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/export/v01/exportJobs",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "exportJobDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/exportJob"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "exportJob",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/export/v01/exportJobs/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "exportJobCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/exportJob"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "exportJob",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/export/v01/exportJobs",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "exportJobStartJobResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/exportJob"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "exportJob",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/export/v01/exportJobs/actions/{id}/startJob",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "exportJobSetJobFailedResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/exportJob"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "exportJob",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/export/v01/exportJobs/actions/{id}/setJobFailed",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "exportJobSetJobSuccessResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/exportJob"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "exportJob",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/export/v01/exportJobs/actions/{id}/setJobSuccess",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "exportJobDownloadExportResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/exportJob"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "exportJob",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/export/v01/exportJobs/{id}/actions/downloadExport/{filePath}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "resourceActivityCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/resourceActivity"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "resourceActivity",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/log/v01/resourceActivitys",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "resourceActivityBulkCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/resourceActivity"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "resourceActivity",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/log/v01/resourceActivitys/actions/bulkCreate",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "resourceActivityGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/resourceActivity"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "resourceActivity",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/log/v01/resourceActivitys/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "resourceActivityGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/resourceActivity"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "resourceActivity",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/log/v01/resourceActivitys",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "resourceActivityUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/resourceActivity"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "resourceActivity",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/log/v01/resourceActivitys/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "resourceActivityDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/resourceActivity"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "resourceActivity",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/log/v01/resourceActivitys/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "catalogNumberGenerateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/catalogNumber"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "catalogNumber",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/identifiers/v01/catalogNumbers/actions/generate",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "catalogNumberCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/catalogNumber"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "catalogNumber",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/identifiers/v01/catalogNumbers",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "catalogNumberDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/catalogNumber"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "catalogNumber",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/identifiers/v01/catalogNumbers/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "catalogNumberGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/catalogNumber"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "catalogNumber",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/identifiers/v01/catalogNumbers/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "catalogNumberValidateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/identifiers/v01/catalogNumbers/actions/validate",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "catalogNumberGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/catalogNumber"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "catalogNumber",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/identifiers/v01/catalogNumbers",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "catalogNumberUpdateViewResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/identifiers/v01/catalogNumbers/actions/updateView",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "catalogNumberRebuildViewResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/identifiers/v01/catalogNumbers/actions/rebuildView",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "jobCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/job"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "job",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/jobs/v01/jobs",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "jobGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/job"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "job",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/jobs/v01/jobs/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "jobGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/job"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "job",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/jobs/v01/jobs",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "jobUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/job"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "job",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/jobs/v01/jobs/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "jobDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/job"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "job",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/jobs/v01/jobs/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "jobStartJobResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/job"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "job",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/jobs/v01/jobs/actions/{id}/startJob",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "jobSetJobFailedResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/job"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "job",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/jobs/v01/jobs/actions/{id}/setJobFailed",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "jobSetJobSuccessResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/job"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "job",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/jobs/v01/jobs/actions/{id}/setJobSuccess",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "dataModelMigrationLogCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/dataModelMigrationLog"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "dataModelMigrationLog",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/migrationService/v01/dataModelMigrationLogs",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "dataModelMigrationLogGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/dataModelMigrationLog"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "dataModelMigrationLog",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/migrationService/v01/dataModelMigrationLogs/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "dataModelMigrationLogGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/dataModelMigrationLog"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "dataModelMigrationLog",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/migrationService/v01/dataModelMigrationLogs",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "dataModelMigrationLogUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/dataModelMigrationLog"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "dataModelMigrationLog",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/migrationService/v01/dataModelMigrationLogs/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/place"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "place"
                                    ],
                                    "example": "place",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "place",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/place"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "place"
                                    ],
                                    "example": "place",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "place",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/place"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "parent": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "children": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "resourceActivities": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "resourceActivity"
                                ],
                                "example": "resourceActivity",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "specimens": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "specimen"
                                ],
                                "example": "specimen",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "place",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeQueryResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/customObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "parent": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "children": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "resourceActivities": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "resourceActivity"
                                ],
                                "example": "resourceActivity",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "specimens": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "specimen"
                                ],
                                "example": "specimen",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "customObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/actions/query",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/place"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "place"
                                    ],
                                    "example": "place",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "place",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/place"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "place"
                                    ],
                                    "example": "place",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "place",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeImportDataFromFileResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/actions/importDataFromFile",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "placeGetRelationshipChildrenResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/place"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "place",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/{id}/relationships/children",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeUpdateRelationshipChildrenResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/place"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "place",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/{id}/relationships/children",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeGetRelationshipParentResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/place"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "place",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/{id}/relationships/parent",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeUpdateRelationshipParentResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/place"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "place",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/{id}/relationships/parent",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeGetRelationshipSpecimensResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/{id}/relationships/specimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "placeUpdateRelationshipSpecimensResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/place"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "place",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/locality/v01/places/{id}/relationships/specimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "cachePhysicalObjectCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/cachePhysicalObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "storageLocation": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "cachePhysicalObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/search/v01/cachePhysicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "cachePhysicalObjectGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/cachePhysicalObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "storageLocation": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "cachePhysicalObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/search/v01/cachePhysicalObjects/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "cachePhysicalObjectGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/cachePhysicalObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "storageLocation": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "cachePhysicalObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/search/v01/cachePhysicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "cachePhysicalObjectEmptyViewResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/search/v01/cachePhysicalObjects/actions/emptyView",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "cachePhysicalObjectUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/cachePhysicalObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "storageLocation": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "cachePhysicalObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/search/v01/cachePhysicalObjects/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "cachePhysicalObjectDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/cachePhysicalObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "storageLocation": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "cachePhysicalObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/search/v01/cachePhysicalObjects/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "cachePhysicalObjectRebuildViewResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/search/v01/cachePhysicalObjects/actions/rebuildView",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "searchSpecimenGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/searchSpecimen"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "searchSpecimen",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/search/v01/searchSpecimens/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "searchSpecimenQueryResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/customObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "customObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/search/v01/searchSpecimens/actions/query",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "searchSpecimenDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/searchSpecimen"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "searchSpecimen",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/search/v01/searchSpecimens/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "searchSpecimenGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/searchSpecimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "searchSpecimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/search/v01/searchSpecimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "searchSpecimenEmptyViewResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/search/v01/searchSpecimens/actions/emptyView",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "searchSpecimenUpdateViewResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/search/v01/searchSpecimens/actions/updateView",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "searchSpecimenRebuildViewResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/search/v01/searchSpecimens/actions/rebuildView",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "searchSpecimenRequestRebuildViewResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/search/v01/searchSpecimens/actions/requestRebuildView",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "searchSpecimenRequestUpdateViewResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/search/v01/searchSpecimens/actions/requestUpdateView",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "specimenCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/specimen"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "causeOfDeathTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "causeOfDeathType"
                                  ],
                                  "example": "causeOfDeathType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "curatorialTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "establishmentMeansTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "establishmentMeansType"
                                  ],
                                  "example": "establishmentMeansType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "featureTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "featureType"
                                  ],
                                  "example": "featureType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "identifierTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "identifierType"
                                  ],
                                  "example": "identifierType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "normalizedAgents": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "normalizedAgent"
                                  ],
                                  "example": "normalizedAgent",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "physicalObjects": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "physicalObject"
                                  ],
                                  "example": "physicalObject",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "places": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "preparationTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "preparationType"
                                  ],
                                  "example": "preparationType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "taxonNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "typeSpecimenType": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "typeSpecimenType"
                                    ],
                                    "example": "typeSpecimenType",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "specimen",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/specimen"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "causeOfDeathTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "causeOfDeathType"
                                  ],
                                  "example": "causeOfDeathType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "curatorialTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "establishmentMeansTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "establishmentMeansType"
                                  ],
                                  "example": "establishmentMeansType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "featureTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "featureType"
                                  ],
                                  "example": "featureType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "identifierTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "identifierType"
                                  ],
                                  "example": "identifierType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "normalizedAgents": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "normalizedAgent"
                                  ],
                                  "example": "normalizedAgent",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "physicalObjects": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "physicalObject"
                                  ],
                                  "example": "physicalObject",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "places": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "preparationTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "preparationType"
                                  ],
                                  "example": "preparationType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "taxonNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "typeSpecimenType": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "typeSpecimenType"
                                    ],
                                    "example": "typeSpecimenType",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "specimen",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "causeOfDeathTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "causeOfDeathType"
                                ],
                                "example": "causeOfDeathType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "curatorialTaxon": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "establishmentMeansTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "establishmentMeansType"
                                ],
                                "example": "establishmentMeansType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "featureTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "featureType"
                                ],
                                "example": "featureType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "identifierTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "identifierType"
                                ],
                                "example": "identifierType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "normalizedAgents": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "normalizedAgent"
                                ],
                                "example": "normalizedAgent",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "physicalObjects": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "physicalObject"
                                ],
                                "example": "physicalObject",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "places": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "preparationTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "preparationType"
                                ],
                                "example": "preparationType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "resourceActivities": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "resourceActivity"
                                ],
                                "example": "resourceActivity",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "taxonNames": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxonName"
                                ],
                                "example": "taxonName",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "typeSpecimenType": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "typeSpecimenType"
                                  ],
                                  "example": "typeSpecimenType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenQueryResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/customObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "causeOfDeathTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "causeOfDeathType"
                                ],
                                "example": "causeOfDeathType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "curatorialTaxon": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "establishmentMeansTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "establishmentMeansType"
                                ],
                                "example": "establishmentMeansType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "featureTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "featureType"
                                ],
                                "example": "featureType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "identifierTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "identifierType"
                                ],
                                "example": "identifierType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "normalizedAgents": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "normalizedAgent"
                                ],
                                "example": "normalizedAgent",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "physicalObjects": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "physicalObject"
                                ],
                                "example": "physicalObject",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "places": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "place"
                                ],
                                "example": "place",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "preparationTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "preparationType"
                                ],
                                "example": "preparationType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "resourceActivities": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "resourceActivity"
                                ],
                                "example": "resourceActivity",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "taxonNames": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxonName"
                                ],
                                "example": "taxonName",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "typeSpecimenType": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "typeSpecimenType"
                                  ],
                                  "example": "typeSpecimenType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "customObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/actions/query",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/specimen"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "causeOfDeathTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "causeOfDeathType"
                                  ],
                                  "example": "causeOfDeathType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "curatorialTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "establishmentMeansTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "establishmentMeansType"
                                  ],
                                  "example": "establishmentMeansType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "featureTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "featureType"
                                  ],
                                  "example": "featureType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "identifierTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "identifierType"
                                  ],
                                  "example": "identifierType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "normalizedAgents": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "normalizedAgent"
                                  ],
                                  "example": "normalizedAgent",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "physicalObjects": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "physicalObject"
                                  ],
                                  "example": "physicalObject",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "places": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "preparationTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "preparationType"
                                  ],
                                  "example": "preparationType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "taxonNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "typeSpecimenType": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "typeSpecimenType"
                                    ],
                                    "example": "typeSpecimenType",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "specimen",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/specimen"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "causeOfDeathTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "causeOfDeathType"
                                  ],
                                  "example": "causeOfDeathType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "curatorialTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "establishmentMeansTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "establishmentMeansType"
                                  ],
                                  "example": "establishmentMeansType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "featureTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "featureType"
                                  ],
                                  "example": "featureType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "identifierTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "identifierType"
                                  ],
                                  "example": "identifierType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "normalizedAgents": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "normalizedAgent"
                                  ],
                                  "example": "normalizedAgent",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "physicalObjects": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "physicalObject"
                                  ],
                                  "example": "physicalObject",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "places": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "place"
                                  ],
                                  "example": "place",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "preparationTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "preparationType"
                                  ],
                                  "example": "preparationType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "taxonNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "typeSpecimenType": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "typeSpecimenType"
                                    ],
                                    "example": "typeSpecimenType",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "specimen",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenImportDataFromFileResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/actions/importDataFromFile",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "specimenGetRelationshipNormalizedAgentsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/normalizedAgent"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "normalizedAgent",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/normalizedAgents",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipNormalizedAgentsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/normalizedAgents",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetRelationshipCauseOfDeathTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/causeOfDeathType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "causeOfDeathType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/causeOfDeathTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipCauseOfDeathTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/causeOfDeathTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetRelationshipCuratorialTaxonResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxon"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "taxon",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/curatorialTaxon",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipCuratorialTaxonResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/specimen"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "specimen",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/curatorialTaxon",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetRelationshipEstablishmentMeansTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/establishmentMeansType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "establishmentMeansType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/establishmentMeansTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipEstablishmentMeansTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/establishmentMeansTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetRelationshipFeatureTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/featureType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "featureType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/featureTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipFeatureTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/featureTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetRelationshipIdentifierTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/identifierType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "identifierType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/identifierTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipIdentifierTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/identifierTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetRelationshipPhysicalObjectsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/physicalObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "physicalObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/physicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipPhysicalObjectsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/physicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetRelationshipPlacesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/place"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "place",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/places",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipPlacesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/places",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetRelationshipPreparationTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/preparationType"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "preparationType",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/preparationTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipPreparationTypesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/preparationTypes",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetRelationshipTaxonNamesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxonName"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "taxonName",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/taxonNames",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipTaxonNamesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/taxonNames",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenGetRelationshipTypeSpecimenTypeResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/typeSpecimenType"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "typeSpecimenType",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/typeSpecimenType",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "specimenUpdateRelationshipTypeSpecimenTypeResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/specimen"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "specimen",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/specimen/v01/specimens/{id}/relationships/typeSpecimenType",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "getStatusResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "up": {
                "type": "boolean"
              }
            },
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "x-summary": "",
        "description": ""
      },
      "physicalObjectCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/physicalObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "storageLocation": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "physicalObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "physicalObjectGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/physicalObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "storageLocation": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "physicalObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "physicalObjectGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/physicalObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "specimens": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "specimen"
                                ],
                                "example": "specimen",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "storageLocation": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "physicalObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "physicalObjectUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/physicalObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "storageLocation": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "physicalObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "physicalObjectDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/physicalObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "storageLocation": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "physicalObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "physicalObjectGetRelationshipSpecimensResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}/relationships/specimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "physicalObjectGetRelationshipStorageLocationResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/storageLocation"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "storageLocation",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}/relationships/storageLocation",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "physicalObjectUpdateRelationshipStorageLocationResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/physicalObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "physicalObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/physicalObjects/{id}/relationships/storageLocation",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/storageLocation"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "physicalObjects": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "physicalObject"
                                  ],
                                  "example": "physicalObject",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "preparationTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "preparationType"
                                  ],
                                  "example": "preparationType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "taxa": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "storageLocation",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/storageLocation"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "physicalObjects": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "physicalObject"
                                  ],
                                  "example": "physicalObject",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "preparationTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "preparationType"
                                  ],
                                  "example": "preparationType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "taxa": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "storageLocation",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/storageLocation"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "children": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "parent": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "physicalObjects": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "physicalObject"
                                ],
                                "example": "physicalObject",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "preparationTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "preparationType"
                                ],
                                "example": "preparationType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "resourceActivities": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "resourceActivity"
                                ],
                                "example": "resourceActivity",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "taxa": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "storageLocation",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationQueryResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/customObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "children": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "parent": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "physicalObjects": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "physicalObject"
                                ],
                                "example": "physicalObject",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "preparationTypes": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "preparationType"
                                ],
                                "example": "preparationType",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "resourceActivities": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "resourceActivity"
                                ],
                                "example": "resourceActivity",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "taxa": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "customObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/actions/query",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/storageLocation"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "physicalObjects": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "physicalObject"
                                  ],
                                  "example": "physicalObject",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "preparationTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "preparationType"
                                  ],
                                  "example": "preparationType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "taxa": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "storageLocation",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/storageLocation"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "storageLocation"
                                    ],
                                    "example": "storageLocation",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "physicalObjects": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "physicalObject"
                                  ],
                                  "example": "physicalObject",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "preparationTypes": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "preparationType"
                                  ],
                                  "example": "preparationType",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "taxa": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "storageLocation",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationImportDataFromFileResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/actions/importDataFromFile",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "storageLocationGetRelationshipChildrenResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/storageLocation"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "storageLocation",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}/relationships/children",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationUpdateRelationshipChildrenResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/storageLocation"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "storageLocation",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}/relationships/children",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationGetRelationshipParentResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/storageLocation"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "storageLocation",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}/relationships/parent",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationUpdateRelationshipParentResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/storageLocation"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "storageLocation",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}/relationships/parent",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationGetRelationshipPhysicalObjectsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/physicalObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "physicalObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}/relationships/physicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationUpdateRelationshipPhysicalObjectsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/storageLocation"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "storageLocation",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}/relationships/physicalObjects",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "storageLocationGetRelationshipTaxaResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxon"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "taxon",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/storage/v01/storageLocations/{id}/relationships/taxa",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxon"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "acceptedTaxonName": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxonName"
                                    ],
                                    "example": "taxonName",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "storageLocations": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "synonyms": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "vernacularNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "taxon",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxon"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "acceptedTaxonName": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxonName"
                                    ],
                                    "example": "taxonName",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "storageLocations": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "synonyms": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "vernacularNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "taxon",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxon"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "acceptedTaxonName": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "children": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "parent": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "resourceActivities": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "resourceActivity"
                                ],
                                "example": "resourceActivity",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "specimens": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "specimen"
                                ],
                                "example": "specimen",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "storageLocations": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "synonyms": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxonName"
                                ],
                                "example": "taxonName",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "vernacularNames": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxonName"
                                ],
                                "example": "taxonName",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "taxon",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonQueryResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/customObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "acceptedTaxonName": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "children": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxon"
                                ],
                                "example": "taxon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "parent": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "resourceActivities": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "resourceActivity"
                                ],
                                "example": "resourceActivity",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "specimens": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "specimen"
                                ],
                                "example": "specimen",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "storageLocations": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "storageLocation"
                                ],
                                "example": "storageLocation",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "synonyms": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxonName"
                                ],
                                "example": "taxonName",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "vernacularNames": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "taxonName"
                                ],
                                "example": "taxonName",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "customObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/actions/query",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxon"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "acceptedTaxonName": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxonName"
                                    ],
                                    "example": "taxonName",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "storageLocations": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "synonyms": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "vernacularNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "taxon",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxon"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "acceptedTaxonName": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxonName"
                                    ],
                                    "example": "taxonName",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "children": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "parent": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "specimens": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "specimen"
                                  ],
                                  "example": "specimen",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "storageLocations": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "storageLocation"
                                  ],
                                  "example": "storageLocation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "synonyms": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "vernacularNames": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxonName"
                                  ],
                                  "example": "taxonName",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "taxon",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonGetRelationshipParentResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxon"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "taxon",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/parent",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationshipParentResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxon"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "taxon",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/parent",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonImportDataFromFileResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/actions/importDataFromFile",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "taxonGetRelationshipChildrenResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxon"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "taxon",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/children",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationshipChildrenResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxon"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "taxon",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/children",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonGetRelationshipAcceptedTaxonNameResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxonName"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "taxonName",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/acceptedTaxonName",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationshipAcceptedTaxonNameResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxon"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "taxon",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/acceptedTaxonName",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonGetRelationshipSpecimensResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/specimen"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "specimen",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/specimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationshipSpecimensResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxon"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "taxon",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/specimens",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonGetRelationshipStorageLocationsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/storageLocation"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "storageLocation",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/storageLocations",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonGetRelationshipSynonymsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxonName"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "taxonName",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/synonyms",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationshipSynonymsResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxon"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "taxon",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/synonyms",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonGetRelationshipVernacularNamesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxonName"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "taxonName",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/vernacularNames",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonUpdateRelationshipVernacularNamesResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxon"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "type": {
                  "default": "taxon",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxa/{id}/relationships/vernacularNames",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxonName"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "acceptedToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "synonymToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "vernacularToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "taxonName",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameGetOneResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxonName"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "acceptedToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "synonymToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "vernacularToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "taxonName",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameGetManyResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/taxonName"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "acceptedToTaxon": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "resourceActivities": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "resourceActivity"
                                ],
                                "example": "resourceActivity",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "synonymToTaxon": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "vernacularToTaxon": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "taxonName",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameQueryResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "additionalProperties": false,
            "items": {
              "additionalProperties": false,
              "properties": {
                "attributes": {
                  "$ref": "#/components/schemas/customObject"
                },
                "id": {
                  "example": "1234",
                  "type": "string"
                },
                "relationships": {
                  "properties": {
                    "acceptedToTaxon": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "resourceActivities": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "example": "1234",
                                "type": "string"
                              },
                              "type": {
                                "enum": [
                                  "resourceActivity"
                                ],
                                "example": "resourceActivity",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "synonymToTaxon": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    },
                    "vernacularToTaxon": {
                      "additionalProperties": false,
                      "properties": {
                        "data": {
                          "oneOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "taxon"
                                  ],
                                  "example": "taxon",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": {
                  "default": "customObject",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array",
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames/actions/query",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameUpdateResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxonName"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "acceptedToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "synonymToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "vernacularToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "taxonName",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameDelResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxonName"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "relationships": {
                    "properties": {
                      "acceptedToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "resourceActivities": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "items": {
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "example": "1234",
                                  "type": "string"
                                },
                                "type": {
                                  "enum": [
                                    "resourceActivity"
                                  ],
                                  "example": "resourceActivity",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "synonymToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      },
                      "vernacularToTaxon": {
                        "additionalProperties": false,
                        "properties": {
                          "data": {
                            "oneOf": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "example": "1234",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "taxon"
                                    ],
                                    "example": "taxon",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "default": "taxonName",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames/{id}",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameGetRelationshipAcceptedToTaxonResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxon"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "taxon",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames/{id}/relationships/acceptedToTaxon",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameImportDataFromFileResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/customObject"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "customObject",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames/actions/importDataFromFile",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-summary": "",
        "description": ""
      },
      "taxonNameUpdateRelationshipAcceptedToTaxonResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxonName"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "taxonName",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames/{id}/relationships/acceptedToTaxon",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameGetRelationshipSynonymToTaxonResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxon"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "taxon",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames/{id}/relationships/synonymToTaxon",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameUpdateRelationshipSynonymToTaxonResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxonName"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "taxonName",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames/{id}/relationships/synonymToTaxon",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameGetRelationshipVernacularToTaxonResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxon"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "taxon",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames/{id}/relationships/vernacularToTaxon",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      },
      "taxonNameUpdateRelationshipVernacularToTaxonResponse": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "oneOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/taxonName"
                  },
                  "id": {
                    "example": "1234",
                    "type": "string"
                  },
                  "type": {
                    "default": "taxonName",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "x-summary": ""
          },
          "jsonapi": {
            "type": "object",
            "x-summary": ""
          },
          "links": {
            "properties": {
              "self": {
                "example": "https://domain/api/taxonomy/v01/taxonNames/{id}/relationships/vernacularToTaxon",
                "format": "uri",
                "type": "string",
                "x-faker": "internet.url"
              }
            },
            "type": "object",
            "x-summary": ""
          },
          "meta": {
            "type": "object",
            "x-summary": ""
          }
        },
        "type": "object",
        "x-examples": {},
        "x-summary": "",
        "description": ""
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  }
}