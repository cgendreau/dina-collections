1. make tests pass
2. finalize form
  * navigation
  * proper dropdowns
3. repair tree
4. refactor form into different edit and create
5. Add all fields to inspect view
6. collaps view when going to mobile (single view mode)
* Separate inspect from block
7. create mr

6.



** Create hoc that fetch. size, allowed view modes, and current viewmode? Put in layout module? Should have middleware that updated currentViewmode based on screen change
** This layout module could potentially also keep track of sidebar
** Test block approach with info-sidebar open

Layout - new module
- Components
  - Layout
    index (takes primary, secondary block and layoutMode)
    - views
      - single
      - split
      - modal
  - block
    - Block
    - Block.Header
      - Block.HeaderTitle
      - Block.HeaderActions
    - Block.Content
    - Block.ContentActions



<Block>
  <BlockHeader title="title", actions=[buttons]>
  <BlockContent>
    <Block.ContentActions>
    whatever
  </BlockContent>

</Block>


Localities
- Components
  - collection
    - LocalityList
      - ListItem
    - LocalityTree
      - TreeItem
    - LocalityMap
      - IconItem
    - AdvancedFilter
  - item
    - inspect
    - form
      -- Base
      -- Create
      -- Edit
  - LocalityManager
    - blocks
      - Item (different blocks)
        - index.js (just a switch)
        - Edit (these might not be needed if form/Edit exist)
          - ContentActions?
        - Create
          - ContentActions?
        - Inspect
          - ContentActions?
      - Collection (can potentially be one that switch content)
        index.js
        - ContentActions?
        - List
        - Tree
        - Map

state:
  (potentially scoped under id)
  filter,
  itemBlockType (in url so not needed),
  collectionBlockType,

connect to layout hoc
LocalityManager
  itemBlockType = ['create', 'edit', 'inspect'] (compute from url). put in utilities. Potentially use selector in router for this. Would make it easier to provide active state for components down the tree. Likely not needed in first run

  collectionBlockType = ['tree', 'map', 'list', 'advancedList'] (keep in state)
  viewMode = ['modal', 'single', 'split'] (fetched from state - start with glocal)
  scope=[specific id for filter and stuff in state]



  this.onInteraction(type, data) => {
    push here
    redirect to next in ac
    change view mode from here
  }

  const itemBlock = itemBlockType && <ItemBlock itemBlockType={itemBlockType} />

  const collectionBlock = (viewMode === 'single' && itemBlock) ? null : <CollectionBlock>

  <Layout>
    primaryBlock={itemBlock || collectionBlock}
    secondaryBlock={itemBlock && collectionBlock}
    viewMode={split}
  </Layout>


* Idea
